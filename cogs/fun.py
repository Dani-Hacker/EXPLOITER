from discord.ext import commands
import discord
import random
import json
from mongodbs import *
import requests
from truth_dare import truths,dares
import random
from discord.ext.commands import cooldown, BucketType
import asyncio
import bson
from discord_components import *
from random import randint
from discord.utils import get
import wikipedia
import aiohttp
import bs4
# from googlesearch import search 
import re
from urllib import parse,request

class funs(commands.Cog, name='fun'):

    def __init__(self, bot):
        self.bot = bot

    def cog_load(self):
      print("loaded")

    def cog_unload(self):
        print(f'Fun was unloaded')




    @commands.command(aliases=['me'])
    @commands.guild_only()
    @commands.cooldown(1, 3, commands.BucketType.user)    
    async def meme(self,ctx):
      serverId = ctx.message.guild.id    
      if server_info.find_one({'id': serverId}):
        try:
          x=list(server_info.find({ "id":serverId }))[0]['disabled']
          if "meme" in x:
            return
        except:
          pass
      '''Post a meme'''
      r = requests.get("https://memes.blademaker.tv/api?lang=en")
      res = r.json()
      title = res["title"]
      ups = res["ups"]
      downs = res["downs"]
      comments = res['score']
      memes = discord.Embed(title=f"{title}")
      memes.set_image(url=res["image"])
      memes.set_footer(text=f"üëç : {ups}   üí¨ : {comments}")
      return await ctx.send(embed=memes)

    @commands.command()
    @commands.guild_only()
    @commands.cooldown(1, 3, commands.BucketType.user)
    async def fact_cat(self,ctx):
      serverId = ctx.message.guild.id    
      if server_info.find_one({'id': serverId}):
        try:
          x=list(server_info.find({ "id":serverId }))[0]['disabled']
          if "fact_cat" in x:
            return
        except:
          pass
      '''Post a cat fact'''
      r = requests.get("https://catfact.ninja/fact")
      res = r.json()
      embed = discord.Embed(title=f"Did you know this cat-fact?",description=res["fact"],colour=randint(0, 0xffffff))
      return await ctx.send(embed=embed)  

    @commands.command()
    @commands.guild_only()
    @commands.cooldown(1, 3, commands.BucketType.user)
    async def dog(self,ctx):
      serverId = ctx.message.guild.id    
      if server_info.find_one({'id': serverId}):
        try:
          x=list(server_info.find({ "id":serverId }))[0]['disabled']
          if "dog" in x:
            return
        except:
          pass
      '''Post a cat fact'''
      r = requests.get("https://dog.ceo/api/breeds/image/random")
      res = r.json()
      embed = discord.Embed(title=f"Have you seen this dog?",colour=randint(0, 0xffffff))
      embed.set_image(url=res["message"])
      return await ctx.send(embed=embed)   

    
    @commands.command()
    @commands.guild_only()
    @commands.cooldown(1, 5, commands.BucketType.user)
    @commands.has_permissions(administrator=True)
    async def count_channel(self,ctx,target_channel):
      try:
        serverId = ctx.message.guild.id    
        if server_info.find_one({'id': serverId}):
          try:
            x=list(server_info.find({ "id":serverId }))[0]['disabled']
            if "count_channel" in x:
              return
          except:
            pass
        if not count_info.find_one({'id': serverId}):
          c_id = int(target_channel[2:-1])
          # chan=get(ctx.guild.text_channels,id=c_id)
          channel = self.bot.get_channel(c_id)
          value=1
          person_id=self.bot.user.id
          await ctx.send(f"{ctx.author.mention} You successfully fixed {target_channel} as count channel!")
          embed=discord.Embed(title="From now on this channel is announced as count channel :partying_face::partying_face:",description="Let me start the counting in the counting channel!!!",colour=randint(0, 0xffffff))
          await channel.send(embed=embed)
          embed1=discord.Embed(title=value,colour=randint(0, 0xffffff))
          x=await channel.send(embed=embed1)
          await x.add_reaction("‚úÖ") 
          userDoc = {
                'id':serverId,
                'c_id':c_id,
                'value':bson.Int64(1),
                'last_sender':person_id,
                'msg_id':bson.Int64(12343)
            }
          count_info.insert_one(userDoc)
        else:
          await ctx.reply("You already started this counting game  in this server!")
          await ctx.reply("use ``?change_count`` for change the continuation of count in other channel\n``?count_reset``for resetting the count value from beginning\n``?cancel_count`` to cancel this counting game in ur server ")  
      except:
        await ctx.reply("No such channel exist")  


    @commands.command()
    @commands.guild_only()
    @commands.cooldown(1, 5, commands.BucketType.user)
    @commands.has_permissions(administrator=True)
    async def count_reset(self,ctx):
      serverId = ctx.message.guild.id    
      if server_info.find_one({'id': serverId}):
        try:
          x=list(server_info.find({ "id":serverId }))[0]['disabled']
          if "count_reset" in x:
            return
        except:
          pass
      try:
        existed_id=int(count_info.find_one(
                  {'id': serverId})['c_id'])
        if(ctx.message.channel.id != existed_id):
              count_info.update_one({'id': serverId}, {
              '$set': {'value':bson.Int64(1),"last_sender":self.bot.user.id}}) 
              channel=get(ctx.guild.text_channels,id=existed_id)
              await ctx.reply(f"{ctx.author.mention} You resetted{channel.mention} counting successfully!")
              embed=discord.Embed(title=f"‚ö†Ô∏è‚ö†Ô∏èThe counting in this channel has been resetted by {ctx.author,name}‚ö†Ô∏è‚ö†Ô∏è",description="Let me start the counting in the counting channel!!!",colour=randint(0, 0xffffff))
              await channel.send(embed=embed)
              embed1=discord.Embed(title=1,colour=randint(0, 0xffffff))
              x=await channel.send(embed=embed1)
              await x.add_reaction("‚úÖ") 
      except:
        await ctx.reply("You didn't fixed any counting channel yet!!")            


    @commands.command()
    @commands.guild_only()
    @commands.cooldown(1, 5, commands.BucketType.user)
    async def current_count(self,ctx):
      serverId = ctx.message.guild.id    
      if server_info.find_one({'id': serverId}):
        try:
          x=list(server_info.find({ "id":serverId }))[0]['disabled']
          if "current_count" in x:
            return
        except:
          pass
      if count_info.find_one({'id': serverId}):
          stored_info=count_info.find_one(
                  {'id': serverId})
          existed_id=int(stored_info['c_id'])
          channel=get(ctx.guild.text_channels,id=existed_id)
          value=int(stored_info['value'])
          last_sender=int(stored_info['last_sender'])
          person = await ctx.message.guild.fetch_member(last_sender)
          embed=discord.Embed(title="Last count:",description=f"Last count was {str(value)} counted by {person.mention}. This was requested by {ctx.author.mention}",timestamp=ctx.message.created_at,colour=randint(0, 0xffffff))
          embed.set_thumbnail(url="https://cdn.discordapp.com/avatars/839421874646548530/0c3f5a2ee26def577afe60154cd106cd.webp?size=1024")
          await ctx.send(embed=embed)
      else:
        await ctx.reply("There is no counting channel in this server!!!")  



    @commands.command()
    @commands.guild_only()
    @commands.cooldown(1, 5, commands.BucketType.user)
    @commands.has_permissions(administrator=True)
    async def cancel_count(self,ctx):
      serverId = ctx.message.guild.id    
      if server_info.find_one({'id': serverId}):
        try:
          x=list(server_info.find({ "id":serverId }))[0]['disabled']
          if "cancel_count" in x:
            return
        except:
          pass
      if count_info.find_one({'id': serverId}):
          existed_id=int(count_info.find_one(
                  {'id': serverId})['c_id'])
          channel=get(ctx.guild.text_channels,id=existed_id)
          embed=discord.Embed(title=f"{ctx.author.name} Stopped the counting game",colour=randint(0, 0xffffff))
          await channel.send(embed=embed)
          count_info.delete_one({'id':serverId})
          await ctx.reply(f"{ctx.author.mention} Counting game has been stopped!")
      else:
        await ctx.reply("There is no counting channel in this server!!!")  


    @commands.command()
    @commands.guild_only()
    @commands.cooldown(1, 5, commands.BucketType.user)
    @commands.has_permissions(administrator=True)
    async def change_count(self,ctx,target_channel):
      try:
        serverId = ctx.message.guild.id    
        if server_info.find_one({'id': serverId}):
          try:
            x=list(server_info.find({ "id":serverId }))[0]['disabled']
            if "change_count" in x:
              return
          except:
            pass
        if count_info.find_one({'id': serverId}):
          try:
            message_db=count_info.find_one(
                    {'id': serverId})
            c_id = int(target_channel[2:-1])
            old_cid=int(message_db['c_id'])
            value=int(message_db['value'])
            channel = self.bot.get_channel(c_id)
            person_id=self.bot.user.id
            try:
              old_chan=get(ctx.guild.text_channels,id=old_cid)
              await ctx.send(f"{ctx.author.mention} You successfully changed counting from {old_chan.mention} to  {target_channel}")
            except:
                await ctx.send(f"{ctx.author.mention} You successfully changed {target_channel} as counting channel")
            embed=discord.Embed(title="From now on this channel is announced as count channel :partying_face::partying_face:",description="Let me counting the counting in this channe from where it is stoppedl!!!",colour=randint(0, 0xffffff))
            embed.add_field(name=f"Last counting in the {old_chan.name}",value=f"{value}")
            await channel.send(embed=embed)
            new_value=value+1         
            embed1=discord.Embed(title=new_value,colour=randint(0, 0xffffff))
            x=await channel.send(embed=embed1)
            await x.add_reaction("‚úÖ")        
            embed2=discord.Embed(title=f"{ctx.author.name} Stopped the counting in this channel and shifted it to {channel.name} channel",colour=randint(0, 0xffffff))
            await old_chan.send(embed=embed2)
            count_info.update_one({'id': serverId}, {
                    '$set': {'value': bson.Int64(new_value),"last_sender":person_id,"c_id":c_id}})
          except:
            await ctx.reply("There is not counting channel in this server! or invalid channel")  
        else:
          await ctx.reply("You didn't started counting channel yet!!!")
           
      except:
        await ctx.reply("No such channel exist")   
    
    # @commands.command()
    # @commands.guild_only()
    # async def image(self,ctx,*,query):
    #   async with ctx.typing():
    #     for j in search(query,tld="co.in",num=1,stop=1,pause=2):
    #       await ctx.send(f"\n:point_right: {j}")
      
			  # for j in search(query, tld="co.in", num=1, stop=1, pause=2): 
				# 		await ctx.send(f"\n:point_right: {j}")      



    # @commands.command(aliases = ['wiki'])
    # async def wikipedia(self,ctx, *query):
    #     serverId = ctx.message.guild.id    
    #     if server_info.find_one({'id': serverId}):
    #       try:
    #         x=list(server_info.find({ "id":serverId }))[0]['disabled']
    #         if "wiki" in x:
    #           return
    #       except:
    #         pass
    #     x=""
    #     for i in query:
    #       x+=i+" "
    #     # await ctx.send(x)
    #     await ctx.send(wikipedia.summary(x,sentences=3,auto_suggest=True, redirect=True)


    @commands.command(aliases = ['wiki'])
    async def wikipedia(self, ctx, *, arg):
      serverId = ctx.message.guild.id    
      if server_info.find_one({'id': serverId}):
        try:
          x=list(server_info.find({ "id":serverId }))[0]['disabled']
          if "wiki" in x:
            return
        except:
          pass
      input = arg
      await ctx.send(f'<{wikipedia.page(input).url}>')
      await ctx.send(wikipedia.summary(input, sentences=3,auto_suggest=True, redirect=True))

       
    
    @commands.command(aliases = ['you'])
    async def youtube(self,ctx,*,search):
      serverId = ctx.message.guild.id    
      if server_info.find_one({'id': serverId}):
        try:
          x=list(server_info.find({ "id":serverId }))[0]['disabled']
          if "youtube" in x:
            return
        except:
          pass
      query_string = parse.urlencode({'search_query': search})
      html_content = request.urlopen('http://www.youtube.com/results?' + query_string)
      search_content= html_content.read().decode()
      search_results = re.findall(r'\/watch\?v=\w+', search_content)
      await ctx.send('https://www.youtube.com' + search_results[0])

    @commands.Cog.listener()
    async def on_message_edit(self, before, after):
      serverId=before.guild.id
      try:
          message_db=count_info.find_one(
                  {'id': serverId}) 
          sent_channel_id=int(before.channel.id)
          msg_id=before.id  
          if(int(message_db['c_id'])==sent_channel_id and int(message_db['msg_id'])==msg_id): 
            channel=self.bot.get_channel(sent_channel_id)
            msg = await channel.fetch_message(msg_id)
            await msg.delete()
          else:
            return        
      except:
        pass       


    @commands.Cog.listener()
    async def on_message_delete(self, message):
      serverId=message.guild.id
      try:
          message_db=count_info.find_one(
                  {'id': serverId}) 
          sent_channel_id=int(message.channel.id)
          msg_id=message.id  
          if(int(message_db['c_id'])==sent_channel_id and int(message_db['msg_id'])==msg_id): 
            try:
              value=int(message_db['value'] ) 
              last_sender=int(message_db['last_sender'])
              member = await message.guild.fetch_member(last_sender)
              channel=self.bot.get_channel(sent_channel_id)
              x=await channel.send(f"Last count is {str(value)} sent by {member.mention}")
              count_info.update_one({'id': serverId}, {
                    '$set': {"msg_id":int(x.id)}})
              await x.add_reaction("‚úÖ")    
              
            except:
              return  
          else:
            return        
      except:
        pass            

    @commands.Cog.listener()
    async def on_message(self,message):
        serverId=message.guild.id
        if message.author == self.bot.user:
          return
        try:
          message_db=count_info.find_one(
                  {'id': serverId}) 
          sent_channel_id=int(message.channel.id)  
          if(int(message_db['c_id'])==sent_channel_id): 
            try:
              message_content=int(message.content)
              value=int(message_db['value'] ) 
              value=value+1
              last_sender=int(message_db['last_sender'])
              sender_id=int(message.author.id)
              message_id=message.id
              if((value==message_content) and (sender_id !=last_sender)):
                count_info.update_one({'id': serverId}, {
                    '$set': {'value': bson.Int64(value),"last_sender":sender_id,"msg_id":message_id}})
                await message.add_reaction("‚úÖ")    
                return
              else:
                await message.delete()
                return
            except:
              await message.delete()
              return  
          else:
            return  
        except:
          pass  



    @commands.command()
    @commands.guild_only()
    @commands.cooldown(1, 5, commands.BucketType.user)
    async def ip(self,ctx,ip_address:str):
      serverId = ctx.message.guild.id    
      if server_info.find_one({'id': serverId}):
        try:
          x=list(server_info.find({ "id":serverId }))[0]['disabled']
          if "ip" in x:
            return
        except:
          pass
      try:
        r = requests.get(f"https://ipinfo.io/{ip_address}/geo")
        res = r.json()
        embed = discord.Embed(title=f"Random ip-address",description=res["ip"],colour=randint(0, 0xffffff))
        embed.add_field(name="City",value=res["city"],inline=False)
        embed.add_field(name="Region",value=res["region"],inline=False)
        embed.add_field(name="Country",value=res["country"],inline=False)
        embed.add_field(name="Location",value=res["loc"],inline=False)
        embed.add_field(name="Organisation",value=res["org"],inline=False)
        embed.add_field(name="Postal-number",value=res["postal"],inline=False)
        embed.set_footer(text=f"Timezone: {res['timezone']}")
        return await ctx.send(embed=embed)   
      except:
        embed = discord.Embed(title=f"Ip address will be in the format",description="117.200.149.23",colour=randint(0, 0xffffff))
        embed.add_field(name="Example Command:",value="?ip 117.200.149.23")
        embed.set_footer(text=f"Change the number in the ip address to see actually what exists in that address")
        return await ctx.send(embed=embed)

    @commands.command()
    @commands.guild_only()
    @commands.cooldown(1, 3, commands.BucketType.user)
    async def bored(self,ctx):
      serverId = ctx.message.guild.id    
      if server_info.find_one({'id': serverId}):
        try:
          x=list(server_info.find({ "id":serverId }))[0]['disabled']
          if "bored" in x:
            return
        except:
          pass
      '''Post a cat fact'''
      r = requests.get("https://www.boredapi.com/api/activity")
      res = r.json()
      embed = discord.Embed(title=f"Try this to get away from :sleeping: :sleeping:",description=res["activity"],colour=randint(0, 0xffffff))
      embed.set_footer(text=f"Type :  {res['type']}")
      return await ctx.send(embed=embed)     



    @commands.command(aliases = ['8ball','eightball'])
    @commands.guild_only()
    @commands.cooldown(1, 5, commands.BucketType.user)
    async def eball(self, ctx, *, search):
      serverId = ctx.message.guild.id   
      allowed=True
      try:
          x=list(server_info.find({ "id":serverId }))[0]['disabled']
          if "eball" in x:
            allowed=False
      except:
        pass      
      if(allowed==True):
        emoji=["üòÇ","üòï","üòí","üò≥","üò±","üòû","ü§î","üòè","üôÉ","üòã","üò∑","üòå","üò¨","üòé","üò©"]
        answers=["Signs point to yes ","Better not tell you now "," It is certain "," You may rely on it ","No ","Cannot predict now ","Outlook not so good "," My reply is no ","Nope ","As I see it, yes ","It is decidedly so","Yes","Most likely","That's a decision for you to figure out","My sources say no ","Nope","Yep","Yes - definitely","No - definitely","Don't count on it "]
        embed=discord.Embed(description=f":8ball: {random.choice(answers)} {random.choice(emoji)}",colour=randint(0, 0xffffff))
        await ctx.send(embed=embed)
    
    @commands.command(aliases = ['tru'])
    @commands.guild_only()
    @commands.cooldown(1, 5, commands.BucketType.user)
    async def truth(self,ctx):
      serverId = ctx.message.guild.id   
      allowed=True
      try:
          x=list(server_info.find({ "id":serverId }))[0]['disabled']
          if "truth" in x:
            allowed=False
      except:
        pass      
      if(allowed==True):
        embed = discord.Embed(
                        title=f'{random.choice(truths)}',
                        colour=randint(0, 0xffffff))
        await ctx.send(embed=embed)
    
      
    @commands.command(aliases = ['dru'])
    @commands.guild_only()
    @commands.cooldown(1, 3, commands.BucketType.user)
    async def dare(self,ctx):
      serverId = ctx.message.guild.id   
      allowed=True
      try:
          x=list(server_info.find({ "id":serverId }))[0]['disabled']
          if "dare" in x:
            allowed=False
      except:
        pass      
      if(allowed==True):
        embed = discord.Embed(
                          title=f'{random.choice(dares)}',
                          colour=randint(0, 0xffffff))
        await ctx.send(embed=embed)
      
    @commands.command(aliases=['av','ava'])
    @commands.guild_only()
    @commands.cooldown(1, 3, commands.BucketType.user)
    async def avatar(self,ctx: commands.Context, member: discord.Member = None):
      serverId = ctx.message.guild.id   
      allowed=True
      try:
        x=list(server_info.find({ "id":serverId }))[0]['disabled']
        if "avatar" in x:
          allowed=False
      except:
        pass
      if(allowed==True):
        if(member == None):
            await ctx.send(ctx.author.avatar_url)
        else:
            try:
                await ctx.send(member.avatar_url)
            except:
                await ctx.send("Mention someone properly!!!")



    @commands.command(aliases=['hck'])
    @commands.guild_only()
    @commands.cooldown(1, 25, commands.BucketType.user)
    async def hack(self,ctx: commands.Context, member: discord.Member):
      serverId = ctx.message.guild.id   
      allowed=True
      try:
        x=list(server_info.find({ "id":serverId }))[0]['disabled']
        if "hack" in x:
          allowed=False
      except:
        pass
      if(allowed==True):
        if(member == ctx.author):
            await ctx.send(f"I thought not to hack you my friend {member.mention} !. Since you insisted i started hacking you!!!")
            await asyncio.sleep(2)
        if(member == self.bot.user):
            await ctx.send("I am the Hacker üé≠ who hacks everyone. You tried to mess with me so i started hacking your system now üíÄüíÄ‚åõ‚åõ")
            await asyncio.sleep(2)
            member = ctx.author
        my_msg = await ctx.send(f"Started hacking..... {member.mention}")
        x = random.randint(0, 1000)
        texts = ["Collecting sensitive information ‚ö†Ô∏è from phishing once done on you... ",
                "Launching Malware ‚ò£Ô∏è attacks on you !!",
                "Injecting ransware and pegasus in your system üëæüëæ üëæ ",
                "Encrypting your important files üîëüîê.....Making it unreadable to u üñæüñæüñæ",
                "Launching Brute-Force-Attack and adding your ip address to botnets!!! üìçüìçüìç",
                f"Selling your sensitive data to ha*** üé≠ and got a profit worth {x} dollars ü§ë ",
                f"The dangerous hack has been completed and {member.mention} system has been filled with viruses üíÄüíÄüíÄ!!!"]
        for i in texts:
            await asyncio.sleep(3)
            await my_msg.edit(content=i)  

    @commands.command()  # closes the terminal üòÅ:)
    @commands.cooldown(1, 5, commands.BucketType.user)
    async def close(self,ctx):
        '''Used to stop the bot. Only available for developers üòÖ'''
        if ctx.author.id in [768016269269925911, 811919559086702642, 790790711326277652]:
            await ctx.send(f'{ctx.author.mention}You successfully closed the bot!!!')
            await quit()
        # else:
        #     await ctx.reply('This is only for owners üòé!')


    @commands.command(aliases=['i','inv'])  # invite link for the bot
    @commands.cooldown(1, 5, commands.BucketType.user)
    async def invite(self,ctx):
      try:
        serverId = ctx.message.guild.id   
        allowed=True
        try:
          x=list(server_info.find({ "id":serverId }))[0]['disabled']
          if "invite" in x:
            allowed=False
        except:
          pass
        if(allowed==True):
          dbl_invite=Button(style=ButtonStyle.URL,label="DBL invite",url="https://discordbotlist.com/bots/exploiter")
          top_invite=Button(style=ButtonStyle.URL,label="Top.gg Invite",url="https://top.gg/bot/839421874646548530")
          server_invite=Button(style=ButtonStyle.URL,label="Join official server",url="https://top.gg/servers/850200666798161941")
          # await ctx.send("http://tiny.cc/EXPLOITER")
          await ctx.send("You can invite in any one of the link!",
          components=[[dbl_invite,top_invite],[server_invite]]
          )
      except:
          dbl_invite=Button(style=ButtonStyle.URL,label="DBL invite",url="https://discordbotlist.com/bots/exploiter")
          top_invite=Button(style=ButtonStyle.URL,label="Top.gg Invite",url="https://top.gg/bot/839421874646548530")
          server_invite=Button(style=ButtonStyle.URL,label="Join official server",url="https://top.gg/servers/850200666798161941")
          # await ctx.send("http://tiny.cc/EXPLOITER")
          await ctx.send("You can invite in any one of the link!",
          components=[[dbl_invite,top_invite],[server_invite]]
          )


    @commands.command(aliases=['v','vt'])  # invite link for the bot
    @commands.cooldown(1, 5, commands.BucketType.user)
    async def vote(self,ctx):
      try:
        serverId = ctx.message.guild.id   
        allowed=True
        try:
          x=list(server_info.find({ "id":serverId }))[0]['disabled']
          if "vote" in x:
            allowed=False
        except:
          pass
        if(allowed==True):
          dbl_vote=Button(style=ButtonStyle.URL,label="DBL vote",url="https://discordbotlist.com/bots/exploiter/upvote")
          top_vote=Button(style=ButtonStyle.URL,label="Top.gg vote",url="https://top.gg/bot/839421874646548530/vote")
          server_invite=Button(style=ButtonStyle.URL,label="Join official server",url="https://top.gg/servers/850200666798161941")
          # await ctx.send("http://tiny.cc/EXPLOITER")
          await ctx.send("You can vote in any link!",
          components=[[dbl_vote,top_vote],[server_invite]]
          )
      except:
          dbl_vote=Button(style=ButtonStyle.URL,label="DBL vote",url="https://discordbotlist.com/bots/exploiter/upvote")
          top_vote=Button(style=ButtonStyle.URL,label="Top.gg vote",url="https://top.gg/bot/839421874646548530/vote")
          server_invite=Button(style=ButtonStyle.URL,label="Join official server",url="https://top.gg/servers/850200666798161941")
          # await ctx.send("http://tiny.cc/EXPLOITER")
          await ctx.send("You can invite in any link!",
          components=[[dbl_vote,top_vote],[server_invite]]
          )


    @commands.command(aliases=['q','qte'])
    @commands.guild_only()
    @commands.cooldown(1, 3, commands.BucketType.user)
    async def quote(self,ctx: commands.context, day: str = None):
      serverId = ctx.message.guild.id   
      allowed=True
      try:
        x=list(server_info.find({ "id":serverId }))[0]['disabled']
        if "quote" in x:
          allowed=False
      except:
        pass
      if(allowed==True):
        if(day == None):
            response = requests.get("https://zenquotes.io/api/random")
            zen = (response.json())
            await ctx.reply(zen[0]['q']+"\n                                          \t\t\t-"+zen[0]['a'])
        elif(day == "today"):
            response = requests.get("https://zenquotes.io/api/today")
            zen = response.json()
            await ctx.reply(zen[0]['q']+"\n                                          \t\t\t-"+zen[0]['a'])
        else:
            await ctx.reply("``?quote`` to get random quote and ``?quote today`` to get today's quote")        

def setup(bot):
    # asyncio.sleep(1)
    bot.add_cog(funs(bot))
    print(f'Fun was loaded!')        