from discord.ext import commands
import discord
import asyncio
from discord.ext.commands import cooldown, BucketType
from random import randint
from mongodbs import *
import DiscordUtils
import youtube_dl
global music
music = DiscordUtils.Music()


class Music(commands.Cog, name='music'):
    def __init__(self, bot):
        self.bot = bot

    def cog_load(self):
        print("Music was loaded")

    def cog_unload(self):
        print(f'Music was unloaded')

    @commands.command(aliases=['j', 'jn'])
    @commands.guild_only()
    @commands.cooldown(1, 2, commands.BucketType.user)
    async def join(self, ctx):
        serverId = ctx.message.guild.id
        allowed = True
        try:
            x = list(server_info.find({"id": serverId}))[0]['disabled']
            if "join" in x:
                allowed = False
        except:
            pass
        if(allowed == True):
            if(ctx.author.voice.channel == None):
                await ctx.reply("Join a voice channel first to use the commands")
                return
            try:
                await ctx.author.voice.channel.connect()  # Joins author's voice channel
                embed = discord.Embed(
                    description=f"joined voice :microphone2: channel {ctx.author.voice.channel.mention} requested by {ctx.author.mention}", timestamp=ctx.message.created_at, color=discord.Color.green())
                embed.set_thumbnail(url=ctx.author.guild.icon_url)
                embed.set_footer(text=self.bot.user.name,
                                 icon_url=self.bot.user.avatar_url)
                embed.set_author(name=ctx.author.name,
                                 icon_url=ctx.author.avatar_url)
                await ctx.send(embed=embed)
            except:
                await ctx.reply("Already joined voice channel")

    @commands.command(aliases=['l', 'lve'])
    @commands.guild_only()
    @commands.cooldown(1, 2, commands.BucketType.user)
    async def leave(self, ctx):
        serverId = ctx.message.guild.id
        allowed = True
        try:
            x = list(server_info.find({"id": serverId}))[0]['disabled']
            if "leave" in x:
                allowed = False
        except:
            pass
        if(allowed == True):
            if(ctx.author.voice.channel == None):
                await ctx.reply("Join a voice channel first to use the commands")
                return
        # try:
            emojis_w = ['✅', '❌']
            embed = discord.Embed(title="Vote for leaving channel should be 70%",
                                  description="Vote to make me believe. Poll for 20 seconds", color=discord.Color.red())
            y = await ctx.send(embed=embed)
            x = await ctx.fetch_message(y.id)
            for m in emojis_w:
                await x.add_reaction(m)
            # sleeper()
            await asyncio.sleep(20)
            x = await ctx.fetch_message(y.id)
            acceptors = await x.reactions[0].users().flatten()
            acceptors.pop(acceptors.index(self.bot.user))
            acceptors_count = int(len(acceptors))
            x = await ctx.fetch_message(y.id)
            rejectors = await x.reactions[1].users().flatten()
            rejectors.pop(rejectors.index(self.bot.user))
            rejectors_count = int(len(rejectors))
            total = int(acceptors_count)+int(rejectors_count)
            if(acceptors_count >= rejectors_count):
                if(total != 0):
                    ratio = float(acceptors_count/total)
                    if(ratio >= 0.70):
                        x = await ctx.fetch_message(y.id)
                        try:
                            player = music.get_player(guild_id=ctx.guild.id)
                            await player.stop()
                            await ctx.voice_client.disconnect()
                        except:
                            await ctx.voice_client.disconnect()
                        embed = discord.Embed(
                            title="Left voice channel as many people voted to leave the voice channel :cry:", color=discord.Color.red())
                        await x.edit(embed=embed)
                    else:
                        x = await ctx.fetch_message(y.id)
                        embed = discord.Embed(
                            title="Can't leave voice channel beacause of less than 70% of votes", color=discord.Color.green())
                        await x.edit(embed=embed)
            else:
                if(acceptors_count == 0):
                    x = await ctx.fetch_message(y.id)
                    embed = discord.Embed(title="No-one has mind to leave me from this channel",
                                          description="Please don't use this command  again", color=discord.Color.green())
                    await x.edit(embed=embed)
                else:
                    x = await ctx.fetch_message(y.id)
                    embed = discord.Embed(
                        title="Majority people don't have interest to leave", color=discord.Color.green())
                    await x.edit(embed=embed)

    @commands.command(aliases=['rep'])
    @commands.guild_only()
    @commands.cooldown(1, 3, commands.BucketType.user)
    async def repair(self, ctx):
        serverId = ctx.message.guild.id
        allowed = True
        try:
            x = list(server_info.find({"id": serverId}))[0]['disabled']
            if "repair" in x:
                allowed = False
        except:
            pass
        if(allowed == True):
            try:
                if(ctx.author.voice == None):
                    await ctx.reply("Join a voice channel first to use the commands")
                    return
                player = music.get_player(guild_id=ctx.guild.id)
                await player.stop()
                await ctx.send(f"Repaired succesfully")
            except:
                await ctx.reply('Already repaired')

    @commands.command(aliases=['ply'])
    @commands.guild_only()
    @commands.cooldown(1, 5, commands.BucketType.user)
    async def play(self, ctx, *, url):
        try:
            serverId = ctx.message.guild.id
            allowed = True
            try:
                x = list(server_info.find({"id": serverId}))[0]['disabled']
                if "play" in x:
                    allowed = False
            except:
                pass
            if(allowed == True):
                if(ctx.author.voice == None):
                    await ctx.reply("Join a voice channel first to use the commands")
                    return
                embed = discord.Embed(
                    title="Adding your song...", colour=discord.Color.green())
                y = await ctx.send(embed=embed)
                x = await ctx.fetch_message(y.id)
                for i in range(20):
                    try:
                        player = music.get_player(guild_id=ctx.guild.id)
                        if not player:
                            player = music.create_player(
                                ctx, ffmpeg_error_betterfix=True)
                        if not ctx.voice_client.is_playing():
                            await player.queue(url, search=True)
                            song = await player.play()
                            embed = discord.Embed(
                                title=f"Playing {song.name}", colour=discord.Color.green())
                            await x.edit(embed=embed)
                            return
                        else:
                            song = await player.queue(url, search=True)
                            embed = discord.Embed(
                                title=f"Queued {song.name}", colour=discord.Color.green())
                            await x.edit(embed=embed)
                            return
                    except:
                        await asyncio.sleep(0.5)
                        pass
                embed = discord.Embed(
                    title="Can't play that song. Try again", colour=discord.Color.red())
                await x.edit(embed=embed)
        except:
            await ctx.reply('Try again later!!!')

        @commands.command(aliases=['pse'])
        @commands.guild_only()
        @commands.cooldown(1, 3, commands.BucketType.user)
        async def pause(self, ctx):
            serverId = ctx.message.guild.id
            allowed = True
            try:
                x = list(server_info.find({"id": serverId}))[0]['disabled']
                if "pause" in x:
                    allowed = False
            except:
                pass
            if(allowed == True):
                try:
                    if(ctx.author.voice == None):
                        await ctx.reply("Join a voice channel first to use the commands")
                        return
                    player = music.get_player(guild_id=ctx.guild.id)
                    song = await player.pause()
                    embed = discord.Embed(
                        description=f"Paused {song.name} as requested by {ctx.author.mention}", timestamp=ctx.message.created_at, color=discord.Color.gold())
                    embed.set_thumbnail(url=ctx.author.guild.icon_url)
                    embed.set_footer(text=self.bot.user.name,
                                     icon_url=self.bot.user.avatar_url)
                    embed.set_author(name=ctx.author.name,
                                     icon_url=ctx.author.avatar_url)
                    await ctx.send(embed=embed)
                    # await ctx.send(f"Paused {song.name}")
                except:
                    await ctx.reply('You did not played a song!!!.Use ``?resume`` to resume the song!!!')

    @commands.command(aliases=['rsm'])
    @commands.guild_only()
    @commands.cooldown(1, 3, commands.BucketType.user)
    async def resume(self, ctx):
        serverId = ctx.message.guild.id
        allowed = True
        try:
            x = list(server_info.find({"id": serverId}))[0]['disabled']
            if "resume" in x:
                allowed = False
        except:
            pass
        if(allowed == True):
            try:
                if(ctx.author.voice == None):
                    await ctx.reply("Join a voice channel first to use the commands")
                    return
                player = music.get_player(guild_id=ctx.guild.id)
                song = await player.resume()
                embed = discord.Embed(description=f"Resumed {song.name} as requested by {ctx.author.mention}",
                                      timestamp=ctx.message.created_at, color=discord.Color.green())
                embed.set_thumbnail(url=ctx.author.guild.icon_url)
                embed.set_footer(text=self.bot.user.name,
                                 icon_url=self.bot.user.avatar_url)
                embed.set_author(name=ctx.author.name,
                                 icon_url=ctx.author.avatar_url)
                await ctx.send(embed=embed)
                # await ctx.send(f"Resumed {song.name}")
            except:
                await ctx.reply('You did not played a song!!!.Use ``?pause`` to pause the song!!!')

    @commands.command(aliases=['lp'])
    @commands.guild_only()
    @commands.cooldown(1, 2, commands.BucketType.user)
    async def loop(self, ctx):
        serverId = ctx.message.guild.id
        allowed = True
        try:
            x = list(server_info.find({"id": serverId}))[0]['disabled']
            if "loop" in x:
                allowed = False
        except:
            pass
        if(allowed == True):
            try:
                if(ctx.author.voice == None):
                    await ctx.reply("Join a voice channel first to use the commands")
                    return
                player = music.get_player(guild_id=ctx.guild.id)
                song = await player.toggle_song_loop()
                if song.is_looping:
                    string = f"Enabled loop for {song.name} as requested by {ctx.author.mention}"
                    # await ctx.send(f"Enabled loop for {song.name}")
                else:
                    string = f"Disabled loop for {song.name} as requested by {ctx.author.mention}"
                    # await ctx.send(f"Disabled loop for {song.name}")
                embed = discord.Embed(
                    description=string, timestamp=ctx.message.created_at, color=discord.Color.gold())
                embed.set_thumbnail(url=ctx.author.guild.icon_url)
                embed.set_footer(text=self.bot.user.name,
                                 icon_url=self.bot.user.avatar_url)
                embed.set_author(name=ctx.author.name,
                                 icon_url=ctx.author.avatar_url)
                await ctx.send(embed=embed)
            except:
                await ctx.reply('Play a song first!!!')

    @commands.command(aliases=['que'])
    @commands.guild_only()
    @commands.cooldown(1, 2, commands.BucketType.user)
    async def queue(self, ctx):
        serverId = ctx.message.guild.id
        allowed = True
        try:
            x = list(server_info.find({"id": serverId}))[0]['disabled']
            if "queue" in x:
                allowed = False
        except:
            pass
        if(allowed == True):
            try:
                if(ctx.author.voice == None):
                    await ctx.reply("Join a voice channel first to use the commands")
                    return
                player = music.get_player(guild_id=ctx.guild.id)
                z = []
                for song in player.current_queue():
                    z.append(f"{song.name}")
                n = len(z)
                string = ""
                for i in range(n):
                    string += f"{i} ) {z[i]}\n"
                string = string.replace("1", " :one: ")
                string = string.replace("2", " :two: ")
                string = string.replace("3", " :three: ")
                string = string.replace("4", " :four: ")
                string = string.replace("5", " :five: ")
                string = string.replace("6", " :six: ")
                string = string.replace("7", " :seven: ")
                string = string.replace("8", " :eight: ")
                string = string.replace("9", " :nine: ")
                string = string.replace("0", " :zero: ")

                embed = discord.Embed(title="Songs :musical_note: :musical_note:  based upon the index",
                                      description=f"{string}", timestamp=ctx.message.created_at, colour=randint(0, 0xffffff))
                embed.set_thumbnail(url=ctx.author.guild.icon_url)
                embed.set_footer(text=self.bot.user.name,
                                 icon_url=self.bot.user.avatar_url)
                embed.set_author(name=ctx.author.name,
                                 icon_url=ctx.author.avatar_url)
                await ctx.send(embed=embed)
                # await ctx.send(z)
                # await ctx.send(f"{', '.join([song.name for song in player.current_queue()])}")
            except:
                await ctx.reply('Play a song first!!!')

    @commands.command()
    @commands.guild_only()
    @commands.cooldown(1, 3, commands.BucketType.user)
    async def np(self, ctx):
        serverId = ctx.message.guild.id
        allowed = True
        try:
            x = list(server_info.find({"id": serverId}))[0]['disabled']
            if "np" in x:
                allowed = False
        except:
            pass
        if(allowed == True):
            try:
                if(ctx.author.voice == None):
                    await ctx.reply("Join a voice channel first to use the commands")
                    return
                player = music.get_player(guild_id=ctx.guild.id)
                song = player.now_playing()
                embed = discord.Embed(
                    title=f"Now playing {song.name}", timestamp=ctx.message.created_at, colour=randint(0, 0xffffff))
                embed.set_thumbnail(url=ctx.author.guild.icon_url)
                embed.set_footer(text=self.bot.user.name,
                                 icon_url=self.bot.user.avatar_url)
                embed.set_author(name=ctx.author.name,
                                 icon_url=ctx.author.avatar_url)
                await ctx.send(embed=embed)
            except:
                await ctx.reply('Not playing any song now!!!')

    @commands.command(aliases=['skp'])
    @commands.guild_only()
    @commands.cooldown(1, 3, commands.BucketType.user)
    async def skip(self, ctx):
        serverId = ctx.message.guild.id
        allowed = True
        try:
            x = list(server_info.find({"id": serverId}))[0]['disabled']
            if "skip" in x:
                allowed = False
        except:
            pass
        if(allowed == True):
            try:
                if(ctx.author.voice == None):
                    await ctx.reply("Join a voice channel first to use the commands")
                    return
                player = music.get_player(guild_id=ctx.guild.id)
                data = await player.skip(force=True)
                if len(data) == 2:
                    string = f"Skipped from {data[0].name} to {data[1].name}"
                    # await ctx.send(f"Skipped from {data[0].name} to {data[1].name}")
                else:
                    string = f"Skipped {data[0].name}"
                    # await ctx.send(f"Skipped {data[0].name}")
                embed = discord.Embed(title="Song :musical_note: :musical_note: skipped",
                                      description=string, timestamp=ctx.message.created_at, color=discord.Color.gold())
                embed.set_thumbnail(url=ctx.author.guild.icon_url)
                embed.set_footer(text=self.bot.user.name,
                                 icon_url=self.bot.user.avatar_url)
                embed.set_author(name=ctx.author.name,
                                 icon_url=ctx.author.avatar_url)
                await ctx.send(embed=embed)
            except:
                await ctx.reply('No other song in the queue!!!')

    @commands.command(aliases=['vl', 'vol'])
    @commands.guild_only()
    @commands.cooldown(1, 2, commands.BucketType.user)
    async def volume(self, ctx, vol):
        serverId = ctx.message.guild.id
        allowed = True
        try:
            x = list(server_info.find({"id": serverId}))[0]['disabled']
            if "volume" in x:
                allowed = False
        except:
            pass
        if(allowed == True):
            try:
                if(ctx.author.voice == None):
                    await ctx.reply("Join a voice channel first to use the commands")
                    return
                vol = float(vol)
                if(vol < 0 or vol > 200):
                    await ctx.reply("Volume available from ``0 to 200``")
                    return
                player = music.get_player(guild_id=ctx.guild.id)
                # volume should be a float between 0 to 1
                song, volume = await player.change_volume(float(vol) / 100)
                embed = discord.Embed(title=":speaker: Volume changed :speaker: ",
                                      description=f"Changed volume for {song.name} to {volume*100}% as requested by {ctx.author.mention}", timestamp=ctx.message.created_at, color=discord.Color.gold())
                embed.set_thumbnail(url=ctx.author.guild.icon_url)
                embed.set_footer(text=self.bot.user.name,
                                 icon_url=self.bot.user.avatar_url)
                embed.set_author(name=ctx.author.name,
                                 icon_url=ctx.author.avatar_url)
                await ctx.send(embed=embed)
                # await ctx.send(f"Changed volume for {song.name} to {volume*100}%")
            except:
                await ctx.reply('Play a song first!!!')

    @commands.command(aliases=['rmv'])
    @commands.guild_only()
    @commands.cooldown(1, 3, commands.BucketType.user)
    async def remove(self, ctx, index):
        serverId = ctx.message.guild.id
        allowed = True
        try:
            x = list(server_info.find({"id": serverId}))[0]['disabled']
            if "remove" in x:
                allowed = False
        except:
            pass
        if(allowed == True):
            try:
                if(ctx.author.voice == None):
                    await ctx.reply("Join a voice channel first to use the commands")
                    return
                player = music.get_player(guild_id=ctx.guild.id)
                song = await player.remove_from_queue(int(index))
                embed = discord.Embed(title=":wastebasket: Song removed :wastebasket: ",
                                      description=f"Removed {song.name} from queue as requested by {ctx.author.mention}", timestamp=ctx.message.created_at, color=discord.Color.red())
                embed.set_thumbnail(url=ctx.author.guild.icon_url)
                embed.set_footer(text=self.bot.user.name,
                                 icon_url=self.bot.user.avatar_url)
                embed.set_author(name=ctx.author.name,
                                 icon_url=ctx.author.avatar_url)
                await ctx.send(embed=embed)
                # await ctx.send(f"Removed {song.name} from queue")
            except:
                await ctx.reply(f'No song is there in the {index} to remove!!!')


def setup(bot):
    # asyncio.sleep(1)
    bot.add_cog(Music(bot))
    print(f'Music was loaded!')
