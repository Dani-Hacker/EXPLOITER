from discord.ext import commands, tasks
import discord
import requests
from mongodbs import *
import asyncio
from discord.ext.commands import cooldown, BucketType
import random
from random import randint
from discord.utils import get
import time
import datetime
import pytz
import logging

epoch = datetime.datetime.utcfromtimestamp(0)


class Giveaway(commands.Cog, name='giveaway'):
    """Commands to control a giveaway."""

    def __init__(self, bot):
        self.bot = bot
        self.determine_winner.start()

    def cog_load(self):
        print("Giveaway was loaded")

    def cog_unload(self):
        self.determine_winner.cancel()
        print(f'Giveaway was unloaded')

    @staticmethod
    def convert(time):
        pos = ["s", "m", "h", "d"]
        time_dict = {"s": 1, "m": 60, "h": 3600, "d": 86400}
        unit = time[-1]
        if unit not in pos:
            return -1
        try:
            val = int(time[:-1])
        except:
            return -2
        return val*time_dict[unit]

    @commands.command(aliases=['go', 'gro'])
    @commands.guild_only()
    @commands.has_permissions(administrator=True)
    @commands.cooldown(1, 3, commands.BucketType.user)
    async def grole(self, ctx, role: discord.Role):
        serverId = ctx.message.guild.id
        allowed = True
        if(allowed == True):
            if server_info.find_one({'id': serverId}):
                server_info.update_one({'id': serverId}, {
                    '$set': {'role': role.name}})
                await ctx.send(f"You fixed {role.name} as giveaway role")
            else:
                server_Doc = {
                    'id': int(serverId), 'role': role.name
                }
                server_info.insert_one(server_Doc)
                await ctx.send(f"You fixed {role.name} as giveaway role")

    @commands.command(aliases=['gnd', 'ge'])
    @commands.guild_only()
    @commands.cooldown(1, 2, commands.BucketType.user)
    async def gend(self, ctx: commands.Context, channel: discord.TextChannel, id_: int):
        serverId = ctx.message.guild.id
        allowed = True
        if(allowed == True):
            await ctx. message. delete()
            serverId = ctx.message.guild.id
            try:
                role = str(server_info.find_one(
                    {'id': serverId})['role'])
            except:
                await ctx.send("Ask admin to set a giveaway role by using ``grole`` command!")
                return
            if server_info.find_one({'id': serverId}) == None:
                await ctx.send("Ask admin to set a giveaway role by using ``grole`` command!")
                return
            role = str(server_info.find_one(
                {'id': serverId})['role'])
            check_role = get(ctx.message.guild.roles, name=role)
            if check_role in ctx.author.roles:
                try:
                    try:
                        msg = await channel.fetch_message(id_)
                    except:
                        await ctx.send("The id was entered incorrectly")
                        return
                    embed = msg.embeds[0]
                    embed_dict = embed.to_dict()
                    try:
                        if(embed_dict['fields'][3]['name'] == 'Ends at'):
                            prize = embed_dict['description']
                            host = embed_dict['fields'][0]['value']
                            no_winner = int(embed_dict['fields'][1]['value'])
                            duration = embed_dict['fields'][2]['value']
                            ends_at = embed_dict['fields'][3]['value']
                            users = await msg.reactions[0].users().flatten()
                            users.pop(users.index(self.bot.user))
                            counts = len(users)
                            winners = ""
                            if(no_winner <= counts):
                                winner = random.sample(users, no_winner)
                                for j in winner:
                                    winners += j.mention + " "
                            else:
                                winners = "Can't determine winner"
                            new_embed = discord.Embed(
                                title="Giveaway!", description=f"{prize}", color=discord.Color.red())
                            new_embed.add_field(name="Hosted by: ",
                                                value=host, inline=False)
                            new_embed.add_field(name="No of winners",
                                                value=no_winner, inline=False)
                            new_embed.add_field(name="Winner is : ",
                                                value=winners, inline=False)
                            new_embed.add_field(name="Duration : ",
                                                value=duration, inline=False)
                            new_embed.set_footer(
                                text="This giveaway has been ended")
                            await msg.edit(embed=new_embed)
                            link = f"https://discordapp.com/channels/{serverId}/{channel.id}/{id_}"
                            if(winners != "Can't determine winner"):
                                embed = discord.Embed(
                                    description=f"Congratulations! {winners} you won {prize} !. Total entries = {counts} entrants [<a:CCBLUE:873887310888976414>]({link})", color=discord.Color.green())
                                await channel.send(embed=embed)
                            else:
                                embed = discord.Embed(
                                    description=f"This giveaway has been cancelled due to lesser number of participants [<a:hype:854218302431559691>]({link})", color=discord.Color.red())
                                await channel.send(embed=embed)
                            giveaway_info.delete_one({"msg_id": id_})
                    except:
                        await ctx.send("This giveaway was not ended")
                except:
                    await ctx.send("This can not be ended!!!")
            else:
                await ctx.send(f"You don't have the required {role} role to use this command!!! ")

    @commands.command(aliases=['gre','gr'])
    @commands.guild_only()
    @commands.cooldown(1, 2, commands.BucketType.user)
    async def greroll(self,ctx: commands.Context, channel: discord.TextChannel, id_: int,selected="0"):
      serverId = ctx.message.guild.id   
      allowed=True
      if(allowed==True):
        await ctx. message. delete()
        serverId = ctx.message.guild.id
        try:
          role=str(server_info.find_one(
              {'id': serverId})['role'])
        except:
          await ctx.send("Ask admin to set a giveaway role by using ``grole`` command!")
          return   
        if server_info.find_one({'id': serverId})==None:
          await ctx.send("Ask admin to set a giveaway role by using ``grole`` command!")
          return
        role=str(server_info.find_one(
              {'id': serverId})['role'])
        check_role = get(ctx.message.guild.roles, name=role)
        if check_role in ctx.author.roles:
            try:
              try:
                  msg = await channel.fetch_message(id_)
              except:
                  await ctx.send("The id was entered incorrectly")
                  return
              embed = msg.embeds[0]
              embed_dict = embed.to_dict()
              # await ctx.send(embed_dict)
              if(embed_dict['footer']['text']!="This giveaway has been ended"):
                await ctx.send("This giveaway has not been ended")
                return
              else:
                prize=embed_dict['description']
                host=embed_dict['fields'][0]['value']
                no_winner=int(embed_dict['fields'][1]['value'])
                duration=embed_dict['fields'][3]['value']
                users = await msg.reactions[0].users().flatten()
                users.pop(users.index(self.bot.user))
                counts = len(users)
                winners=""  
                if selected=="0":
                  # print("0")
                  if(no_winner<=counts):
                    winner = random.sample(users, no_winner)
                    for j in winner:
                        winners += j.mention + " "
                  else:
                    winners="Can't determine winner"      
                  new_embed = discord.Embed(
                      title="<a:giveaway:853590688818135052> Giveaway Ended! <a:giveaway:853590688818135052>", description=f"{prize}", color=discord.Color.red())
                  new_embed.add_field(name="Hosted by: ",
                                      value=host, inline=False)
                  new_embed.add_field(name="No of winners",
                                      value=no_winner, inline=False)
                  new_embed.add_field(name="Winner is : ",
                                      value=winners, inline=False)
                  new_embed.add_field(name="Duration : ",
                                      value=duration, inline=False)                    
                  new_embed.set_footer(text="This giveaway has been ended")
                  await msg.edit(embed=new_embed)
                  link=f"https://discordapp.com/channels/{serverId}/{channel.id}/{id_}"
                  if(winners!="Can't determine winner"):
                    embed=discord.Embed(description=f"Congratulations! {winners} you won {prize} !. Total entries = {counts} entrants [<a:cyan_flame:853591761461313536>]({link})",color=discord.Color.green())
                    await channel.send(embed=embed)
                  else:
                    embed=discord.Embed(description=f"This giveaway has been cancelled due to lesser number of participants [<a:hypersquad:853591768279810098>]({link})",color=discord.Color.red())
                    await channel.send(embed=embed)
                else:
                  if(no_winner>counts):
                    embed=discord.Embed(description=f"This giveaway has been cancelled due to lesser number of participants [<a:hypersquad:853591768279810098>]({link})",color=discord.Color.red())
                    await channel.send(embed=embed)
                    return
                  old_winners=embed_dict["fields"][2]["value"]
                  need_reroll=selected.split(",")
                  allow=True
                  for i in need_reroll:
                    if not str(i).isnumeric():
                      allow=False
                    elif (1>int(i) or no_winner<int(i)):
                      allow=False
                  if allow==False:
                    await ctx.send("Invalid index!")
                    return
                  else:
                    old_winners_id=[]
                    sep_old_winners=old_winners.split(" ")
                    for i in sep_old_winners:
                      temp=i
                      temp=temp.replace("<@","")
                      temp=temp.replace("!","")
                      temp=temp.replace(">","")
                      old_winners_id.append(temp)
                    new_winners=""  
                    new_selected=""
                    for i in range(1,len(old_winners_id)+1):
                      if str(i) in need_reroll:
                        k=0
                      else:
                        check = await self.bot.fetch_user(old_winners_id[i-1])
                        users.pop(users.index(check))
                        new_winners+=f"{check.mention} "
                    for i in range(1,len(old_winners_id)+1):
                      if str(i) in need_reroll:
                        new=random.sample(users, 1)
                        for k in new:
                          new_winners+=f"{k.mention} "
                          new_selected+=f"{k.mention} "
                          users.pop(users.index(k))
                    new_embed = discord.Embed(
                        title="<a:giveaway:853590688818135052> Giveaway Ended! <a:giveaway:853590688818135052>", description=f"{prize}", color=discord.Color.red())
                    new_embed.add_field(name="Hosted by: ",
                                        value=host, inline=False)
                    new_embed.add_field(name="No of winners",
                                        value=no_winner, inline=False)
                    new_embed.add_field(name="Winner is : ",
                                        value=new_winners, inline=False)
                    new_embed.add_field(name="Duration : ",
                                        value=duration, inline=False)                    
                    new_embed.set_footer(text="This giveaway has been ended")
                    await msg.edit(embed=new_embed)
                    link=f"https://discordapp.com/channels/{serverId}/{channel.id}/{id_}"
                    embed=discord.Embed(description=f"Congratulations! {new_selected} you won {prize} !. Total entries = {counts} entrants [<a:cyan_flame:853591761461313536>]({link})",color=discord.Color.green())
                    await channel.send(embed=embed)
                  # print("ok")
            except:
                await ctx.send("This can not be rerolled <a:gift1:853819888220504104> !!!")
        else:
          await ctx.send(f"You don't have the required {role} role to use this command!!! ")


    @tasks.loop(seconds=20)
    async def determine_winner(self):
        IST = pytz.timezone('Asia/Kolkata')
        starttime = (datetime.datetime.now(IST))
        x = starttime.strftime('%Y-%m-%d %H:%M:%S')
        all_records = giveaway_info.find()
        for i in all_records:
            if(x >= i['endtime']):
                try:
                    winners = ""
                    channel_id = i['channel_id']
                    message_id = i['msg_id']
                    serverId = i["id"]
                    channel = self.bot.get_channel(channel_id)
                    msg = await channel.fetch_message(message_id)
                    embed = msg.embeds[0]
                    embed_dict = embed.to_dict()
                    prize = embed_dict['description']
                    host = embed_dict['fields'][0]['value']
                    no_winner = int(embed_dict['fields'][1]['value'])
                    duration = embed_dict['fields'][2]['value']
                    users = await msg.reactions[0].users().flatten()
                    users.pop(users.index(self.bot.user))
                    counts = len(users)
                    if(no_winner <= counts):
                        winner = random.sample(users, no_winner)
                        for j in winner:
                            winners += j.mention + " "
                    else:
                        winners = "Can't determine winner"
                    new_embed = discord.Embed(
                        title="<a:giveaway:853590688818135052> Giveaway Ended! <a:giveaway:853590688818135052>", description=f"{prize}", color=discord.Color.red())
                    new_embed.add_field(name="Hosted by: ",
                                        value=host, inline=False)
                    new_embed.add_field(name="No of winners",
                                        value=no_winner, inline=False)
                    new_embed.add_field(name="Winner is : ",
                                        value=winners, inline=False)
                    new_embed.add_field(name="Duration : ",
                                        value=duration, inline=False)
                    new_embed.set_footer(text="This giveaway has been ended")
                    await msg.edit(embed=new_embed)
                    #link = 'https://discordapp.com/channels/guild_id/channel_id/message_id'
                    link = f"https://discordapp.com/channels/{serverId}/{channel_id}/{message_id}"
                    if(winners != "Can't determine winner"):
                        embed = discord.Embed(
                            description=f"Congratulations! {winners} you won {prize} !. Total entries = {counts} entrants [<a:cyan_flame:853591761461313536>]({link})", colour=discord.Color.green())
                        await channel.send(embed=embed)
                        # await channel.send(f"Congratulations! {winners} you won {prize} !. Total entries = {counts} entrants [↗️]({link})")
                    else:
                        embed = discord.Embed(
                            description=f"This giveaway has been cancelled due to lesser number of participants [<a:announce:853591761640620032>]({link})", color=discord.Color.red())
                        await channel.send(embed=embed)
                    giveaway_info.delete_one({"msg_id": message_id})
                except:
                    giveaway_info.delete_one({"msg_id": message_id})

    @determine_winner.before_loop
    async def before_start(self):
        await self.bot.wait_until_ready()

    @commands.command(aliases=['gs', 'gst'])
    @commands.guild_only()
    @commands.cooldown(1, 5, commands.BucketType.user)
    async def gstart(self, ctx: commands.Context, timer: str, winner: str, *args):
        serverId = ctx.message.guild.id
        allowed = True
        if(allowed == True):
            await ctx. message. delete()
            try:
                role = str(server_info.find_one(
                    {'id': serverId})['role'])
            except:
                await ctx.send("Ask admin to set a giveaway role by using ``grole`` command!")
                return
            if server_info.find_one({'id': serverId})['role'] == None:
                await ctx.send("Ask admin to set a giveaway role by using ``grole`` command!")
                return
            serverId = ctx.message.guild.id
            role = str(server_info.find_one(
                {'id': serverId})['role'])
            check_role = get(ctx.message.guild.roles, name=role)
            if check_role in ctx.author.roles:
                times = self.convert(timer)
                if times == -1:
                    await ctx.send(f"You didn't answer the time with proper unit. Use (s-seconds|m-minutes|h-hour|d-day) next time!")
                    return
                elif times == -2:
                    await ctx.send(f"The time must be in integer. Please enter the integer")
                    return
                if(winner[-1] == "w"):
                    n = len(winner)
                    y = winner[0:n-1]
                    try:
                        winners = int(y)
                    except ValueError:
                        await ctx.send(f"The winner must be in integer. Please enter the integer! Eg: 1w-for 1 winner")
                        return
                else:
                    y = winner
                    try:
                        winners = int(y)
                    except ValueError:
                        await ctx.send(f"The winner must be in integer. Please enter the integer! Eg: 1w-for 1 winner")
                        return
                prize = ' '.join(args)
                if(timer[-1] == "s"):
                    prefix = "seconds"
                elif(timer[-1] == "m"):
                    prefix = "minutes"
                elif(timer[-1] == "h"):
                    prefix = "hours"
                elif(timer[-1] == "d"):
                    prefix = "days"
                n = len(timer)
                announce_time = timer[0:n-1]
                await ctx.send("The giveaway is starting in this channel now!!!")
                await asyncio.sleep(2)
                await ctx.channel.purge(limit=1)

                IST = pytz.timezone('Asia/Kolkata')
                endtime = (datetime.datetime.now(IST) +
                           datetime.timedelta(seconds=times))
                y = endtime.strftime('%Y-%m-%d %H:%M:%S')
                y = str(y)
                giveaway = discord.Embed(
                    title="**<a:giveaway:853590688818135052> GIVEAWAY <a:giveaway:853590688818135052>**",
                    description=f"**{prize}**",
                    colour=randint(0, 0xffffff)
                )
                giveaway.add_field(name="**Hosted By:**",
                                   value=ctx.author.mention, inline=False)
                giveaway.add_field(name="No of winners",
                                   value=f"{winners}", inline=False)
                giveaway.add_field(
                    name="Duration:", value=f"{announce_time} {prefix}", inline=False)
                giveaway.add_field(name="Ends at", value=f"{y}", inline=False)
                msg = await ctx.send(embed=giveaway)

                reactions = await msg.add_reaction("<:giveaway:853590688818135052>")
                message_id = msg.id
                channel_id = ctx.channel.id
                giveaway_doc = {
                    "id": serverId,
                    "condition": int(0),
                    'msg_id': message_id,
                    'channel_id': channel_id,
                    'endtime': y
                }
                giveaway_info.insert_one(giveaway_doc)
            else:
                await ctx.send(f"You don't have the required {role} role to use this command!!! ")

    @commands.command(aliases=['gd', 'gdr'])
    @commands.guild_only()
    @commands.cooldown(1, 2, commands.BucketType.user)
    async def gdrop(self, ctx: commands.Context, channel: discord.TextChannel, id_: int):
        serverId = ctx.message.guild.id
        allowed = True
        if(allowed == True):
            await ctx. message. delete()
            serverId = ctx.message.guild.id
            try:
                role = str(server_info.find_one(
                    {'id': serverId})['role'])
            except:
                await ctx.send("Ask admin to set a giveaway role by using ``grole`` command!")
                return
            if server_info.find_one({'id': serverId}) == None:
                await ctx.send("Ask admin to set a giveaway role by using ``grole`` command!")
                return
            role = str(server_info.find_one(
                {'id': serverId})['role'])
            check_role = get(ctx.message.guild.roles, name=role)
            if check_role in ctx.author.roles:
                try:
                    try:
                        msg = await channel.fetch_message(id_)
                    except:
                        await ctx.send("The id was entered incorrectly")
                        return
                    embed = msg.embeds[0]
                    embed_dict = embed.to_dict()
                    try:
                        if(embed_dict['fields'][3]['name'] == 'Ends at'):
                            prize = embed_dict['description']
                            host = embed_dict['fields'][0]['value']
                            ends_at = embed_dict['fields'][3]['value']
                            new_embed = discord.Embed(
                                title="Giveaway!", description=f"{prize}", color=discord.Color.red())
                            new_embed.add_field(name="Hosted by: ",
                                                value=host, inline=False)
                            new_embed.add_field(name="Cancelled by: ",
                                                value=ctx.author.mention, inline=False)
                            new_embed.set_footer(
                                text=f"Giveaway has been cancelled")
                            await msg.edit(embed=new_embed)
                            link = f"https://discordapp.com/channels/{serverId}/{channel.id}/{id_}"
                            embed = discord.Embed(
                                description=f"This giveaway has been cancelled by {ctx.author.mention} [<a:charmandertail:853167558290702366>]({link})", color=discord.Color.red())
                            await channel.send(embed=embed)
                            # await channel.send(f"This giveaway has been cancelled by {ctx.author.mention}")
                            giveaway_info.delete_one({"msg_id": id_})
                        else:
                            await ctx.send("That giveaway can not be dropped")
                    except:
                        await ctx.send("This giveaway was already ended or incorrect")
                except:
                    await ctx.send("This can not be ended!!!")
            else:
                await ctx.send(f"You don't have the required {role} role to use this command!!! ")

    @commands.command(aliases=['gcr', 'gc', 'gcrt'])
    @commands.guild_only()
    @commands.cooldown(1, 20, commands.BucketType.user)
    async def gcreate(self, ctx):
        serverId = ctx.message.guild.id
        allowed = True
        if(allowed == True):
            no_messages = role_need = need_guild = 0
            try:
                role = str(server_info.find_one(
                    {'id': serverId})['role'])
            except:
                await ctx.send("Ask admin to set a giveaway role by using ``grole`` command!")
                return
            if server_info.find_one({'id': serverId}) == None:
                await ctx.send("Ask admin to set a giveaway role by using ``grole`` command!")
                return
            serverId = ctx.message.guild.id
            role = str(server_info.find_one(
                {'id': serverId})['role'])
            check_role = get(ctx.message.guild.roles, name=role)
            if check_role in ctx.author.roles:
                '''Used to start the giveaway in the any channel Eg:||?gcreate #giveaway 10s 1w dank coins||.Use (s-seconds|m-minutes|h-hour|d-day and w-winners)Giveaways require ``giveaway`` role. Ask the owner to create a role name ``giveaway`` if there is no role'''
                await ctx.send("Let's start the giveaway! Answer these questions within 60 seconds")
                questions = ["Which channel should the giveaway be hosted in?",
                             "What should be the duration of the giveaway? (s-seconds|m-minutes|h-hour|d-day)",
                             "Number of winners in the giveaway?",
                             "What is the prize of the giveaway?"]
                answers = []

                def check(m):
                    return m.author == ctx.author and m.channel == ctx.channel
                for i in questions:
                    await ctx.send(i)
                    try:
                        msg = await self.bot.wait_for('message', timeout=60.0, check=check)
                    except asyncio.TimeoutError:
                        await ctx.send("You didn't answered in time, please answer at next time!")
                        return
                    else:
                        answers.append(msg.content)
                try:
                    c_id = int(answers[0][2:-1])
                except:
                    await ctx.send(f"You didn't mention a channel correctly.Do it like this {ctx.channel.mention} next time")
                    return
                channel = self.bot.get_channel(c_id)
                times = self.convert(answers[1])
                if times == -1:
                    await ctx.send(f"You didn't answer the time with proper unit. Use (s-seconds|m-minutes|h-hour|d-day) next time!")
                    return
                elif times == -2:
                    await ctx.send(f"The time must be in integer. Please enter the integer")
                    return
                no_winners = answers[2]
                prize = answers[3]
                if(no_winners.isnumeric() == True):
                    no_winners = int(no_winners)
                else:
                    await ctx.send("you gave non-integer values for winners")
                    return
                if(answers[1][-1] == "s"):
                    prefix = "seconds"
                elif(answers[1][-1] == "m"):
                    prefix = "minutes"
                elif(answers[1][-1] == "h"):
                    prefix = "hours"
                elif(answers[1][-1] == "d"):
                    prefix = "days"
                n = len(answers[1])
                announce_time = answers[1][0:n-1]
                require = 0
                components = [
                    [
                        Button(label='', style=ButtonStyle.green,
                               custom_id='yes', emoji="✅"),
                        Button(label=' ', style=ButtonStyle.red,
                               custom_id='no', emoji="🚫")

                    ]
                ]
                message = await ctx.send("Select ✅ to add requirements and 🚫 to create giveaway without requirements", components=components)
                while True:
                    try:
                        interaction = await self.bot.wait_for(
                            'button_click',
                            check=lambda inter: inter.message.id == message.id,
                            timeout=60
                        )
                    except asyncio.TimeoutError:
                        embed.description = "You didn't answered the question in time"
                        for row in components_type:
                            row.disable_components()
                        return await message.edit(embed=embed, components=components_type)
                    if interaction.author.id == ctx.author.id:
                        for row in components:
                            row.disable_components()
                        await message.edit(components=components)
                        if interaction.custom_id == "yes":
                            require = 1
                            await interaction.send("You selected requirements option!")
                        else:
                            require = 0
                            await interaction.send("You selected no-requirements option!")
                        break

                    else:
                        interaction.send("This is not for you")
                if require == 1:
                    embed = discord.Embed(title="What type of condition you need to apply?",
                                          description="```shell\nChoose 💬 for Message requirements\nChoose 📜 for Role requirements\nChoose 👑 for Server requirements\n``` ", colour=randint(0, 0xffffff))
                    components = [
                        [
                            Select(
                                placeholder="Select the requirements you want to apply",
                                options=[
                                    SelectOption(label='Message', value='message', emoji="💬",
                                                 description="Select to apply message requirements", default=False),
                                    SelectOption(
                                        label='Role', value='role', description="Select to apply role requirements", emoji="📜"),
                                    SelectOption(label='Server', value='server', emoji="👑",
                                                 description="Select to apply server requirements", default=False)
                                ], min_values=1,
                                max_values=3
                            )
                        ],
                        [
                            Button(emoji=self.bot.get_emoji(
                                853167562397057043), label='Confirm', style=ButtonStyle.green, custom_id='confirm'),
                            Button(label='Cancel', style=ButtonStyle.red,
                                   custom_id='end', emoji="🗑️")
                        ]
                    ]
                    message = await ctx.send(embed=embed, components=components)
                    interaction_values = []
                    while True:
                        try:
                            interaction = await self.bot.wait_for(
                                'interaction',
                                check=lambda inter: inter.message.id == message.id,
                                timeout=60
                            )
                        except asyncio.TimeoutError:
                            for row in components:
                                row.disable_components()
                            return await message.edit(components=components)

                        if interaction.author.id == ctx.author.id:
                            pass
                        else:
                            await interaction.send("Hey! This is not for you!")

                        # else:
                        if isinstance(interaction.component, Button):
                            if interaction.author.id == ctx.author.id:
                                if interaction_values == []:
                                    await interaction.send("Select atleast one thing!")
                                else:
                                    for row in components:
                                        row.disable_components()
                                    await message.edit(components=components)
                                    await interaction.send("You confirmed the things successfully!")
                                    break

                            else:
                                await interaction.send("This is not for you")
                        if isinstance(interaction.component, Select):
                            if interaction.author.id == ctx.author.id:
                                interaction_values = interaction.values
                                await interaction.send(f"You selected {interaction.values}\n``Press confirm to confirm it or cancel to cancel the selection``")
                            else:
                                await interaction.send("Hey! This is not for you!")
                    if "message" in interaction_values:
                        await ctx.send("Enter number of messages to be sent in the server to participate in the giveaway?")
                        try:
                            msg = await self.bot.wait_for('message', timeout=60.0, check=check)
                        except asyncio.TimeoutError:
                            await ctx.send("You didn't answered in time, please answer at next time!")
                            return
                        else:
                            if (msg.content.isnumeric() == False):
                                await ctx.send("Number of messages should be integer!")
                                return
                            else:
                                no_messages = int(msg.content)

                    if "role" in interaction_values:
                        await ctx.send("Enter the role to be present to participate in the giveaway?.``Note: Enter the id of the role``")
                        try:
                            msg = await self.bot.wait_for('message', timeout=60.0, check=check)
                        except asyncio.TimeoutError:
                            await ctx.send("You didn't answered in time, please answer at next time!")
                            return
                        else:
                            if (msg.content.isnumeric() == False):
                                await ctx.send("Role-id should be integer!")
                                return
                            else:
                                try:
                                    role_needed = get(
                                        ctx.author.guild.roles, id=int(msg.content))
                                    if role_need == None:
                                        await ctx.send("No such role exists")
                                        return
                                    else:
                                        role_need = int(msg.content)
                                except:
                                    await ctx.send("No such role exists")
                                    return

                    if "server" in interaction_values:
                        await ctx.send("Enter the server where the participant should be there to participate in the giveaway?. ``Note:Enter the id of that server and the bot should be present in that server to check``")
                        try:
                            msg = await self.bot.wait_for('message', timeout=60.0, check=check)
                        except asyncio.TimeoutError:
                            await ctx.send("You didn't answered in time, please answer at next time!")
                            return
                        else:
                            if (msg.content.isnumeric() == False):
                                await ctx.send("Server-id should be integer!")
                                return
                            else:
                                if serverId == int(msg.content):
                                    await ctx.send("You can't kept the same server as requirements ):")
                                    return
                                try:
                                    need_guilded = self.bot.get_guild(
                                        int(msg.content))
                                    if need_guilded == None:

                                        await ctx.send("Bot is not in that guild or invalid guild-id")
                                        return
                                    else:
                                        need_guild = int(msg.content)
                                except:
                                    await ctx.send("Bot is not in that guild or invalid guild-id")
                                    return

                         # no_messages,role_need,need_guild
                    require = 1
                    string = ""
                    if "message" in interaction_values:
                        string += f"No of messages required = {no_messages}\n"
                    if "role" in interaction_values:
                        string += f"Role needed = {role_needed.name}\n"
                    if "server" in interaction_values:
                        string += f"Server to be in = {need_guilded.name}\n"
                else:
                    require = 0
                await ctx.send(f"The Giveaway will be in channel {channel.mention} and will last for {answers[1]} !")
                IST = pytz.timezone('Asia/Kolkata')
                endtime = (datetime.datetime.now(IST) +
                           datetime.timedelta(seconds=times))
                y = endtime.strftime('%Y-%m-%d %H:%M:%S')
                y = str(y)
                giveaway = discord.Embed(
                    title="**<a:giveaway:853590688818135052> GIVEAWAY <a:giveaway:853590688818135052>**",
                    description=f"**{prize}**",
                    colour=randint(0, 0xffffff)
                )
                giveaway.add_field(name="**Hosted By:**",
                                   value=ctx.author.mention, inline=False)
                giveaway.add_field(name="No of winners",
                                   value=f"{no_winners}", inline=False)
                giveaway.add_field(
                    name="Duration:", value=f"{announce_time} {prefix}", inline=False)
                giveaway.add_field(name="Ends at", value=f"{y}", inline=False)
                if require == 1:
                    giveaway.add_field(
                        name="Requirements for giveaway", value=f"```shell\n{string}```", inline=False)
                msg = await channel.send(embed=giveaway)
                reactions = await msg.add_reaction("<:giveaway:853590688818135052>")
                message_id = msg.id
                giveaway_doc = {
                    "id": serverId,
                    'msg_id': message_id,
                    'channel_id': c_id,
                    'endtime': y,
                    "condition": require,
                    "no_messages": no_messages,
                    "role_need": role_need,
                    "need_guild": need_guild
                }
                giveaway_info.insert_one(giveaway_doc)
            else:
                await ctx.reply(f"You don't have the required {role} role to use this command!!! ")

    @commands.Cog.listener()
    async def on_member_remove(self,member):
      guild=member.guild
      serverId=guild.id
      if member.id==self.bot.user.id:
          giveaway_informs=giveaway_info.find({"need_guild":serverId})
          count=0
          for i in giveaway_informs:
            count+=1
          # print(count)  
          if giveaway_informs!=None:
            embed=discord.Embed(title=f"Since the server {guild.name} is requirements for {str(count)} giveaways in some other server. This requirements can't be satisfied since you kicked me",description=f"```shell\nJoin me to continue the giveaway without collaption to bring more people to your server\n``` ",colour=discord.Color.red())    
            embed.set_thumbnail(url=guild.icon_url)
            try:
              await guild.owner.send(embed=embed)
            except:
              pass
            selected=[]  
            giveaway_informs=giveaway_info.find({"need_guild":serverId})
            for giveaway_inform in giveaway_informs:
              if int(giveaway_inform["id"]) not in selected:
                selected.append(int(giveaway_inform["id"]))
            #     print(giveaway_inform["id"])  
            # print(selected)
            for i in selected:    
              old_guild = self.bot.get_guild(int(i))
              new_embed=discord.Embed(title=f"Since you made {old_guild.name} as requirements in some giveaway I am informing you this message",description=f"```shell\nI am kicked from {member.guild.name} so please ask the owner to add me or the requirements you kept in the giveaway won't work properly\nBut it will work properly if they add me again in their server\n``` ",colour=discord.Color.red())    
              new_embed.set_thumbnail(url=member.guild.icon_url) 
              try:
                await old_guild.owner.send(embed=new_embed)
              except:
                continue
              
          return
      giveaway_informs=giveaway_info.find({"need_guild":serverId})
      if giveaway_informs==None:
        pass
      else:
        count=0
        for giveaway_inform in giveaway_informs:
          channelId=giveaway_inform["channel_id"]
          messageId=giveaway_inform["msg_id"]
          channel=self.bot.get_channel(channelId)
          message=await channel.fetch_message(messageId)
          try:
            await message.remove_reaction("<:giveaway:853590688818135052>",member)
            count=count+1
          except:
            continue
        if count!=0:
          embed=discord.Embed(title=f"Since the server {member.guild.name} is one of the requirements in some server that you participated in giveaway. You entry has been cancelled for {str(count)} giveaways",description=f"```shell\nIf you want to get an entry in the giveaway. Join the required server``` ",colour=randint(0, 0xffffff))    
          embed.set_thumbnail(url=member.guild.icon_url)
          await member.send(embed=embed)
          
            
  
    @commands.Cog.listener()
    async def on_raw_reaction_add(self, payload):
      if str(payload.emoji)!="<a:giveaway:853590688818135052>":   
        return
      # if payload.channel_id!=905835369247952936:
      #   return
      reactorId=payload.member.id
      if reactorId==self.bot.user.id:
        return
      channelId=payload.channel_id
      messageId=payload.message_id
      info_giveaway=giveaway_info.find_one({"channel_id":channelId,"msg_id":messageId})
      if info_giveaway:
        if info_giveaway==None:
          return
        else:
          try:
            condition=int(info_giveaway["condition"])
          except:
            return
          if condition==0:
            serverId=payload.guild_id
            guild = self.bot.get_guild(serverId)
            member = guild.get_member(reactorId)
            embed=discord.Embed(title=f"You successfully joined the giveaway",description=f"```shell\nAll the best for your victory in the giveaway (:\n``` ",colour=randint(0, 0xffffff))    
            embed.set_thumbnail(url=guild.icon_url)
            try:
              await member.send(embed=embed)
              return
            except:
              return
           
          else:
            no_messages=info_giveaway["no_messages"]
            role_id=info_giveaway["role_need"]
            need_guild=info_giveaway["need_guild"]
            serverId=payload.guild_id
            guild = self.bot.get_guild(serverId)
            member = guild.get_member(reactorId)
            channel=self.bot.get_channel(channelId)
            message=await channel.fetch_message(messageId)
            if no_messages!=0:
              message_data=message_exp.find_one({"id":serverId,"author_id":reactorId})
              if message_data:
                if message_data==None:
                  embed=discord.Embed(title="Not required no-of messages",description=f"You need should have sent {str(no_messages)} to participate in this giveaway.\n```shell\nYou didn't sent any message in this server.\nNote:Only 1 messages will be accepted in a minute to prevent spamming\n``` ",colour=randint(0, 0xffffff))
                  embed.set_thumbnail(url=guild.icon_url)
                  try:
                    await message.remove_reaction("<:giveaway:853590688818135052>",member)
                    await member.send(embed=embed)
                    return
                  except:
                    return
                  return
                else:
                  no_auth_message=int(message_data["count"])
                  if no_auth_message <no_messages:
                    embed=discord.Embed(title="Not required no-of messages",description=f"You should have sent {str(no_messages)} to participate in {guild.name} to participate in this giveaway.\n```shell\nYou didn't sent required number of messages in this server.\nNote:Only 1 messages will be accepted in a minute to prevent spamming\n``` ",colour=randint(0, 0xffffff))
                    embed.set_thumbnail(url=guild.icon_url)
                    embed.add_field(name="No.of messages sent by you : ", value=str(no_auth_message), inline=False)
                    try:
                      await message.remove_reaction("<:giveaway:853590688818135052>",member)
                      await member.send(embed=embed)
                      return
                    except:
                      return
              else:
                embed=discord.Embed(title="Not required no-of messages",description=f"You should have sent {str(no_messages)} to participate in {guild.name} to participate in this giveaway.\n```shell\nYou didn't sent any message in this server.\nNote:Only 1 messages will be accepted in a minute to prevent spamming\n``` ",colour=randint(0, 0xffffff))
                embed.set_thumbnail(url=guild.icon_url)
                try:
                  await message.remove_reaction("<:giveaway:853590688818135052>",member)
                  await member.send(embed=embed)
                  return
                except:
                  return
            if role_id!=0:
              role = get(guild.roles, id=int(role_id))
              if role in member.roles:
                pass
              else:
                embed=discord.Embed(title=f"You don't have the shiny required {role.name} role in {guild.name}  to participate in giveaway",description=f"```shell\nAsk guild admins or mod to find-out how to get that role\n``` ",colour=randint(0, 0xffffff))
                embed.set_thumbnail(url=guild.icon_url)
                try:
                  await message.remove_reaction("<:giveaway:853590688818135052>",member)
                  await member.send(embed=embed)
                  return
                except:
                  return
            if need_guild!=0:
              req_guild = self.bot.get_guild(int(need_guild))
              if req_guild==None:
                return
              need_member = req_guild.get_member(reactorId)
              if need_member==None:
                embed=discord.Embed(title=f"You should be there in the server {req_guild.name} to participate in the giveaway of {guild.name}",description=f"```shell\nAsk moderators or admins to give the server link of that guild to join\n``` ",colour=randint(0, 0xffffff))
                embed.set_thumbnail(url=guild.icon_url)
                embed.set_footer(text=req_guild.name, icon_url=req_guild.icon_url)
                try:
                  await message.remove_reaction("<:giveaway:853590688818135052>",member)
                  await member.send(embed=embed)
                  return
                except:
                  return   
        embed=discord.Embed(title=f"Since you met all the requirements of the giveaway in {guild.name} you successfully joined the giveaway",description=f"```shell\nAll the best for your victory in the giveaway (:\n``` ",colour=randint(0, 0xffffff))    
        embed.set_thumbnail(url=guild.icon_url)
        try:
          await member.send(embed=embed)
        except:
          return
      else:
        return

    @commands.Cog.listener()
    async def on_message(self,message):
      if message.author.bot:
        return 
      serverId=message.guild.id
      if serverId==None:
        return
      # if serverId!=898957956073263155:
      #   return
      author_id=message.author.id  
      times=time.time()
      message_info=message_exp.find_one({"id":serverId,"author_id":author_id})
      if message_info==None:
          message_Doc={
          "id":serverId,
          "author_id":author_id,
          "count":int(1),
          "last_used":times
        }
          message_exp.insert_one(message_Doc)
      else:
        if (times-message_info["last_used"])>60:
           message_exp.update_one({'id': serverId,"author_id":author_id}, {
                    '$set': {"last_used":times},"$inc":{"count":+1}})
        
        

def setup(bot):
    bot.add_cog(Giveaway(bot))
    print(f'Giveaway was loaded!')
