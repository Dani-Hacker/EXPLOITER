from discord.ext import commands
import discord
import random
import requests
from mongodbs import *
import asyncio
from discord.ext.commands import cooldown, BucketType
from random import randint
global p_t1, p_t2, p_t3, train_pot, p_t1, p_t2, p_t3
m_t1 = 2
m_t2 = 8
m_t3 = 24  # might of t1,t2,t3
p_t1 = 1
p_t2 = 8
p_t3 = 20  # training potions of t1,t2,t3


class Games(commands.Cog, name='games'):

    def __init__(self, bot):
        self.bot = bot

    def cog_load(self):
        print("Games was loaded")

    def cog_unload(self):
        print(f'Games was unloaded')

    @staticmethod
    def might(t1, t2, t3):
        return (t1*m_t1+t2*m_t2+t3*m_t3)

    @commands.command(aliases=['str', 'st'])
    @commands.guild_only()
    @commands.cooldown(1, 25, commands.BucketType.user)
    async def start(self, ctx: commands.Context):
        ''' Use this command to start using the bot'''
        serverId = ctx.message.guild.id
        allowed = True
        if(allowed == True):
            # checks user already started the game
            if user_info.find_one({'id': ctx.author.id}):
                await ctx.reply('You have already started! For more commands use `?help`')
            else:       # if user hasn't started, adds the user to db
                userDoc = {
                    'id': int(ctx.author.id),
                    'name': str(ctx.author),
                    'might': 0,
                    't1': 0,
                    't2': 0,
                    't3': 0,
                    'potions': 0
                }
                user_info.insert_one(userDoc)
                await ctx.reply(f"Hello! Welcome {ctx.author}!. You can start using our bot!. For more info use ``?help``")

    @commands.command(aliases=['tr_c', 't_c'])
    @commands.guild_only()
    @commands.cooldown(1, 5, commands.BucketType.user)
    async def train_cost(self, ctx):
        serverId = ctx.message.guild.id
        allowed = True
        if(allowed == True):
            if user_info.find_one({'id': ctx.author.id}) == None:
                await ctx.send('Please start using `?start`!')
                return
            else:
                em = discord.Embed(
                    title="Training Cost and might", description="Used to see the cost and might of each tier troops", colour=randint(0, 0xffffff))
                em.add_field(
                    name="Tier1:", value="Might: ``2``               Cost: ``1``", inline=False)
                em.add_field(
                    name="Tier2:", value="Might: ``8``               Cost: ``8``", inline=False)
                em.add_field(
                    name="Tier3:", value="Might: ``24``               Cost: ``20``", inline=False)
                await ctx.send(embed=em)

    @commands.command(aliases=['p', 'pr'])  # Profile of a player
    @commands.guild_only()
    @commands.cooldown(1, 10, commands.BucketType.user)
    async def profile(self, ctx: commands.Context, enemy: discord.Member = None):
        ''' Displays might, name, avatar'''
        serverId = ctx.message.guild.id
        allowed = True
        if(allowed == True):
            if user_info.find_one({'id': ctx.author.id}) == None:
                await ctx.send('Please start using `?start`!')
                return
            else:
                if user_info.find_one({'id': ctx.author.id}) == None:
                    await ctx.send('Please start using `?start`!')
                if(enemy == None):
                    embedobj = discord.Embed(
                        title=ctx.author
                    )
                    embedobj.set_thumbnail(url=ctx.author.avatar_url)
                    get_data = user_info.find_one({'id': ctx.author.id})
                    filtr = {'id': ctx.author.id}
                    update_data = user_info.find_one_and_update
                    mighter = self.might(
                        get_data['t1'], get_data['t2'], get_data['t3'])
                    update_data(filtr, {'$set': {'might': mighter}})
                    embedobj.add_field(name='Might', value=user_info.find_one(
                        {'id': ctx.author.id})['might'])
                    embedobj.add_field(name='Tier 1', value=user_info.find_one(
                        {'id': ctx.author.id})['t1'])
                    embedobj.add_field(name='Tier 2', value=user_info.find_one(
                        {'id': ctx.author.id})['t2'])
                    embedobj.add_field(name='Tier 3', value=user_info.find_one(
                        {'id': ctx.author.id})['t3'])
                    embedobj.add_field(name='Training potions', value=user_info.find_one(
                        {'id': ctx.author.id})['potions'])
                    total_troops = get_data['t1']+get_data['t2']+get_data['t3']
                    embedobj.add_field(name='Total troops', value=total_troops)
                    try:
                        await ctx.author.send(embed=embedobj)
                    except Exception as error:
                        await ctx.send(embed=embedobj)

                elif(user_info.find_one({'id': enemy.id})):
                    embedobj = discord.Embed(title=enemy)
                    embedobj.set_thumbnail(url=enemy.avatar_url)
                    get_data_enemy = user_info.find_one({'id': enemy.id})
                    filtr_enemy = {'id': enemy.id}
                    update_enemy_data = user_info.find_one_and_update
                    enemy_mighter = self.might(
                        get_data_enemy['t1'], get_data_enemy['t2'], get_data_enemy['t3'])
                    update_enemy_data(
                        filtr_enemy, {'$set': {'might': enemy_mighter}})
                    embedobj.add_field(name='Might', value=user_info.find_one(
                        {'id': enemy.id})['might'])
                    await ctx.reply(embed=embedobj)
                elif(user_info.find_one({'id': enemy.id}) == None):
                    await ctx.send("The players hasn't started the game yet!")
                else:
                    await ctx.send("It's a bug try using correct command")

    @commands.command(aliases=['pot_c', 'p_c'])
    @commands.guild_only()
    @commands.cooldown(1, 10, commands.BucketType.user)
    async def potion(self, ctx: commands.Context):
        ''' Sends the potion count in dm '''
        serverId = ctx.message.guild.id
        allowed = True
        if(allowed == True):
            if user_info.find_one({'id': ctx.author.id}) == None:
                await ctx.reply('Please start using `?start`!')
                return
            else:
                try:
                    await ctx.author.send("You currently have "+str(user_info.find_one({'id': ctx.author.id})['potions'])+" training potions")
                except Exception as error:
                    await ctx.channel.send("You currently have "+str(user_info.find_one({'id': ctx.author.id})['potions'])+" training potions")

    @commands.command(aliases=['b'])  # Easier, low-prize training potions
    @commands.guild_only()
    @commands.cooldown(1, 20, commands.BucketType.user)
    async def beg(self, ctx: commands.Context):
        ''' Gives low potion (high probability)'''
        serverId = ctx.message.guild.id
        allowed = True
        if(allowed == True):
            if user_info.find_one({'id': ctx.author.id}) == None:
                await ctx.send('Please start using `?start`!')
                return
            else:
                if(user_info.find_one({'id': ctx.author.id})):
                    trmp = random.randint(1, 2)
                    if(trmp == 1):
                        await ctx.reply("You got 0 training potions")
                    else:
                        # x is potions obtained in beg
                        x = random.randint(0, 1000)
                        user_info.update_one({'id': ctx.author.id}, {
                            '$inc': {'potions': +x}})
                        await ctx.reply(f"Congratulations you got {x} training potions")
                else:
                    await ctx.send("It\'s a bug try using correct command")

    # Harder, high-prize training potions
    @commands.command(aliases=['res', 'r'])
    @commands.guild_only()
    @commands.cooldown(1, 30, commands.BucketType.user)
    async def resources(self, ctx: commands.Context):
        ''' Get high potions(less probability)'''
        serverId = ctx.message.guild.id
        allowed = True
        if(allowed == True):
            if user_info.find_one({'id': ctx.author.id}) == None:
                await ctx.send('Please start using `?start`!')
                return
            else:
                if(user_info.find_one({'id': ctx.author.id})):
                    trmp = random.randint(1, 3)
                    if(trmp == 2):
                        # x is potions obtained in resources
                        x = random.randint(15, 1000)*10
                        user_info.update_one({'id': ctx.author.id}, {
                            '$inc': {'potions': +x}})
                        await ctx.reply(f"Congratulations you got {x} training potions")
                    else:
                        await ctx.reply("You got 0 training potions")
                else:
                    await ctx.send("It\'s a bug try using correct command")

    @commands.command(aliases=['t', 'tr'])  # Training the soldiers
    @commands.guild_only()
    @commands.cooldown(1, 5, commands.BucketType.user)
    # tier -  troop tier to train, Amount - No. of troops to train
    async def train(self, ctx: commands.Context, tier: int = None, amount: int = None):
        ''' Used to train troops `?train <tier> <troops_amount>` Eg: ||?train 3 100||'''
        serverId = ctx.message.guild.id
        allowed = True
        if(allowed == True):
            if user_info.find_one({'id': ctx.author.id}) == None:
                await ctx.send('Please start using `?start`!')
                return
            else:
                try:
                    result = {}
                    if(tier == None or amount == None):
                        await ctx.send(f"{ctx.author.mention} Give the argument correctly like `?train <tier> <troops_amount>`")
                    elif(user_info.find_one({'id': ctx.author.id})):
                        get_data = user_info.find_one({'id': ctx.author.id})
                        update_data = user_info.find_one_and_update
                        filtr = {'id': ctx.author.id}
                        troop_count = amount
                        train_pot = get_data['potions']
                        tier = tier
                        t1 = get_data['t1']
                        t2 = get_data['t2']
                        t3 = get_data['t3']

                        if(tier == 1):
                            if(troop_count*p_t1 > train_pot):
                                await ctx.send(f"{ctx.author.mention} Not enough training potions. Type``?train_cost`` for information")
                                return
                            else:
                                train_pot = train_pot-troop_count*p_t1  # if yes train the tier 1 troops
                                t1 += troop_count
                                result = {
                                    'training_train_pot': train_pot,
                                    'tier1': t1,
                                    'tier2': t2,
                                    'tier3': t3
                                }
                        elif(tier == 2):
                            # checks whether we have enough training costs for training t2
                            if(troop_count*p_t2 > train_pot):
                                await ctx.send(f"{ctx.author.mention} Not enough training potions. Type``?train_cost`` for information")
                                return
                            else:  # if yes train the tier 2 troops
                                train_pot = train_pot-troop_count*p_t2
                                t2 += troop_count
                                result = {
                                    'training_train_pot': train_pot,
                                    'tier1': t1,
                                    'tier2': t2,
                                    'tier3': t3
                                }

                        elif(tier == 3):  # checks whether we have enough training costs for training t3
                            if(troop_count*p_t3 > train_pot):
                                await ctx.send(f"{ctx.author.mention} Not enough training potions. Type``?train_cost`` for information")
                                return
                            else:  # if yes train the tier 3 troops
                                train_pot = train_pot-troop_count*p_t3
                                t3 += troop_count
                                result = {
                                    'training_train_pot': train_pot,
                                    'tier1': t1,
                                    'tier2': t2,
                                    'tier3': t3
                                }

                        else:
                            # if we gave invalid tier print no such tier exist
                            await ctx.send(f"{ctx.author.mention} No such tier troops exist. Tiers available from 1-3")
                            return
                        update_data(filtr, {'$set': {
                            't1': result['tier1'], 't2': result['tier2'], 't3': result['tier3'], 'potions': result['training_train_pot']}})
                        await ctx.send(f"{ctx.author.mention}You have successfully trained {amount} tier {tier} troops")
                    else:
                        await ctx.send("Give the argument correctly like `?train <tier> <troops_amount>`")
                except:
                    await ctx.send(f"(ctx.author.mention) use commands correctly. Type `?help train` for more information")

    @commands.command(aliases=['sct', 's'])  # Scouting the player
    @commands.guild_only()
    @commands.cooldown(1, 4, commands.BucketType.user)
    async def scout(self, ctx: commands.Context, enemy: discord.Member = None):
        ''' Used to scout enemy `?scout <enemy?` Eg: ||?scout @kingdomfight||'''
        serverId = ctx.message.guild.id
        allowed = True
        if(allowed == True):
            if user_info.find_one({'id': ctx.author.id}) == None:
                await ctx.send('Please start using `?start`!')
                return
            else:
                if(enemy == None):
                    await ctx.send('Tag someone to scout!')
                elif user_info.find_one({'id': ctx.author.id}) == None:
                    await ctx.send('Please start using `?start`!')
                elif user_info.find_one({'id': enemy.id}) == None:
                    await ctx.send('Player you scouted hasn\'t started using the bot')
                elif(enemy == ctx.author):
                    await ctx.reply("You can't scout yourself")
                elif(user_info.find_one({'id': enemy.id})):
                    fltr = {'id': enemy.id}
                    data = user_info.find_one(fltr)
                    em = discord.Embed(title=f'{enemy}\'s Scout Report!')
                    em.add_field(name='Tier 1', value=data['t1'])
                    em.add_field(name='Tier 2', value=data['t2'])
                    em.add_field(name='Tier 3', value=data['t3'])
                    em.add_field(name='Potions', value=data['potions'])
                    total_troops = data['t1']+data['t2']+data['t3']
                    em.add_field(name='Total troops', value=total_troops)
                    await ctx.reply(embed=em)
                    await enemy.send(f"{ctx.author} is scouting your troops")
                else:
                    await ctx.send("Use `?scout <member>`")

    # working

    @commands.command(aliases=['fght', 'fgh'])  # fighting with others
    @commands.guild_only()
    @commands.cooldown(1, 150, commands.BucketType.user)
    async def fight(self, ctx: commands.Context, enemy: discord.Member = None):
        ''' Used to fight enemy `?fight <enemy?` Eg: ||?fight @kingdomfight||'''
        serverId = ctx.message.guild.id
        allowed = True
        if(allowed == True):
            if user_info.find_one({'id': ctx.author.id}) == None:
                await ctx.send('Please start using `?start`!')
                return
            else:
                if(enemy == None):
                    await ctx.send(f'{ctx.author.mention} Tag someone to attack!')
                elif user_info.find_one({'id': ctx.author.id}) == None:
                    await ctx.send(f'{ctx.author.mention} Please start using `?start`!')
                elif user_info.find_one({'id': enemy.id}) == None:
                    await ctx.send(f"{ctx.author.mention} Player you trying to attack hasn't started using the bot")
                elif(enemy == ctx.author):
                    await ctx.reply(f"{ctx.author.mention} You can't attack yourself")
                elif(user_info.find_one({'id': enemy.id})):
                    try:
                        author_filtr = {'id': ctx.author.id}
                        author_get_data = user_info.find_one(author_filtr)
                        update_data = user_info.find_one_and_update
                        enemy_filtr = {'id': enemy.id}
                        enemy_get_data = user_info.find_one(enemy_filtr)
                        t1 = author_get_data['t1']
                        t2 = author_get_data['t2']
                        t3 = author_get_data['t3']
                        train_pot = author_get_data['potions']
                        et1 = enemy_get_data['t1']
                        et2 = enemy_get_data['t2']
                        et3 = enemy_get_data['t3']
                        etrain_pot = enemy_get_data['potions']
                        b = 0
                        eb = 0
                        loss1 = 0
                        loss2 = 0
                        loss3 = 0
                        eloss1 = 0
                        eloss2 = 0
                        eloss3 = 0  # 10,20,20,5,6,32
                        edamage = t1*2+t2*8+t3*24  # edamage=51380
                        damage = et1*2+et2*8+et3*24  # damage=16958
                        if(damage <= edamage):
                            win = True
                            train_pot += int(etrain_pot/5)
                            etrain_pot -= int(etrain_pot/5)
                        else:
                            win = False
                            etrain_pot += int(train_pot/5)
                            train_pot -= int(train_pot/3)
                        if(edamage > damage):
                            damage = damage/8.85
                            edamage = edamage/2.9
                            damage = int(damage)
                            edamage = int(edamage)
                        elif(edamage < damage):
                            edamage = edamage/8.3
                            damage = damage/1.8
                            damage = int(damage)
                            edamage = int(edamage)
                        else:
                            damage = damage/4.2
                            edamage = edamage/4.2
                            damage = int(damage)
                            edamage = int(edamage)
                        d_t1 = (damage/2)
                        d_t1 = int(d_t1)  # d_t1=816
                        if(d_t1 >= t1):
                            loss1 = t1  # loss1=10
                            t1 = 0  # t1(left)=0
                            exdamage1 = damage-loss1*2  # extradamage1=9800
                        else:
                            loss1 = d_t1
                            t1 = (t1-d_t1)
                            exdamage1 = 0
                            ++b
                        if(b == 0):
                            d_t2 = exdamage1/8  # d_t2=245
                            d_t2 = int(d_t2)
                            if(d_t2 >= t2):
                                loss2 = t2  # loss2=20
                                t2 = 0  # t2(left)=0
                                exdamage2 = exdamage1-loss2*8  # extradamage2=9000
                            else:
                                loss2 = d_t2
                                t2 = (t2-d_t2)
                                exdamage2 = 0
                                ++b
                        if(b == 0):
                            d_t3 = exdamage2/24  # d_t3=20
                            d_t3 = int(d_t3)
                            if(d_t3 >= t3):
                                loss3 = t3
                                t3 = 0
                            else:
                                loss3 = d_t3  # loss3=20
                                t3 = (t3-d_t3)  # t3(left)=2

                        ed_t1 = (edamage/2)  # d_t1=816
                        ed_t1 = int(ed_t1)
                        if(ed_t1 >= et1):
                            eloss1 = et1  # loss1=10
                            et1 = 0  # t1(left)=0
                            eexdamage1 = edamage-loss1*2  # extradamage1=9800
                        else:
                            eloss1 = ed_t1
                            et1 = (et1-ed_t1)
                            eexdamage1 = 0
                            ++eb
                        if(eb == 0):
                            ed_t2 = eexdamage1/8  # d_t2=245
                            ed_t2 = int(ed_t2)
                            if(ed_t2 >= et2):
                                eloss2 = et2  # loss2=20
                                et2 = 0  # t2(left)=0
                                eexdamage2 = eexdamage1-eloss2*8  # extradamage2=9000
                            else:
                                eloss2 = ed_t2
                                et2 = (et2-ed_t2)
                                eexdamage2 = 0
                                ++eb
                        if(eb == 0):
                            ed_t3 = eexdamage2/24  # d_t3=20
                            ed_t3 = int(ed_t3)
                            if(ed_t3 >= et3):
                                eloss3 = et3
                                et3 = 0
                            else:
                                eloss3 = ed_t3  # loss3=20
                                et3 = (et3-ed_t3)  # t3(left)=2
                        edamage = eloss1*2+eloss2*8+eloss3*24  # edamage=9920
                        damage = loss1*2+loss2*8+loss3*24  # damage=9900
                        dmg_stats = [damage, edamage, t1, t2, t3,
                                     train_pot, et1, et2, et3, etrain_pot]
                        res = [win, dmg_stats]

                        update_data(author_filtr, {'$set': {
                                    't1': res[1][2], 't2': res[1][3], 't3': res[1][4], 'potions': res[1][5]}})
                        update_data(enemy_filtr, {'$set': {
                                    't1': res[1][6], 't2': res[1][7], 't3': res[1][8], 'potions': res[1][9]}})
                    except:
                        await ctx.send(f"{ctx.author.mention} Give command properly. Type ``?help fight`` for help")
                    if(res[0] == True):
                        await ctx.send(f"{ctx.author.mention} attacked {enemy.mention} and took the leader in chains")
                        await enemy.send(f"{ctx.author.mention} attacked you and took your leader in chains")
                    else:
                        await ctx.send(f"{ctx.author.mention} attacked {enemy.mention} and got defeated. The attacking leader got captured")
                        await enemy.send(f"{ctx.author.mention} attacked you. You won in this battle")
                    tot_might_loss = res[1][0]+res[1][1]
                    await ctx.send(f"Total might loss in this battle is {tot_might_loss}")
                    await enemy.send(f"Total might loss in this battle is {tot_might_loss}")
                else:
                    await ctx.send(f"{ctx.author.mention} Use `?fight <enemy_tag>")


def setup(bot):
    bot.add_cog(Games(bot))
    print(f'Games was loaded!')
