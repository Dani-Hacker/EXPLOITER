# from discord.ext.commands import Bot
from discord.ext.commands import Bot
from discord.ext import commands
import os
import discord
from random import randint
# from db import Database
import keep_alive
import DiscordUtils
from discord_components import *
intents = discord.Intents.all()
intents.members=True
bot = Bot(command_prefix="?", case_insensitive=True,intents=intents)
bot.remove_command("help")
global music
music = DiscordUtils.Music()
DiscordComponents(bot)

@bot.event
async def on_ready():
    await bot.change_presence(status=discord.Status.idle, activity=discord.Game('?help'))
    print(f"Logged in as {bot.user}")
    # db = Database("main.db")
    # await db.autoexecute("CREATE TABLE IF NOT EXISTS giveaway(GuildID	INTEGER,ChannelID	INTEGER,MessageID	INTEGER,Prize	TEXT,EndTime	TEXT, GiveawayID	INTEGER);")


@bot.event
async def on_command_error(ctx, error):
    if isinstance(error, commands.MissingRequiredArgument):
        title_error_one = 'You have not entered anything after the command'
        desc_error_one = 'Use **?help** to see a list of all the commands available'
        embed_var_one = discord.Embed(title=title_error_one,
                                      description=desc_error_one,
                                      colour=randint(0, 0xffffff))
        await ctx.reply(embed=embed_var_one)
    if isinstance(error, commands.MaxConcurrencyReached):
        title_error_four = 'Someone is already playing'
        desc_error_four = 'Please wait until the person currently playing is done with their turn'
        embed_var_four = discord.Embed(title=title_error_four,
                                       description=desc_error_four,
                                       colour=randint(0, 0xffffff))
        await ctx.reply(embed=embed_var_four)
    if isinstance(error,commands.CommandOnCooldown):
        embed = discord.Embed(
              title="**Still on Cooldown!**",
              description=f"Try again in {error.retry_after:.2f}s.",
              colour=randint(0, 0xffffff)
          )    
        await ctx.reply(embed=embed)     

    if isinstance(error, commands.CommandNotFound): 
        return

if __name__ == "__main__":
    try:
        for filename in os.listdir('./cogs'):
          if(filename.endswith('.py')):
            bot.load_extension(f'cogs.{filename[:-3]}')
    except Exception as exc:
        print(exc)

    
keep_alive.keep_alive()
token = os.environ.get("CHECKTOKEN")
bot.run(token)
