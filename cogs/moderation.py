from discord.ext import commands
import discord
import requests
import asyncio
from discord.ext.commands import cooldown, BucketType
from mongodbs import *
import time
from random import randint
from discord.utils import get
from datetime import datetime, timedelta


class Moderations(commands.Cog, name='moderation'):

    def __init__(self, bot):
        self.bot = bot

    def cog_load(self):
        print("Moderation was loaded")

    def cog_unload(self):
        print(f'Moderation was unloaded')

    @commands.command(aliases=["stats", "activity", "messages"])
    @commands.guild_only()
    # @commands.has_permissions(kick_members=True)
    async def check(self, ctx, timeframe=7, channel: discord.TextChannel = None, *, user: discord.Member = None):
        serverId = ctx.message.guild.id
        try:
            timeframe = int(timeframe)
        except:
            await ctx.reply("Only integers are allowed")
            return
        if timeframe > 1968:
            await ctx.reply("Sorry. The maximum of days you can check is 1968.")
        elif timeframe <= 0:
            await ctx.reply("Sorry. The minimum of days you can check is one.")

        else:
            if not channel:
                channel = ctx.channel
            if not user:
                user = ctx.author

            async with ctx.channel.typing():
                msg = await ctx.reply('Calculating...')
                await msg.add_reaction('ðŸ”Ž')

                counter = 0
                async for message in channel.history(limit=5000, after=datetime.today() - timedelta(days=timeframe)):
                    if message.author.id == user.id:
                        counter += 1

                await msg.remove_reaction('ðŸ”Ž', member=message.author)

                if counter >= 5000:
                    await msg.edit(content=f'{user.mention} has sent over 5000 messages in the channel "{channel.mention}" within the last {timeframe} days!')
                else:
                    await msg.edit(content=f'{user.mention} has sent {str(counter)} messages in the channel "{channel.mention}" within the last {timeframe} days.')

    @commands.command()
    @commands.has_permissions(kick_members=True)
    @commands.guild_only()
    @commands.cooldown(1, 5, commands.BucketType.user)
    async def unlock(self, ctx, channel: discord.TextChannel, *args):
        serverId = ctx.message.guild.id
        channel = channel
        mentions = list(args)
        roles = []
        if len(mentions) == 0:
            role = ctx.guild.default_role
            roles.append(role)
        else:
            ids = []
            for i in mentions:
                n = len(i)
                ids.append(int(i[3:n-1]))
            try:
                for j in ids:
                    role = get(ctx.guild.roles, id=j)
                    roles.append(role)
            except:
                await ctx.send("Mention the role correctly")
                return
        overwrites = {
        }
        for i in roles:
            overwrites[i] = discord.PermissionOverwrite(send_messages=True)
        await channel.edit(overwrites=overwrites)
        if ctx.channel != channel:
            await ctx.send(f"{channel.mention} has been unlocked.")
        else:
            await ctx.message.delete()
        embed = discord.Embed(title=f"This channel has been unlocked",
                              description=f"Unocked by {ctx.author.mention}", timestamp=ctx.message.created_at, colour=randint(0, 0xffffff))
        embed.set_footer(text=self.bot.user.name,
                         icon_url=self.bot.user.avatar_url)
        embed.set_thumbnail(url=ctx.message.guild.icon_url)
        embed.set_author(name=ctx.author.name, icon_url=ctx.author.avatar_url)
        await channel.send(embed=embed)

    @commands.command()
    @commands.guild_only()
    @commands.has_permissions(kick_members=True)
    @commands.cooldown(1, 5, commands.BucketType.user)
    async def lock(self, ctx, channel: discord.TextChannel, *args):
        serverId = ctx.message.guild.id
        channel = channel
        mentions = list(args)
        roles = []
        if len(mentions) == 0:
            role = ctx.guild.default_role
            roles.append(role)
        else:
            ids = []
            for i in mentions:
                n = len(i)
                ids.append(int(i[3:n-1]))
            try:
                for j in ids:
                    role = get(ctx.guild.roles, id=j)
                    roles.append(role)
            except:
                await ctx.send("Mention the role correctly")
                return
        overwrites = {
        }
        for i in roles:
            overwrites[i] = discord.PermissionOverwrite(send_messages=False)
        await channel.edit(overwrites=overwrites)
        if ctx.channel != channel:
            await ctx.send(f"I have put {channel.mention} on lockdown.")
        else:
            await ctx.message.delete()
        embed = discord.Embed(title=f"This channel has been locked",
                              description=f"Locked by {ctx.author.mention}", timestamp=ctx.message.created_at, colour=randint(0, 0xffffff))
        embed.set_footer(text=self.bot.user.name,
                         icon_url=self.bot.user.avatar_url)
        embed.set_thumbnail(url=ctx.message.guild.icon_url)
        embed.set_author(name=ctx.author.name, icon_url=ctx.author.avatar_url)
        await channel.send(embed=embed)

    @commands.command(aliases=['clr', 'cl'])
    @commands.guild_only()
    @commands.has_permissions(manage_messages=True)
    @commands.cooldown(1, 5, commands.BucketType.user)
    async def clear(self, ctx: commands.Context, amount=None):
        '''Clears the message Eg: ||?clear 100|| where 100 is no.of msg to deleted or purged'''
        serverId = ctx.message.guild.id
        allowed = True
        if(allowed == True):
            try:
                if amount is None:
                    await ctx.channel.purge(limit=2)
                elif amount == "all":
                    await ctx.channel.purge()
                else:
                    await ctx.channel.purge(limit=int(amount))
            except:
                await ctx.reply("Can't purge remaining messages")

    @commands.command(aliases=['k', 'kck'])
    @commands.guild_only()
    @commands.has_permissions(kick_members=True)
    @commands.cooldown(1, 5, commands.BucketType.user)
    async def kick(self, ctx: commands.Context, member: discord.Member, *, reason="No reason specified"):
        '''Kicks the specified member Eg: ||?kick @Exploiter <reason for kick>|| where @Exploiter is the person to be kicked'''
        serverId = ctx.message.guild.id
        allowed = True
        if(allowed == True):
            try:
                if(member == self.bot.user):
                    await ctx.send(f"{ctx.author.mention} You can't kick me. How dare u tried to kick me with my power!!!")
                    return
                if(member == ctx.author):
                    await ctx.send("You can't kick yourself")
                    return
                if member.top_role < ctx.author.top_role:
                    await ctx.send(f"{member} have been kicked from the server for the reason {reason} by {ctx.author.mention}")
                    await member.kick(reason=reason)
                    try:
                        await member.send(f"You have been kicked from the server {ctx.guild.name} for the reason {reason}.")
                    except:
                        return
                else:
                    await ctx.send(f"You can't kick{member.mention}.They had higher role than you !!!")
            except:
                await ctx.send("Give me proper role !!!")

    @commands.command(aliases=['bn'])
    @commands.guild_only()
    @commands.has_permissions(ban_members=True)
    @commands.cooldown(1, 5, commands.BucketType.user)
    async def ban(self, ctx: commands.Context, member: discord.Member, *, reason="No reason specified"):
        '''Bans the specified member Eg: ||?ban @Exploiter <reason for ban>|| where @Exploiter is the person to be banned'''
        serverId = ctx.message.guild.id
        allowed = True
        if(allowed == True):
            try:
                if(member == self.bot.user):
                    await ctx.send(f"{ctx.author.mention} You can't ban me. How dare u tried to ban me with my power!!!")
                    return
                if(member == ctx.author):
                    await ctx.send("You can't ban yourself")
                    return
                if member.top_role < ctx.author.top_role:
                    await ctx.send(f"{member.name} have been banned from the server for the reason {reason} by {ctx.author.mention}.")
                    await member.ban(reason=reason)
                    try:
                        await member.send(f"You have been banned from the server {ctx.guild.name} for reason {reason}")
                    except:
                        return
                else:
                    await ctx.send(f"You can't ban{member.mention}.They had higher role than you !!!")
            except:
                await ctx.send("Give me proper role !!!")

    @commands.command(aliases=['ub'])
    @commands.guild_only()
    @commands.has_permissions(ban_members=True)
    @commands.cooldown(1, 5, commands.BucketType.user)
    async def unban(self, ctx: commands.Context, *, member):
        '''Unbans the specified member Eg: ||?unban @Exploiter|| where @Exploiter is the id of the person to be unbanned'''
        serverId = ctx.message.guild.id
        allowed = True
        if(allowed == True):
            try:
                if(member == self.bot.user):
                    await ctx.send(f"{ctx.author.mention} I am always unbanned. Don't send jokes here!!!")
                    return
                banned_users = await ctx.guild.bans()
                member_name, member_disc = member.split('#')
                for banned_entry in banned_users:
                    user = banned_entry.user
                    if(user.name, user.discriminator) == (member_name, member_disc):
                        await ctx.guild.unban(user)
                        await ctx.send(member_name + " has been unbanned!")
                        return
                await ctx.send(member+" was not found")
            except:
                await ctx.send("Give me proper role or mention the member properly !!!")

    @commands.command(name="mute", aliases=['m', 'mte'])
    @commands.guild_only()
    @commands.has_permissions(kick_members=True)
    @commands.cooldown(1, 5, commands.BucketType.user)
    async def mute(self, ctx: commands.Context, timer: str, member: discord.Member, *, reason="No reason specified"):
        '''Mutes the specified member Eg: ||?mute @Exploiter <reason for mute>|| where @Exploiter is the person to be muted'''
        serverId = ctx.message.guild.id
        allowed = True
        if(allowed == True):
            muted_role = get(ctx.message.guild.roles, name="Muted")
            if muted_role in member.roles:
                await ctx.send(f"{member.mention} is already muted!!!")
                return
            if user_info.find_one({'id': member.id}) == None:
                x = time.time()
                userDoc = {
                    'id': int(member.id),
                    'name': str(member),
                    'might': 0,
                    't1': 0,
                    't2': 0,
                    't3': 0,
                    'potions': 0
                }
                user_info.insert_one(userDoc)
                await asyncio.sleep(1)
            try:

                if(member == self.bot.user):
                    await ctx.send(f"{ctx.author.mention} You can't mute me. How dare u tried to mute me with my power!!!")
                    return

                if(member == ctx.author):
                    await ctx.send("You can't mute yourself")
                    return
                if member.top_role < ctx.author.top_role:
                    if not member.bot:
                        top = member.top_role
                        try:
                            await member.remove_roles(top)
                            await member.add_roles(top)
                        except Exception as error:
                            await ctx.send(f"{member.mention} had higher role than me!!")
                            return
                    else:
                        await ctx.send("Can not mute bot")
                        return
                    user_info.find_one_and_update(
                        {'id': member.id}, {'$push': {'original_roles': {'$each': [i.id for i in member.roles]}}})
                    user_info.find_one_and_update(
                        {'id': member.id}, {'$set': {'muted_time': time.time()}})
                    guild = ctx.guild
                    muted_role = discord.utils.get(guild.roles, name="Muted")
                    if not muted_role:
                        muted_role = await guild.create_role(name="Muted")
                        for channel in guild.channels:
                            await channel.set_permissions(muted_role, speak=False, send_messages=False, read_message_history=True, read_messages=True)

                    r = member.roles.copy()
                    if muted_role in r:
                        r.remove(muted_role)
                    for r_ in r:
                        try:
                            await member.remove_roles(r_)
                        except:
                            pass
                    await member.add_roles(muted_role, reason=reason)
                    # Muting time in seconds
                    if(timer[-1] == "s"):
                        prefix = "seconds"
                        value = 1
                    elif(timer[-1] == "m"):
                        prefix = "minutes"
                        value = 60
                    elif(timer[-1] == "h"):
                        prefix = "hours"
                        value = 60*60
                    elif(timer[-1] == "d"):
                        prefix = "days"
                        value = 60*60*24
                    n = len(timer)
                    announce_time = timer[0:n-1]
                    announce_time = int(announce_time)
                    mute_time_in_seconds = announce_time*value
                    announce_time = str(announce_time)
                    await ctx.send(member.mention+" has been muted for the reason "+reason + " by "+ctx.author.mention)
                    await member.send(f"You were muted in the server {guild.name} for {announce_time} {prefix} for reason  {reason}")
                    await asyncio.sleep(mute_time_in_seconds)
                else:
                    await ctx.reply(f"Can't mute {member.mention}. They had higher role than you ")
                    return
                muted_role_check = discord.utils.get(
                    member.roles, name="Muted")
                check_var = 0
                if muted_role_check:
                    try:
                        for role_id in user_info.find_one({'id': member.id})['original_roles']:
                            if role_id in [_.id for _ in ctx.guild.roles]:
                                try:
                                    await member.add_roles(ctx.guild.get_role(role_id))
                                    check_var = check_var+1
                                except:
                                    pass
                        if(check_var != 0):
                            await member.send(f"{member.mention} You were unmuted in the server {ctx.guild.name}")
                    except:
                        pass
                    finally:
                        await member.remove_roles(muted_role)
                        user_info.find_one_and_update(
                            {'id': member.id}, {'$pull': {'original_roles': {'$in': [i.id for i in member.roles]}}})
                    if(check_var != 0):
                        await ctx.send(f"{member.mention} has been unmuted!!!")
                elif member.top_role >= ctx.author.top_role:
                    await ctx.send(f"You can't mute{member.mention}.They had higher role than you !!!")
            except Exception as e:
                print(e)
                await ctx.send("Mention a member properly or give me role properly!!!")

    @commands.command(description="Unmute the specified user", aliases=['unmt', 'unm'])
    @commands.guild_only()
    @commands.has_permissions(kick_members=True)
    @commands.cooldown(1, 5, commands.BucketType.user)
    async def unmute(self, ctx: commands.Context, member: discord.Member):
        '''Unmutes the specified member Eg: ||?unmute @Exploiter|| where @Exploiter is the person to be unmuted'''
        serverId = ctx.message.guild.id
        allowed = True
        if(allowed == True):
            muted_role = get(ctx.message.guild.roles, name="Muted")
            if muted_role not in member.roles:
                await ctx.send(f"{member.mention} is already unmuted!!!")
                return
            if user_info.find_one({'id': member.id}) == None:
                await ctx.send(f'{member.mention} is not in muted state')
                return
            try:
                if(member == self.bot.user):
                    await ctx.send(f"{ctx.author.mention} I am always unmuted.Don't send jokes here!!!")
                    return
                if(member == ctx.author):
                    await ctx.send("You can't unmute yourself")
                    return
                if member.top_role <= ctx.author.top_role:
                    muted_role = discord.utils.get(
                        ctx.guild.roles, name="Muted")
                    await member.remove_roles(muted_role)
                    try:
                        check_var1 = 0
                        for role_id in user_info.find_one({'id': member.id})['original_roles']:
                            if role_id in [_.id for _ in ctx.guild.roles]:
                                try:
                                    user_info.find_one_and_update(
                                        {'id': member.id}, {'$pull': {'original_roles': {'$in': [role_id]}}})
                                    await member.add_roles(ctx.guild.get_role(role_id))
                                    check_var1 = check_var1+1
                                except:
                                    pass
                        if(check_var1 != 0):
                            await member.send(f"{member.mention} You were unmuted in the server {ctx.guild.name}")
                            await ctx.send(f"{member.mention} has been unmuted by {ctx.author.mention}")
                        if(check_var1 == 0):
                            await ctx.send(f"{member.mention} is already in unmuted state")
                    except:
                        pass

                else:
                    await ctx.send(f"You can't unmute{member.mention}.They had higher role than you !!!")
            except:
                await ctx.send("The member is not muted or the member is invalid or no such role exists or give me role properly")


def setup(bot):
    # asyncio.sleep(1)
    bot.add_cog(Moderations(bot))
    print(f'Moderation was loaded!')
