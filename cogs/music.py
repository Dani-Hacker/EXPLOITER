from discord.ext import commands
import discord
import asyncio
from discord.ext.commands import cooldown, BucketType
from mongodbs import *
import DiscordUtils
import youtube_dl
global music
music = DiscordUtils.Music()


class Music(commands.Cog, name='music'):
    def __init__(self, bot):
        self.bot = bot

    def cog_load(self):
        print("Music was loaded")

    def cog_unload(self):
        print(f'Music was unloaded')

    @commands.command(aliases=['j', 'jn'])
    @commands.guild_only()
    @commands.cooldown(1, 2, commands.BucketType.user)
    async def join(self, ctx):
        serverId = ctx.message.guild.id
        allowed = True
        try:
            x = list(server_info.find({"id": serverId}))[0]['disabled']
            if "join" in x:
                allowed = False
        except:
            pass
        if(allowed == True):
            if(ctx.author.voice == None):
                await ctx.reply("Join a voice channel first to use the commands")
                return
            try:
                await ctx.author.voice.channel.connect()  # Joins author's voice channel
            except:
                await ctx.reply("Already joined voice channel")

    @commands.command(aliases=['l', 'lve'])
    @commands.guild_only()
    @commands.cooldown(1, 2, commands.BucketType.user)
    async def leave(self, ctx):
        serverId = ctx.message.guild.id
        allowed = True
        try:
            x = list(server_info.find({"id": serverId}))[0]['disabled']
            if "leave" in x:
                allowed = False
        except:
            pass
        if(allowed == True):
            if(ctx.author.voice == None):
                await ctx.reply("Join a voice channel first to use the commands")
                return
            try:
                await ctx.voice_client.disconnect()
            except:
                await ctx.reply("Join a voice channel first to use the commands")

    @commands.command(aliases=['ply'])
    @commands.guild_only()
    @commands.cooldown(1, 5, commands.BucketType.user)
    async def play(self, ctx, *, url):
        try:
            serverId = ctx.message.guild.id
            allowed = True
            try:
                x = list(server_info.find({"id": serverId}))[0]['disabled']
                if "play" in x:
                    allowed = False
            except:
                pass
            if(allowed == True):
                if(ctx.author.voice == None):
                    await ctx.reply("Join a voice channel first to use the commands")
                    return
                player = music.get_player(guild_id=ctx.guild.id)
                if not player:
                    player = music.create_player(
                        ctx, ffmpeg_error_betterfix=True)
                if not ctx.voice_client.is_playing():
                    await player.queue(url, search=True)
                    song = await player.play()
                    await ctx.send(f"Playing {song.name}")
                else:
                    song = await player.queue(url, search=True)
                    await ctx.send(f"Queued {song.name}")
        except:
            await ctx.reply('Try again later!!!')

    @commands.command(aliases=['pse'])
    @commands.guild_only()
    @commands.cooldown(1, 3, commands.BucketType.user)
    async def pause(self, ctx):
        serverId = ctx.message.guild.id
        allowed = True
        try:
            x = list(server_info.find({"id": serverId}))[0]['disabled']
            if "pause" in x:
                allowed = False
        except:
            pass
        if(allowed == True):
            try:
                if(ctx.author.voice == None):
                    await ctx.reply("Join a voice channel first to use the commands")
                    return
                player = music.get_player(guild_id=ctx.guild.id)
                song = await player.pause()
                await ctx.send(f"Paused {song.name}")
            except:
                await ctx.reply('You did not played a song!!!.Use ``?resume`` to resume the song!!!')

    @commands.command(aliases=['rsm'])
    @commands.guild_only()
    @commands.cooldown(1, 3, commands.BucketType.user)
    async def resume(self, ctx):
        serverId = ctx.message.guild.id
        allowed = True
        try:
            x = list(server_info.find({"id": serverId}))[0]['disabled']
            if "resume" in x:
                allowed = False
        except:
            pass
        if(allowed == True):
            try:
                if(ctx.author.voice == None):
                    await ctx.reply("Join a voice channel first to use the commands")
                    return
                player = music.get_player(guild_id=ctx.guild.id)
                song = await player.resume()
                await ctx.send(f"Resumed {song.name}")
            except:
                await ctx.reply('You did not played a song!!!.Use ``?pause`` to pause the song!!!')

    @commands.command(aliases=['stp'])
    @commands.guild_only()
    @commands.cooldown(1, 3, commands.BucketType.user)
    async def stop(self, ctx):
        serverId = ctx.message.guild.id
        allowed = True
        try:
            x = list(server_info.find({"id": serverId}))[0]['disabled']
            if "stop" in x:
                allowed = False
        except:
            pass
        if(allowed == True):
            try:
                if(ctx.author.voice == None):
                    await ctx.reply("Join a voice channel first to use the commands")
                    return
                player = music.get_player(guild_id=ctx.guild.id)
                await player.stop()
                await ctx.send(f"Stopped the playing song")
            except:
                await ctx.reply('Play a song first!!!')

    @commands.command(aliases=['lp'])
    @commands.guild_only()
    @commands.cooldown(1, 2, commands.BucketType.user)
    async def loop(self, ctx):
        serverId = ctx.message.guild.id
        allowed = True
        try:
            x = list(server_info.find({"id": serverId}))[0]['disabled']
            if "loop" in x:
                allowed = False
        except:
            pass
        if(allowed == True):
            try:
                if(ctx.author.voice == None):
                    await ctx.reply("Join a voice channel first to use the commands")
                    return
                player = music.get_player(guild_id=ctx.guild.id)
                song = await player.toggle_song_loop()
                if song.is_looping:
                    await ctx.send(f"Enabled loop for {song.name}")
                else:
                    await ctx.send(f"Disabled loop for {song.name}")
            except:
                await ctx.reply('Play a song first!!!')

    @commands.command(aliases=['que'])
    @commands.guild_only()
    @commands.cooldown(1, 2, commands.BucketType.user)
    async def queue(self, ctx):
        serverId = ctx.message.guild.id
        allowed = True
        try:
            x = list(server_info.find({"id": serverId}))[0]['disabled']
            if "queue" in x:
                allowed = False
        except:
            pass
        if(allowed == True):
            try:
                if(ctx.author.voice == None):
                    await ctx.reply("Join a voice channel first to use the commands")
                    return
                player = music.get_player(guild_id=ctx.guild.id)
                await ctx.send(f"{', '.join([song.name for song in player.current_queue()])}")
            except:
                await ctx.reply('Play a song first!!!')

    @commands.command()
    @commands.guild_only()
    @commands.cooldown(1, 3, commands.BucketType.user)
    async def np(self, ctx):
        serverId = ctx.message.guild.id
        allowed = True
        try:
            x = list(server_info.find({"id": serverId}))[0]['disabled']
            if "np" in x:
                allowed = False
        except:
            pass
        if(allowed == True):
            try:
                if(ctx.author.voice == None):
                    await ctx.reply("Join a voice channel first to use the commands")
                    return
                player = music.get_player(guild_id=ctx.guild.id)
                song = player.now_playing()
                await ctx.send(song.name)
            except:
                await ctx.reply('Not playing any song now!!!')

    @commands.command(aliases=['skp'])
    @commands.guild_only()
    @commands.cooldown(1, 3, commands.BucketType.user)
    async def skip(self, ctx):
        serverId = ctx.message.guild.id
        allowed = True
        try:
            x = list(server_info.find({"id": serverId}))[0]['disabled']
            if "skip" in x:
                allowed = False
        except:
            pass
        if(allowed == True):
            try:
                if(ctx.author.voice == None):
                    await ctx.reply("Join a voice channel first to use the commands")
                    return
                player = music.get_player(guild_id=ctx.guild.id)
                data = await player.skip(force=True)
                if len(data) == 2:
                    await ctx.send(f"Skipped from {data[0].name} to {data[1].name}")
                else:
                    await ctx.send(f"Skipped {data[0].name}")
            except:
                await ctx.reply('No other song in the queue!!!')

    @commands.command(aliases=['vl', 'vol'])
    @commands.guild_only()
    @commands.cooldown(1, 2, commands.BucketType.user)
    async def volume(self, ctx, vol):
        serverId = ctx.message.guild.id
        allowed = True
        try:
            x = list(server_info.find({"id": serverId}))[0]['disabled']
            if "volume" in x:
                allowed = False
        except:
            pass
        if(allowed == True):
            try:
                if(ctx.author.voice == None):
                    await ctx.reply("Join a voice channel first to use the commands")
                    return
                vol = float(vol)
                if(vol < 0 or vol > 200):
                    await ctx.reply("Volume available from ``0 to 200``")
                    return
                player = music.get_player(guild_id=ctx.guild.id)
                # volume should be a float between 0 to 1
                song, volume = await player.change_volume(float(vol) / 100)
                await ctx.send(f"Changed volume for {song.name} to {volume*100}%")
            except:
                await ctx.reply('Play a song first!!!')

    @commands.command(aliases=['rmv'])
    @commands.guild_only()
    @commands.cooldown(1, 3, commands.BucketType.user)
    async def remove(self, ctx, index):
        serverId = ctx.message.guild.id
        allowed = True
        try:
            x = list(server_info.find({"id": serverId}))[0]['disabled']
            if "remove" in x:
                allowed = False
        except:
            pass
        if(allowed == True):
            try:
                if(ctx.author.voice == None):
                    await ctx.reply("Join a voice channel first to use the commands")
                    return
                player = music.get_player(guild_id=ctx.guild.id)
                song = await player.remove_from_queue(int(index))
                await ctx.send(f"Removed {song.name} from queue")
            except:
                await ctx.reply(f'No song is there in the {index} to remove!!!')


def setup(bot):
    bot.add_cog(Music(bot))
    print(f'Music was loaded!')
