from asyncio.windows_events import NULL
from logging import error
from discord import channel, guild
from dotenv import load_dotenv
import discord
from discord.ext import commands
from troops import *
from mongodb import *
import random
import asyncio
import os
import time
import requests

beg = True
load_dotenv()  # take env variable from dot env
TOKEN = os.getenv("TOKEN")


# initialization
bot = commands.Bot(command_prefix="?")
bot.remove_command("help")
# start


@bot.event
async def on_ready():
    await bot.change_presence(status=discord.Status.idle, activity=discord.Game('?help'))
    print(f"Logged in as {bot.user}")
    # bot.load_extension('dch')

# start of game


@bot.command(name="start")
async def start(ctx: commands.Context):
    ''' Use this command to start using the bot'''
    if user_info.find_one({'id': ctx.author.id}):  # checks user already started the game
        await ctx.reply('You have already started! For more commands use `?help`')
    else:       # if user hasn't started, adds the user to db
        x = time.time()
        userDoc = {
            'id': int(ctx.author.id),
            'name': str(ctx.author),
            'might': 0,
            't1': 0,
            't2': 0,
            't3': 0,
            'potions': 0
        }
        time_Doc = {
            'id': int(ctx.author.id), 'beg_time': x, 'resources_time': x, 'fight_time': x, 'scout_time': x, 'profile_time': x, 'potion_time': x, 'train_time': x, 'train_cost_time': x
        }
        user_time_info.insert_one(time_Doc)
        user_info.insert_one(userDoc)
        await ctx.reply(f'Hello! Welcome {ctx.author}!. You can start using our bot in 20 seconds!')


@bot.command(name="train_cost")
@commands.guild_only()
async def train_cost(ctx):
    if user_info.find_one({'id': ctx.author.id}) == None:
        await ctx.send('Please start using `?start`!')
        return
    used = time.time()
    last_used = float(user_time_info.find_one(
        {'id': ctx.author.id})['train_cost_time'])
    if(used - last_used < 20):
        em = discord.Embed(title="You are on cool down!", description='You can use this command in '+str(
            20-int(used - last_used))+" seconds"+"\nDefault cooldown for this command is 20 seconds")
        await ctx.reply(embed=em)
        return
    else:
        last_used = time.time()
        user_time_info.update_one({'id': ctx.author.id}, {
            '$set': {'train_cost_time': last_used}})
        em = discord.Embed(
            title="Training Cost and might", description="Used to see the cost and might of each tier troops", color=ctx.author.color)
        em.add_field(
            name="Tier1:", value="Might: ``2``               Cost: ``1``", inline=False)
        em.add_field(
            name="Tier2:", value="Might: ``8``               Cost: ``8``", inline=False)
        em.add_field(
            name="Tier3:", value="Might: ``24``               Cost: ``20``", inline=False)
        await ctx.send(embed=em)


@bot.command(name="avatar")
async def avatar(ctx, member: discord.Member = None):
    if(member == None):
        await ctx.send(ctx.author.avatar_url)
    else:
        try:
            await ctx.send(member.avatar_url)
        except:
            await ctx.send("Mention someone properly!!!")


@bot.command(name="profile")  # Profile of a player
async def profile(ctx: commands.Context, enemy: discord.Member = None):
    ''' Displays might, name, avatar'''
    if user_info.find_one({'id': ctx.author.id}) == None:
        await ctx.send('Please start using `?start`!')
        return
    used = time.time()
    last_used = float(user_time_info.find_one(
        {'id': ctx.author.id})['profile_time'])
    if(used - last_used < 20):
        em = discord.Embed(title="You are on cool down!", description='You can use this command in '+str(
            20-int(used - last_used))+" seconds"+"\nDefault cooldown for this command is 20 seconds")
        await ctx.reply(embed=em)
        return
    else:
        last_used = time.time()
        user_time_info.update_one({'id': ctx.author.id}, {
            '$set': {'profile_time': last_used}})
        if user_info.find_one({'id': ctx.author.id}) == None:
            await ctx.send('Please start using `?start`!')
        if(enemy == None):
            embedobj = discord.Embed(
                title=ctx.author
            )
            embedobj.set_thumbnail(url=ctx.author.avatar_url)
            get_data = user_info.find_one({'id': ctx.author.id})
            filtr = {'id': ctx.author.id}
            update_data = user_info.find_one_and_update
            mighter = might(get_data['t1'], get_data['t2'], get_data['t3'])
            update_data(filtr, {'$set': {'might': mighter}})
            embedobj.add_field(name='Might', value=user_info.find_one(
                {'id': ctx.author.id})['might'])
            embedobj.add_field(name='Tier 1', value=user_info.find_one(
                {'id': ctx.author.id})['t1'])
            embedobj.add_field(name='Tier 2', value=user_info.find_one(
                {'id': ctx.author.id})['t2'])
            embedobj.add_field(name='Tier 3', value=user_info.find_one(
                {'id': ctx.author.id})['t3'])
            embedobj.add_field(name='Training potions', value=user_info.find_one(
                {'id': ctx.author.id})['potions'])
            total_troops = get_data['t1']+get_data['t2']+get_data['t3']
            embedobj.add_field(name='Total troops', value=total_troops)
            try:
                await ctx.author.send(embed=embedobj)
            except Exception as error:
                await ctx.send(embed=embedobj)

        elif(user_info.find_one({'id': enemy.id})):
            embedobj = discord.Embed(title=enemy)
            embedobj.set_thumbnail(url=enemy.avatar_url)
            get_data_enemy = user_info.find_one({'id': enemy.id})
            filtr_enemy = {'id': enemy.id}
            update_enemy_data = user_info.find_one_and_update
            enemy_mighter = might(
                get_data_enemy['t1'], get_data_enemy['t2'], get_data_enemy['t3'])
            update_enemy_data(filtr_enemy, {'$set': {'might': enemy_mighter}})
            embedobj.add_field(name='Might', value=user_info.find_one(
                {'id': enemy.id})['might'])
            await ctx.reply(embed=embedobj)
        elif(user_info.find_one({'id': enemy.id}) == None):
            await ctx.send("The players hasn't started the game yet!")
        else:
            await ctx.send("It's a bug try using correct command")


@bot.command(name='potion')
async def potion_count(ctx: commands.Context):
    ''' Sends the potion count in dm '''
    if user_info.find_one({'id': ctx.author.id}) == None:
        await ctx.send('Please start using `?start`!')
        return
    used = time.time()
    last_used = float(user_time_info.find_one(
        {'id': ctx.author.id})['potion_time'])
    if(used - last_used < 20):
        em = discord.Embed(title="You are on cool down!", description='You can use this command in '+str(
            20-int(used - last_used))+" seconds"+"\nDefault cooldown for this command is 20 seconds")
        await ctx.reply(embed=em)
        return
    else:
        last_used = time.time()
        user_time_info.update_one({'id': ctx.author.id}, {
            '$set': {'potion_time': last_used}})
        if user_info.find_one({'id': ctx.author.id}) == None:
            await ctx.send('Please start using `?start`!')
        try:
            await ctx.author.send("You currently have "+str(user_info.find_one({'id': ctx.author.id})['potions'])+" training potions")
        except Exception as error:
            await ctx.channel.send("You currently have "+str(user_info.find_one({'id': ctx.author.id})['potions'])+" training potions")


@bot.command(name="beg")  # Easier, low-prize training potions
async def beg(ctx: commands.Context):
    ''' Gives low potion (high probability)'''
    if user_info.find_one({'id': ctx.author.id}) == None:
        await ctx.send('Please start using `?start`!')
        return
    used = time.time()
    last_used = float(user_time_info.find_one(
        {'id': ctx.author.id})['beg_time'])
    if(used - last_used < 20):
        em = discord.Embed(title="You are on cool down!", description='You can use this command in '+str(
            20-int(used - last_used))+" seconds"+"\nDefault cooldown for this command is 20 seconds")
        await ctx.reply(embed=em)
        return
    else:
        last_used = time.time()
        user_time_info.update_one({'id': ctx.author.id}, {
            '$set': {'beg_time': last_used}})
        if user_info.find_one({'id': ctx.author.id}) == None:
            await ctx.send('Please start using `?start`!')
        elif(user_info.find_one({'id': ctx.author.id})):
            last = time.time()
            user_time_info.update_one({'id': ctx.author.id}, {
                '$set': {'beg_time': last}})

            trmp = random.randint(1, 2)
            if(trmp == 1):
                await ctx.reply("You got 0 training potions")
            else:
                x = random.randint(0, 1000)  # x is potions obtained in beg
                user_info.update_one({'id': ctx.author.id}, {
                    '$inc': {'potions': +x}})
                await ctx.reply(f"Congratulations you got {x} training potions")
        else:
            await ctx.send("It\'s a bug try using correct command")


@bot.command(name="resources")  # Harder, high-prize training potions
@commands.guild_only()
async def beg(ctx: commands.Context):
    ''' Get high potions(less probability)'''
    if user_info.find_one({'id': ctx.author.id}) == None:
        await ctx.send('Please start using `?start`!')
        return
    used = time.time()
    last_used = float(user_time_info.find_one(
        {'id': ctx.author.id})['resources_time'])
    if(used - last_used < 20):
        em = discord.Embed(title="You are on cool down!", description='You can use this command in '+str(
            20-int(used - last_used))+" seconds"+"\nDefault cooldown for this command is 20 seconds")
        await ctx.reply(embed=em)
        return
    else:
        last_used = time.time()
        user_time_info.update_one({'id': ctx.author.id}, {
            '$set': {'resources_time': last_used}})
        if user_info.find_one({'id': ctx.author.id}) == None:
            await ctx.send('Please start using `?start`!')
        elif(user_info.find_one({'id': ctx.author.id})):
            trmp = random.randint(1, 3)
            if(trmp == 2):
                # x is potions obtained in resources
                x = random.randint(15, 1000)*10
                user_info.update_one({'id': ctx.author.id}, {
                    '$inc': {'potions': +x}})
                await ctx.reply(f"Congratulations you got {x} training potions")
            else:
                await ctx.reply("You got 0 training potions")
        else:
            await ctx.send("It\'s a bug try using correct command")


@bot.command(name="train")  # Training the soldiers
@commands.guild_only()
# tier -  troop tier to train, Amount - No. of troops to train
async def training(ctx: commands.Context, tier: int = None, amount: int = None):
    ''' Used to train troops `?train <tier> <troops_amount>` Eg: ||?train 3 100||'''
    if user_info.find_one({'id': ctx.author.id}) == None:
        await ctx.send('Please start using `?start`!')
        return
    used = time.time()
    last_used = float(user_time_info.find_one(
        {'id': ctx.author.id})['train_time'])
    if(used - last_used < 20):
        em = discord.Embed(title="You are on cool down!", description='You can use this command in '+str(
            20-int(used - last_used))+" seconds"+"\nDefault cooldown for this command is 20 seconds")
        await ctx.reply(embed=em)
        return
    else:
        last_used = time.time()
        user_time_info.update_one({'id': ctx.author.id}, {
            '$set': {'train_time': last_used}})
        try:
            result = {}
            if(tier == None or amount == None):
                await ctx.send(f"{ctx.author.mention} Give the argument correctly like `?train <tier> <troops_amount>`")
            elif(user_info.find_one({'id': ctx.author.id})):
                if user_info.find_one({'id': ctx.author.id}) == None:
                    await ctx.send(f"{ctx.author.mention}Please start using `?start`!")
                    return
                get_data = user_info.find_one({'id': ctx.author.id})
                update_data = user_info.find_one_and_update
                filtr = {'id': ctx.author.id}
                troop_count = amount
                train_pot = get_data['potions']
                tier = tier
                t1 = get_data['t1']
                t2 = get_data['t2']
                t3 = get_data['t3']

                if(tier == 1):
                    if(troop_count*p_t1 > train_pot):
                        await ctx.send(f"{ctx.author.mention} Not enough training potions. Type``?train_cost`` for information")
                        return
                    else:
                        train_pot = train_pot-troop_count*p_t1  # if yes train the tier 1 troops
                        t1 += troop_count
                        result = {
                            'training_train_pot': train_pot,
                            'tier1': t1,
                            'tier2': t2,
                            'tier3': t3
                        }
                elif(tier == 2):
                    # checks whether we have enough training costs for training t2
                    if(troop_count*p_t2 > train_pot):
                        await ctx.send(f"{ctx.author.mention} Not enough training potions. Type``?train_cost`` for information")
                        return
                    else:  # if yes train the tier 2 troops
                        train_pot = train_pot-troop_count*p_t2
                        t2 += troop_count
                        result = {
                            'training_train_pot': train_pot,
                            'tier1': t1,
                            'tier2': t2,
                            'tier3': t3
                        }

                elif(tier == 3):  # checks whether we have enough training costs for training t3
                    if(troop_count*p_t3 > train_pot):
                        await ctx.send(f"{ctx.author.mention} Not enough training potions. Type``?train_cost`` for information")
                        return
                    else:  # if yes train the tier 3 troops
                        train_pot = train_pot-troop_count*p_t3
                        t3 += troop_count
                        result = {
                            'training_train_pot': train_pot,
                            'tier1': t1,
                            'tier2': t2,
                            'tier3': t3
                        }

                else:
                    # if we gave invalid tier print no such tier exist
                    await ctx.send(f"{ctx.author.mention} No such tier troops exist. Tiers available from 1-3")
                    return
                update_data(filtr, {'$set': {
                    't1': result['tier1'], 't2': result['tier2'], 't3': result['tier3'], 'potions': result['training_train_pot']}})
                await ctx.send(f"{ctx.author.mention}You have successfully trained {amount} tier {tier} troops")
            elif(user_info.find_one({'id': ctx.author.id}) == None):
                await ctx.reply('Please start using `?start` command')
            else:
                await ctx.send("Give the argument correctly like `?train <tier> <troops_amount>`")
        except:
            await ctx.send(f"(ctx.author.mention) use commands correctly. Type `?help train` for more information")


@bot.command(name="scout")  # Scouting the player
@commands.guild_only()
async def scout(ctx: commands.Context, enemy: discord.Member = None):
    ''' Used to scout enemy `?scout <enemy?` Eg: ||?scout @kingdomfight||'''
    if user_info.find_one({'id': ctx.author.id}) == None:
        await ctx.send('Please start using `?start`!')
        return
    used = time.time()
    last_used = float(user_time_info.find_one(
        {'id': ctx.author.id})['scout_time'])
    if(used - last_used < 45):
        em = discord.Embed(title="You are on cool down!", description='You can use this command in '+str(
            45-int(used - last_used))+" seconds"+"\nDefault cooldown for this command is 45 seconds")
        await ctx.reply(embed=em)
        return
    else:
        last_used = time.time()
        user_time_info.update_one({'id': ctx.author.id}, {
            '$set': {'scout_time': last_used}})
        if(enemy == None):
            await ctx.send('Tag someone to scout!')
        elif user_info.find_one({'id': ctx.author.id}) == None:
            await ctx.send('Please start using `?start`!')
        elif user_info.find_one({'id': enemy.id}) == None:
            await ctx.send('Player you scouted hasn\'t started using the bot')
        elif(enemy == ctx.author):
            await ctx.reply("You can't scout yourself")
        elif(user_info.find_one({'id': enemy.id})):
            fltr = {'id': enemy.id}
            data = user_info.find_one(fltr)
            em = discord.Embed(title=f'{enemy}\'s Scout Report!')
            em.add_field(name='Tier 1', value=data['t1'])
            em.add_field(name='Tier 2', value=data['t2'])
            em.add_field(name='Tier 3', value=data['t3'])
            em.add_field(name='Potions', value=data['potions'])
            total_troops = data['t1']+data['t2']+data['t3']
            em.add_field(name='Total troops', value=total_troops)
            await ctx.reply(embed=em)
            await enemy.send(f"{ctx.author} is scouting your troops")
        else:
            await ctx.send("Use `?scout <member>`")


# working


@bot.command(name='fight')  # fighting with others
@commands.guild_only()
async def fighting(ctx: commands.Context, enemy: discord.Member = None):
    ''' Used to fight enemy `?fight <enemy?` Eg: ||?fight @kingdomfight||'''
    if user_info.find_one({'id': ctx.author.id}) == None:
        await ctx.send('Please start using `?start`!')
        return
    used = time.time()
    last_used = float(user_time_info.find_one(
        {'id': ctx.author.id})['fight_time'])
    if(used - last_used < 300):
        em = discord.Embed(title="You are on cool down!", description='You can use this command in '+str(
            300-int(used - last_used))+" seconds"+"\nDefault cooldown for this command is 5 minutes")
        await ctx.reply(embed=em)
        return
    else:
        last_used = time.time()
        user_time_info.update_one({'id': ctx.author.id}, {
            '$set': {'fight_time': last_used}})
        if(enemy == None):
            await ctx.send(f'{ctx.author.mention} Tag someone to attack!')
        elif user_info.find_one({'id': ctx.author.id}) == None:
            await ctx.send(f'{ctx.author.mention} Please start using `?start`!')
        elif user_info.find_one({'id': enemy.id}) == None:
            await ctx.send(f"{ctx.author.mention} Player you trying to attack hasn't started using the bot")
        elif(enemy == ctx.author):
            await ctx.reply(f"{ctx.author.mention} You can't attack yourself")
        elif(user_info.find_one({'id': enemy.id})):
            try:
                author_filtr = {'id': ctx.author.id}
                author_get_data = user_info.find_one(author_filtr)
                update_data = user_info.find_one_and_update
                enemy_filtr = {'id': enemy.id}
                enemy_get_data = user_info.find_one(enemy_filtr)
                t1 = author_get_data['t1']
                t2 = author_get_data['t2']
                t3 = author_get_data['t3']
                train_pot = author_get_data['potions']
                et1 = enemy_get_data['t1']
                et2 = enemy_get_data['t2']
                et3 = enemy_get_data['t3']
                etrain_pot = enemy_get_data['potions']
                b = 0
                eb = 0
                loss1 = 0
                loss2 = 0
                loss3 = 0
                eloss1 = 0
                eloss2 = 0
                eloss3 = 0  # 10,20,20,5,6,32
                edamage = t1*2+t2*8+t3*24  # edamage=51380
                damage = et1*2+et2*8+et3*24  # damage=16958
                if(damage <= edamage):
                    win = True
                    train_pot += int(etrain_pot/5)
                    etrain_pot -= int(etrain_pot/5)
                else:
                    win = False
                    etrain_pot += int(train_pot/5)
                    train_pot -= int(train_pot/3)
                if(edamage > damage):
                    damage = damage/8.85
                    edamage = edamage/2.9
                    damage = int(damage)
                    edamage = int(edamage)
                elif(edamage < damage):
                    edamage = edamage/8.3
                    damage = damage/1.8
                    damage = int(damage)
                    edamage = int(edamage)
                else:
                    damage = damage/4.2
                    edamage = edamage/4.2
                    damage = int(damage)
                    edamage = int(edamage)
                d_t1 = (damage/2)
                d_t1 = int(d_t1)  # d_t1=816
                if(d_t1 >= t1):
                    loss1 = t1  # loss1=10
                    t1 = 0  # t1(left)=0
                    exdamage1 = damage-loss1*2  # extradamage1=9800
                else:
                    loss1 = d_t1
                    t1 = (t1-d_t1)
                    exdamage1 = 0
                    ++b
                if(b == 0):
                    d_t2 = exdamage1/8  # d_t2=245
                    d_t2 = int(d_t2)
                    if(d_t2 >= t2):
                        loss2 = t2  # loss2=20
                        t2 = 0  # t2(left)=0
                        exdamage2 = exdamage1-loss2*8  # extradamage2=9000
                    else:
                        loss2 = d_t2
                        t2 = (t2-d_t2)
                        exdamage2 = 0
                        ++b
                if(b == 0):
                    d_t3 = exdamage2/24  # d_t3=20
                    d_t3 = int(d_t3)
                    if(d_t3 >= t3):
                        loss3 = t3
                        t3 = 0
                    else:
                        loss3 = d_t3  # loss3=20
                        t3 = (t3-d_t3)  # t3(left)=2

                ed_t1 = (edamage/2)  # d_t1=816
                ed_t1 = int(ed_t1)
                if(ed_t1 >= et1):
                    eloss1 = et1  # loss1=10
                    et1 = 0  # t1(left)=0
                    eexdamage1 = edamage-loss1*2  # extradamage1=9800
                else:
                    eloss1 = ed_t1
                    et1 = (et1-ed_t1)
                    eexdamage1 = 0
                    ++eb
                if(eb == 0):
                    ed_t2 = eexdamage1/8  # d_t2=245
                    ed_t2 = int(ed_t2)
                    if(ed_t2 >= et2):
                        eloss2 = et2  # loss2=20
                        et2 = 0  # t2(left)=0
                        eexdamage2 = eexdamage1-eloss2*8  # extradamage2=9000
                    else:
                        eloss2 = ed_t2
                        et2 = (et2-ed_t2)
                        eexdamage2 = 0
                        ++eb
                if(eb == 0):
                    ed_t3 = eexdamage2/24  # d_t3=20
                    ed_t3 = int(ed_t3)
                    if(ed_t3 >= et3):
                        eloss3 = et3
                        et3 = 0
                    else:
                        eloss3 = ed_t3  # loss3=20
                        et3 = (et3-ed_t3)  # t3(left)=2
                edamage = eloss1*2+eloss2*8+eloss3*24  # edamage=9920
                damage = loss1*2+loss2*8+loss3*24  # damage=9900
                dmg_stats = [damage, edamage, t1, t2, t3,
                             train_pot, et1, et2, et3, etrain_pot]
                res = [win, dmg_stats]

                update_data(author_filtr, {'$set': {
                            't1': res[1][2], 't2': res[1][3], 't3': res[1][4], 'potions': res[1][5]}})
                update_data(enemy_filtr, {'$set': {
                            't1': res[1][6], 't2': res[1][7], 't3': res[1][8], 'potions': res[1][9]}})
            except:
                await ctx.send(f"{ctx.author.mention} Give command properly. Type ``?help fight`` for help")
            if(res[0] == True):
                await ctx.send(f"{ctx.author.mention} attacked {enemy.mention} and took the leader in chains")
                await enemy.send(f"{ctx.author.mention} attacked you and took your leader in chains")
            else:
                await ctx.send(f"{ctx.author.mention} attacked {enemy.mention} and got defeated. The attacking leader got captured")
                await enemy.send(f"{ctx.author.mention} attacked you. You won in this battle")
            tot_might_loss = res[1][0]+res[1][1]
            await ctx.send(f"Total might loss in this battle is {tot_might_loss}")
            await enemy.send(f"Total might loss in this battle is {tot_might_loss}")
        else:
            await ctx.send(f"{ctx.author.mention} Use `?fight <enemy_tag>")


@bot.command(name="close")  # closes the terminal 😁:)
@commands.guild_only()
async def close(ctx):
    '''Used to stop the bot. Only available for developers 😅'''
    if ctx.author.id in [768016269269925911, 811919559086702642, 790790711326277652]:
        await ctx.send(f'{ctx.author.mention}You successfully closed the bot!!!')
        await quit()
    else:
        await ctx.reply('This is only for owners 😎!')


@bot.command(name="invite")  # invite link for the bot
async def invite(ctx):
    '''Gives the invite link of the bot'''
    await ctx.send("http://tiny.cc/EXPLOITER")


@bot.command(name="meme")
@commands.guild_only()
async def meme(ctx):
    '''Post a meme'''
    r = requests.get("https://memes.blademaker.tv/api?lang=en")
    res = r.json()
    title = res["title"]
    ups = res["ups"]
    downs = res["downs"]
    comments = res['score']
    memes = discord.Embed(title=f"{title}")
    memes.set_image(url=res["image"])
    memes.set_footer(text=f"👍 : {ups}   💬 : {comments}")
    await ctx.send(embed=memes)


@bot.command(name="quote")
@commands.guild_only()
async def quote(ctx: commands.context, day: str = None):
    '''``?quote`` to get random quote and ``?quote today`` to get today's quote'''
    if(day == None):
        response = requests.get("https://zenquotes.io/api/random")
        zen = (response.json())
        await ctx.reply(zen[0]['q']+"\n                                          \t\t\t-"+zen[0]['a'])
    elif(day == "today"):
        response = requests.get("https://zenquotes.io/api/today")
        zen = response.json()
        await ctx.reply(zen[0]['q']+"\n                                          \t\t\t-"+zen[0]['a'])
    else:
        await ctx.reply("``?quote`` to get random quote and ``?quote today`` to get today's quote")


@bot.command(name="gstart")
@commands.guild_only()
@commands.has_role("giveaway")
async def gstart(ctx, timer: str, winner: str, *args):
    '''Used to start the giveaway in the current channel Eg:||?gstart 10s 1w dank coins||.Use (s-seconds|m-minutes|h-hour|d-day and w-winners)Giveaways require ``giveaway`` role. Ask the owner to create a role name ``giveaway`` if there is no role'''
    time = convert(timer)
    if time == -1:
        await ctx.send(f"You didn't answer the time with proper unit. Use (s-seconds|m-minutes|h-hour|d-day) next time!")
        return
    elif time == -2:
        await ctx.send(f"The time must be in integer. Please enter the integer")
        return
    if(winner[-1] == "w"):
        n = len(winner)
        y = winner[0:n-1]
        try:
            winners = int(y)
        except ValueError:
            await ctx.send(f"The winner must be in integer. Please enter the integer! Eg: 1w-for 1 winner")
            return
    else:
        y = winner
        try:
            winners = int(y)
        except ValueError:
            await ctx.send(f"The winner must be in integer. Please enter the integer! Eg: 1w-for 1 winner")
            return
    prize = ' '.join(args)
    if(timer[-1] == "s"):
        prefix = "seconds"
    elif(timer[-1] == "m"):
        prefix = "minutes"
    elif(timer[-1] == "h"):
        prefix = "hours"
    elif(timer[-1] == "d"):
        prefix = "days"
    n = len(timer)
    announce_time = timer[0:n-1]
    await ctx.send("The giveaway is starting in this channel now!!!")
    embed = discord.Embed(
        title="Giveaway!", description=f"{prize}", Color=ctx.author.color)
    embed.add_field(name="No of winners", value=winners, inline=False)
    embed.add_field(name="Hosted by: ", value=ctx.author.mention)
    embed.set_footer(text=f"Ends in {announce_time} {prefix} from now!")
    new_embed = discord.Embed(
        title="Giveaway!", description=f"{prize}", Color=ctx.author.color)
    new_embed.add_field(name="No of winners", value=winners, inline=False)
    new_embed.add_field(name="Hosted by: ", value=ctx.author.mention)
    my_msg = await ctx.send(embed=embed)
    winners_announce = ""
    await my_msg.add_reaction("🎉")
    await asyncio.sleep(time)
    new_msg = await ctx.fetch_message(my_msg.id)
    try:
        users = await new_msg.reactions[0].users().flatten()
        users.pop(users.index(bot.user))
        counts = len(users)

        if(winners > counts or winners <= 0):
            await channel.send("Not enough members ")
            return
        winner = random.sample(users, winners)
        for i in winner:
            winners_announce += i.mention + " "
        new_embed.add_field(name="Winner is : ",
                            value=winners_announce, inline=False)
        new_embed.set_footer(text="This giveaway has been ended")
        await new_msg.edit(embed=new_embed)
        await ctx.send(f"Congratulations! {winners_announce} you won {prize}!. Total entries = {counts} entrants ↗️")

    except:
        await ctx.send(f"The Giveaway has been cancelled because of lesser number of participants or someone cancelled the Giveaway")
        embed = discord.Embed(
            title="Giveaway!", description=f"{prize}", Color=ctx.author.color)
        embed.add_field(name="No of winners", value=winners, inline=False)
        embed.add_field(name="Hosted by: ", value=ctx.author.mention)
        embed.set_footer(text=f"Giveaway closed due to less participants!")
        await new_msg.edit(embed=new_embed)


@bot.command(name="gcreate")
@commands.guild_only()
@commands.has_role("giveaway")
async def gcreate(ctx):
    '''Used to start the giveaway in the any channel Eg:||?gcreate #giveaway 10s 1w dank coins||.Use (s-seconds|m-minutes|h-hour|d-day and w-winners)Giveaways require ``giveaway`` role. Ask the owner to create a role name ``giveaway`` if there is no role'''
    await ctx.send("Let's start the giveaway! Answer these questions within 20 seconds")
    questions = ["Which channel should the giveaway be hosted in?",
                 "What should be the duration of the giveaway? (s-seconds|m-minutes|h-hour|d-day)",
                 "Number of winners in the giveaway?",
                 "What is the prize of the giveaway?"]
    answers = []

    def check(m):
        return m.author == ctx.author and m.channel == ctx.channel
    for i in questions:
        await ctx.send(i)
        try:
            msg = await bot.wait_for('message', timeout=20.0, check=check)
        except asyncio.TimeoutError:
            await ctx.send("You didn't answered in time, please answer at next time!")
            return
        else:
            answers.append(msg.content)
    try:
        c_id = int(answers[0][2:-1])
    except:
        await ctx.send(f"You didn't mention a channel correctly.Do it like this {ctx.channel.mention} next time")
        return

    channel = bot.get_channel(c_id)
    time = convert(answers[1])
    if time == -1:
        await ctx.send(f"You didn't answer the time with proper unit. Use (s-seconds|m-minutes|h-hour|d-day) next time!")
        return
    elif time == -2:
        await ctx.send(f"The time must be in integer. Please enter the integer")
        return
    no_winners = answers[2]
    prize = answers[3]
    if(no_winners.isnumeric() == True):
        no_winners = int(no_winners)
    else:
        await channel.send("you gave non-integer values for winners")
        return
    if(answers[1][-1] == "s"):
        prefix = "seconds"
    elif(answers[1][-1] == "m"):
        prefix = "minutes"
    elif(answers[1][-1] == "h"):
        prefix = "hours"
    elif(answers[1][-1] == "d"):
        prefix = "days"
    n = len(answers[1])
    announce_time = answers[1][0:n-1]
    await ctx.send(f"The Giveaway will be in channel {channel.mention} and will last {answers[1]} !")

    embed = discord.Embed(
        title="Giveaway!", description=f"{prize}", Color=ctx.author.color)
    embed.add_field(name="No of winners", value=no_winners, inline=False)
    embed.add_field(name="Hosted by: ", value=ctx.author.mention)
    embed.set_footer(text=f"Ends in {announce_time} {prefix} from now!")

    new_embed = discord.Embed(
        title="Giveaway!", description=f"{prize}", Color=ctx.author.color)
    new_embed.add_field(name="No of winners", value=no_winners, inline=False)
    new_embed.add_field(name="Hosted by: ", value=ctx.author.mention)

    my_msg = await channel.send(embed=embed)
    winners = ""
    await my_msg.add_reaction("🎉")
    await asyncio.sleep(time)
    new_msg = await channel.fetch_message(my_msg.id)
    try:
        users = await new_msg.reactions[0].users().flatten()
        users.pop(users.index(bot.user))
        counts = len(users)

        if(no_winners < counts or no_winners <= 0):
            await channel.send("Not enough members ")
            return
        winner = random.sample(users, no_winners)
        for i in winner:
            winners += i.mention + " "
        new_embed.add_field(name="Winner is : ",
                            value=winners, inline=False)
        new_embed.set_footer(text="This giveaway has been ended")
        await new_msg.edit(embed=new_embed)
        await channel.send(f"Congratulations! {winners} you won {prize}!. Total entries = {counts} entrants ↗️")

    except:
        await channel.send(f"The Giveaway has been cancelled because of lesser number of participants or someone cancelled the Giveaway")
        embed = discord.Embed(
            title="Giveaway!", description=f"{prize}", Color=ctx.author.color)
        embed.add_field(name="No of winners", value=no_winners, inline=False)
        embed.add_field(name="Hosted by: ", value=ctx.author.mention)
        embed.set_footer(text=f"Giveaway closed due to less participants!")
        await new_msg.edit(embed=new_embed)


@bot.command(name="greroll")
@commands.guild_only()
@commands.has_role("giveaway")
async def greroll(ctx, channel: discord.TextChannel, id_: int):
    '''Used to reroll the giveaway in the current channel Eg:||?greroll #channel-id(of the required giveaway) #id of the required giveaway||Giveaways require ``giveaway`` role. Ask the owner to create a role name ``giveaway`` if there is no role. Don't reroll while the giveaway is ongoing'''
    try:
        new_msg = await channel.fetch_message(id_)
    except:
        await ctx.send("The id was entered incorrectly")
        return
    winners = ""
    try:
        winner_lst = str(new_msg.embeds[0].fields[0])
        winner_value = int(winner_lst.split("'")[3])
        host_lst = str(new_msg.embeds[0].fields[1])
        host_value = host_lst.split("'")[3]
        prize = new_msg.embeds[0].description
        users = await new_msg.reactions[0].users().flatten()
        users.pop(users.index(bot.user))
        counts = len(users)
        winner = random.sample(users, winner_value)
        for i in winner:
            winners += i.mention + " "
        new_embed = discord.Embed(
            title="Giveaway!", description=f"{prize}", Color=ctx.author.color)
        new_embed.add_field(name="No of winners",
                            value=winner_value, inline=False)
        new_embed.add_field(name="Hosted by: ", value=host_value, inline=False)
        new_embed.add_field(name="Winner is : ",
                            value=winners, inline=False)
        new_embed.set_footer(text="This giveaway has been ended")
    except:
        await ctx.send("Can not reroll this one!!!")
        return
    try:
        host_lst1 = str(new_msg.embeds[0].fields[2])
        host_value1 = host_lst1.split("'")[3]
        await new_msg.edit(embed=new_embed)
        await channel.send(f"Congratulations! {winners} you won {prize} !. Total entries = {counts} entrants ↗️")
    except:
        await channel.send("Can not reroll while the giveaway is active")


@bot.command(name="gend")
@commands.guild_only()
@commands.has_role("giveaway")
async def gend(ctx, channel: discord.TextChannel, id_: int):
    '''Used to reroll the giveaway in the current channel Eg:||?greroll #channel-id(of the required giveaway) #id of the required giveaway||Giveaways require ``giveaway`` role. Ask the owner to create a role name ``giveaway`` if there is no role. Don't reroll while the giveaway is ongoing'''
    try:
        new_msg = await channel.fetch_message(id_)
    except:
        await ctx.send("The id was entered incorrectly")
        return
    winners = ""
    try:
        winner_lst = str(new_msg.embeds[0].fields[0])
        winner_value = int(winner_lst.split("'")[3])
        host_lst = str(new_msg.embeds[0].fields[1])
        host_value = host_lst.split("'")[3]
        try:
            host_lst1 = str(new_msg.embeds[0].fields[2])
            host_value1 = host_lst1.split("'")[3]
            await channel.send("This giveaway has already ended")
        except:
            prize = new_msg.embeds[0].description
            users = await new_msg.reactions[0].users().flatten()
            users.pop(users.index(bot.user))
            counts = len(users)
            winner = random.sample(users, winner_value)
            for i in winner:
                winners += i.mention + " "
            new_embed = discord.Embed(
                title="Giveaway!", description=f"{prize}", Color=ctx.author.color)
            new_embed.add_field(name="No of winners",
                                value=winner_value, inline=False)
            new_embed.add_field(name="Hosted by: ",
                                value=host_value, inline=False)
            new_embed.add_field(name="Winner is : ",
                                value=winners, inline=False)
            new_embed.set_footer(text="This giveaway has been ended")
            await new_msg.delete()
            await channel.send(embed=new_embed)
            await channel.send(f"Congratulations! {winners} you won {prize} !. Total entries = {counts} entrants ↗️")
    except:
        await channel.send("Can not reroll this one!!!")


@bot.command(aliases=['cl'])
@commands.guild_only()
@commands.has_permissions(manage_messages=True)
async def clear(ctx, amount=2):
    '''Clears the message Eg: ||?clear 100|| where 100 is no.of msg to deleted or purged'''
    try:
        await ctx.channel.purge(limit=amount)
    except:
        await ctx.send("Can't purge that much messages.If it is error check whether you gave meproper role !!!")


@bot.command(aliases=['k'])
@commands.guild_only()
@commands.has_permissions(kick_members=True)
async def kick(ctx, member: discord.Member, *, reason="No reason specified"):
    '''Kicks the specified member Eg: ||?kick @Exploiter <reason for kick>|| where @Exploiter is the person to be kicked'''
    try:
        if(member == bot.user):
            await ctx.send(f"{ctx.author.mention} You can't kick me. How dare u tried to kick me with my power!!!")
            return
        if(member == ctx.author):
            await ctx.send("You can't kick yourself")
            return
        if member.top_role < ctx.author.top_role:
            await ctx.send(f"{member} have been kicked from the server for the reason {reason} by {ctx.author.mention}")
            await member.kick(reason=reason)
            try:
                await member.send(f"You have been kicked from the server {guild.name} for the reason {reason}.")
            except:
                return
        else:
            await ctx.send(f"You can't kick{member.mention}.They had higher role than you !!!")
    except:
        await ctx.send("Give me proper role !!!")


@bot.command(aliases=['b'])
@commands.guild_only()
@commands.has_permissions(ban_members=True)
async def ban(ctx, member: discord.Member, *, reason="No reason specified"):
    '''Bans the specified member Eg: ||?ban @Exploiter <reason for ban>|| where @Exploiter is the person to be banned'''
    try:
        if(member == bot.user):
            await ctx.send(f"{ctx.author.mention} You can't ban me. How dare u tried to ban me with my power!!!")
            return
        if(member == ctx.author):
            await ctx.send("You can't ban yourself")
            return
        if member.top_role < ctx.author.top_role:
            await ctx.send(f"{member.name} have been banned from the server for the reason {reason} by {ctx.author.mention}.")
            await member.ban(reason=reason)
            try:
                await member.send(f"You have been banned from the server {guild.name} for reason {reason}")
            except:
                return
        else:
            await ctx.send(f"You can't ban{member.mention}.They had higher role than you !!!")
    except:
        await ctx.send("Give me proper role !!!")


@bot.command(aliases=['ub'])
@commands.guild_only()
@commands.has_permissions(ban_members=True)
async def unban(ctx, *, member):
    '''Unbans the specified member Eg: ||?unban @Exploiter|| where @Exploiter is the id of the person to be unbanned'''
    try:
        if(member == bot.user):
            await ctx.send(f"{ctx.author.mention} I am always unbanned. Don't send jokes here!!!")
            return
        banned_users = await ctx.guild.bans()
        member_name, member_disc = member.split('#')
        for banned_entry in banned_users:
            user = banned_entry.user
            if(user.name, user.discriminator) == (member_name, member_disc):
                await ctx.guild.unban(user)
                await ctx.send(member_name + " has been unbanned!")
                return
        await ctx.send(member+" was not found")
    except:
        await ctx.send("Give me proper role or mention the member properly !!!")


@bot.command(description="Mute the specified user")
@commands.guild_only()
@commands.has_permissions(kick_members=True)
async def mute(ctx, member: discord.Member, *, reason="No reason specified"):
    '''Mutes the specified member Eg: ||?mute @Exploiter <reason for mute>|| where @Exploiter is the person to be muted'''
    try:
        user_info.find_one_and_update(
            {'id': member.id}, {'$set': {'original_roles': [i.id for i in member.roles]}})
        user_info.find_one_and_update(
                    {'id': member.id}, {'$set': {'muted_time': time.time()}})
        if(member == bot.user):
            await ctx.send(f"{ctx.author.mention} You can't mute me. How dare u tried to mute me with my power!!!")
            return
        if(member == ctx.author):
            await ctx.send("You can't mute yourself")
            return
        if member.top_role < ctx.author.top_role:
            guild = ctx.guild
            muted_role = discord.utils.get(guild.roles, name="Muted")
            if not muted_role:
                muted_role = await guild.create_role(name="Muted")
                for channel in guild.channels:
                    await channel.set_permissions(muted_role, speak=False, send_messages=False, read_message_history=True, read_messages=True)

            await member.add_roles(muted_role, reason=reason)
            await ctx.send(member.mention+" has been muted for the reason "+reason + " by "+ctx.author.mention)
            try:
                await member.send(f"You were muted in the server {guild.name} for reason  {reason}")
            except:
                return
        elif member.top_role >= ctx.author.top_role:
            await ctx.send(f"You can't mute{member.mention}.They had higher role than you !!!")
    except Exception as e:
        await ctx.send("Mention a member properly or give me role properly!!!")


@bot.command(description="Unmute the specified user")
@commands.guild_only()
@commands.has_permissions(kick_members=True)
async def unmute(ctx, member: discord.Member):
    '''Unmutes the specified member Eg: ||?unmute @Exploiter|| where @Exploiter is the person to be unmuted'''
    try:
        if(member == bot.user):
            await ctx.send(f"{ctx.author.mention} I am always unmuted.Don't send jokes here!!!")
            return
        if(member == ctx.author):
            await ctx.send("You can't unmute yourself")
            return
        if member.top_role <= ctx.author.top_role:
            muted_role = discord.utils.get(ctx.guild.roles, name="Muted")
            await member.remove_roles(muted_role)
            await ctx.send(f"{member.mention} has been unmuted by {ctx.author.mention}")
            try:
                await member.send(f"You were unmuted in the server {ctx.guild.name}")
            except:
                return
        else:
            await ctx.send(f"You can't unmute{member.mention}.They had higher role than you !!!")
    except:
        await ctx.send("The member is not muted or the member is invalid or no such role exists or give me role properly")


@bot.group(invoke_without_command=True)
async def help(ctx):
    em = discord.Embed(
        title="Help", description="Use ``?help <command>`` for more information of that command ", color=ctx.author.color)
    em.set_thumbnail(
        url="https://cdn.discordapp.com/avatars/839421874646548530/0c3f5a2ee26def577afe60154cd106cd.webp?size=1024")
    em.add_field(name="Moderation",
                 value="kick,ban,mute,unmute,unban,clear", inline=False)
    em.add_field(name="Giveaway",
                 value="Warning :Need ``giveaway`` role to use.commands:greroll,gend,gstart,gcreate", inline=False)
    em.add_field(
        name="Games", value="start,beg,resources,fight,scout,profile,potion,train,train_cost", inline=False)
    em.add_field(
        name="Others", value="meme,quote,invite,avatar", inline=False)
    em.add_field(name="Developers", value="close", inline=False)
    await ctx.send(embed=em)


@help.command()
async def kick(ctx):
    em = discord.Embed(
        title="Kick", description="Kicks a member from the server", color=ctx.author.color)
    em.set_thumbnail(
        url="https://cdn.discordapp.com/avatars/839421874646548530/0c3f5a2ee26def577afe60154cd106cd.webp?size=1024")
    em.add_field(
        name="Syntax:", value="?kick <member> <reason for kick(optional)>", inline=False)
    em.add_field(name="Example:",
                 value="?kick @Exploiter checking", inline=False)
    await ctx.send(embed=em)


@help.command()
async def ban(ctx):
    em = discord.Embed(
        title="Ban", description="Bans a member from the server", color=ctx.author.color)
    em.set_thumbnail(
        url="https://cdn.discordapp.com/avatars/839421874646548530/0c3f5a2ee26def577afe60154cd106cd.webp?size=1024")
    em.add_field(
        name="Syntax:", value="?ban <member> <reason for ban(optional)>", inline=False)
    em.add_field(name="Example:",
                 value="?ban @Exploiter checking", inline=False)
    await ctx.send(embed=em)


@help.command()
async def mute(ctx):
    em = discord.Embed(
        title="Mute", description="Mutes a member in the server", color=ctx.author.color)
    em.set_thumbnail(
        url="https://cdn.discordapp.com/avatars/839421874646548530/0c3f5a2ee26def577afe60154cd106cd.webp?size=1024")
    em.add_field(
        name="Syntax:", value="?mute <member> <reason for mute(optional)>", inline=False)
    em.add_field(name="Example:",
                 value="?mute @Exploiter checking", inline=False)
    await ctx.send(embed=em)


@help.command()
async def unmute(ctx):
    em = discord.Embed(
        title="Unmute", description="Unmutes a member in the server", color=ctx.author.color)
    em.set_thumbnail(
        url="https://cdn.discordapp.com/avatars/839421874646548530/0c3f5a2ee26def577afe60154cd106cd.webp?size=1024")
    em.add_field(
        name="Syntax:", value="?unmute <member>", inline=False)
    em.add_field(name="Example:",
                 value="?unmute @Exploiter", inline=False)
    await ctx.send(embed=em)


@help.command()
async def unban(ctx):
    em = discord.Embed(
        title="Unban", description="Unbans a member in the server", color=ctx.author.color)
    em.set_thumbnail(
        url="https://cdn.discordapp.com/avatars/839421874646548530/0c3f5a2ee26def577afe60154cd106cd.webp?size=1024")
    em.add_field(
        name="Syntax:", value="?unban <member> ", inline=False)
    em.add_field(name="Example:",
                 value="?unban @Exploiter", inline=False)
    await ctx.send(embed=em)


@help.command()
async def clear(ctx):
    em = discord.Embed(
        title="Clear", description="Clears the n-number of messages in the channel", color=ctx.author.color)
    em.set_thumbnail(
        url="https://cdn.discordapp.com/avatars/839421874646548530/0c3f5a2ee26def577afe60154cd106cd.webp?size=1024")
    em.add_field(
        name="Syntax:", value="?clear <amount of messages to be cleared(optional and default=2)>", inline=False)
    em.add_field(name="Example:",
                 value="?clear 100", inline=False)
    await ctx.send(embed=em)


@help.command()
async def gstart(ctx):
    em = discord.Embed(
        title="Gstart", description="Starts the give away in the current channel", color=ctx.author.color)
    em.set_thumbnail(
        url="https://cdn.discordapp.com/avatars/839421874646548530/0c3f5a2ee26def577afe60154cd106cd.webp?size=1024")
    em.add_field(name="Warning:",
                 value="Need ``giveaway role to use this command``", inline=False)
    em.add_field(
        name="Syntax:", value="?gstart <(time in int)+``s-seconds,m-minutes,h-hours,d-days``> <(number of winners)+``w``> <prize>", inline=False)
    em.add_field(name="Example:",
                 value="?gstart 1m 1w Coins", inline=False)
    await ctx.send(embed=em)


@help.command()
async def gcreate(ctx):
    em = discord.Embed(
        title="Gcreate", description="Starts the give away in the given channel. Once the qns are answered", color=ctx.author.color)
    em.set_thumbnail(
        url="https://cdn.discordapp.com/avatars/839421874646548530/0c3f5a2ee26def577afe60154cd106cd.webp?size=1024")
    em.add_field(name="Warning:",
                 value="Need ``giveaway role to use this command``", inline=False)
    em.add_field(name="Q1 Syntax:",
                 value="<#channel> Eg:``#giveaway``", inline="false")
    em.add_field(name="Q2 Syntax:",
                 value="<(time in int)+``s-seconds,m-minutes,h-hours,d-days``> Eg:``10m``", inline=False)
    em.add_field(name="Q3 Syntax:",
                 value="<Number of winners>. Eg:``2``", inline=False)
    em.add_field(name="Q4 Syntax:",
                 value="<prize of giveaway> Eg:``Coins``", inline=False)
    await ctx.send(embed=em)


@help.command()
async def greroll(ctx):
    em = discord.Embed(
        title="Greroll", description="Reroll the ended giveaway", color=ctx.author.color)
    em.set_thumbnail(
        url="https://cdn.discordapp.com/avatars/839421874646548530/0c3f5a2ee26def577afe60154cd106cd.webp?size=1024")
    em.add_field(name="Warning:",
                 value="Need ``giveaway role to use this command``", inline=False)
    em.add_field(
        name="Syntax:", value="?greroll <#channel-name in which the giveaway ended> <id of the ended giveaway>", inline=False)
    em.add_field(name="Example:",
                 value="?greroll #giveaway 897425147110232094", inline=False)
    await ctx.send(embed=em)


@help.command()
async def gend(ctx):
    em = discord.Embed(
        title="Gend", description="Ends the active giveaway", color=ctx.author.color)
    em.set_thumbnail(
        url="https://cdn.discordapp.com/avatars/839421874646548530/0c3f5a2ee26def577afe60154cd106cd.webp?size=1024")
    em.add_field(name="Warning:",
                 value="Need ``giveaway role to use this command``", inline=False)
    em.add_field(
        name="Syntax:", value="?gend <#channel-name in which the giveaway is going> <id of the active giveaway>", inline=False)
    em.add_field(name="Example:",
                 value="?gendl #giveaway 897425147110232094", inline=False)
    await ctx.send(embed=em)


@help.command()
async def start(ctx):
    em = discord.Embed(
        title="Start", description="Use this command to start playing the games", color=ctx.author.color)
    em.set_thumbnail(
        url="https://cdn.discordapp.com/avatars/839421874646548530/0c3f5a2ee26def577afe60154cd106cd.webp?size=1024")
    em.add_field(name="Command:",
                 value="``?start``", inline=False)
    await ctx.send(embed=em)


@help.command()
async def beg(ctx):
    em = discord.Embed(
        title="Beg", description="Use this command to get training potion(Less amount high probability)", color=ctx.author.color)
    em.set_thumbnail(
        url="https://cdn.discordapp.com/avatars/839421874646548530/0c3f5a2ee26def577afe60154cd106cd.webp?size=1024")
    em.add_field(name="Command:",
                 value="``?beg``", inline=False)
    await ctx.send(embed=em)


@help.command()
async def resources(ctx):
    em = discord.Embed(
        title="Resources", description="Use this command to get training potion(Higher amount less probability)", color=ctx.author.color)
    em.set_thumbnail(
        url="https://cdn.discordapp.com/avatars/839421874646548530/0c3f5a2ee26def577afe60154cd106cd.webp?size=1024")
    em.add_field(name="Command:",
                 value="``?resources``", inline=False)
    await ctx.send(embed=em)


@help.command()
async def fight(ctx):
    em = discord.Embed(
        title="Fight", description="Use this command to attack other players and gain potions", color=ctx.author.color)
    em.set_thumbnail(
        url="https://cdn.discordapp.com/avatars/839421874646548530/0c3f5a2ee26def577afe60154cd106cd.webp?size=1024")
    em.add_field(name="Syntax:",
                 value="?fight <Tag other player>", inline=False)
    em.add_field(name="Example:",
                 value="``?fight @EXPLOITER#6889``", inline=False)
    await ctx.send(embed=em)


@help.command()
async def scout(ctx):
    em = discord.Embed(
        title="Scout", description="Used to scout other players might,potions and troop count", color=ctx.author.color)
    em.set_thumbnail(
        url="https://cdn.discordapp.com/avatars/839421874646548530/0c3f5a2ee26def577afe60154cd106cd.webp?size=1024")
    em.add_field(name="Syntax:",
                 value="?scout <Tag other player>", inline=False)
    em.add_field(name="Example:",
                 value="``?scout @EXPLOITER#6889``", inline=False)
    await ctx.send(embed=em)


@help.command()
async def profile(ctx):
    em = discord.Embed(
        title="Profile", description="Used to see our troops, might and potions count and enemies might", color=ctx.author.color)
    em.set_thumbnail(
        url="https://cdn.discordapp.com/avatars/839421874646548530/0c3f5a2ee26def577afe60154cd106cd.webp?size=1024")
    em.add_field(
        name="Type1:", value="``?profile``- Sends our troops,potion and might total in dm. If it is blocked it will send in the channel", inline=False)
    em.add_field(name="Type2:",
                 value="?profile <Tag others> Eg:``?profile @EXPLOITER#6889``. Sends enemy might", inline=False)
    await ctx.send(embed=em)


@help.command()
async def potion(ctx):
    em = discord.Embed(
        title="Potion", description="Used to see our potion count", color=ctx.author.color)
    em.set_thumbnail(
        url="https://cdn.discordapp.com/avatars/839421874646548530/0c3f5a2ee26def577afe60154cd106cd.webp?size=1024")
    em.add_field(name="Command:",
                 value="``?potion``", inline=False)
    await ctx.send(embed=em)


@help.command()
async def train(ctx):
    em = discord.Embed(
        title="Train", description="Used to train troops from tier 1-3", color=ctx.author.color)
    em.set_thumbnail(
        url="https://cdn.discordapp.com/avatars/839421874646548530/0c3f5a2ee26def577afe60154cd106cd.webp?size=1024")
    em.add_field(name="Syntax:",
                 value="?train <tier> <amount>", inline=False)
    em.add_field(name="Example:", value="``?train 3 1000``")
    await ctx.send(embed=em)


@help.command()
async def train_cost(ctx):
    em = discord.Embed(
        title="Cost and Might of troops", description="Use this command to see the troops might and cost of training", color=ctx.author.color)
    em.set_thumbnail(
        url="https://cdn.discordapp.com/avatars/839421874646548530/0c3f5a2ee26def577afe60154cd106cd.webp?size=1024")
    em.add_field(name="Command:",
                 value="``?train_cost``", inline=False)
    await ctx.send(embed=em)


@help.command()
async def meme(ctx):
    em = discord.Embed(
        title="Meme", description="Sends a random meme", color=ctx.author.color)
    em.set_thumbnail(
        url="https://cdn.discordapp.com/avatars/839421874646548530/0c3f5a2ee26def577afe60154cd106cd.webp?size=1024")
    em.add_field(name="Command:",
                 value="``?meme``", inline=False)
    await ctx.send(embed=em)


@help.command()
async def quote(ctx):
    em = discord.Embed(
        title="Quote", description="Sends the quote randomly and for each day", color=ctx.author.color)
    em.set_thumbnail(
        url="https://cdn.discordapp.com/avatars/839421874646548530/0c3f5a2ee26def577afe60154cd106cd.webp?size=1024")
    em.add_field(name="Type 1:",
                 value="Command: ``?quote`` -Sends a random quote", inline=False)
    em.add_field(name="Type 2:",
                 value="Command: ``?quote today`` -Sends the quote of today", inline=False)
    await ctx.send(embed=em)


@help.command()
async def invite(ctx):
    em = discord.Embed(
        title="Invite", description="Sends the invite link of the bot", color=ctx.author.color)
    em.set_thumbnail(
        url="https://cdn.discordapp.com/avatars/839421874646548530/0c3f5a2ee26def577afe60154cd106cd.webp?size=1024")
    em.add_field(name="Command:",
                 value="``?invite``", inline=False)
    await ctx.send(embed=em)


@help.command()
async def close(ctx):
    em = discord.Embed(
        title="Close", description="Used to close the bot for updates(Only available for developers)", color=ctx.author.color)
    em.set_thumbnail(
        url="https://cdn.discordapp.com/avatars/839421874646548530/0c3f5a2ee26def577afe60154cd106cd.webp?size=1024")
    em.add_field(name="Command:",
                 value="``?close``", inline=False)
    await ctx.send(embed=em)


@help.command()
async def avatar(ctx):
    em = discord.Embed(
        title="Avatar", description="Sends the avatar of required one link", color=ctx.author.color)
    em.set_thumbnail(
        url="https://cdn.discordapp.com/avatars/839421874646548530/0c3f5a2ee26def577afe60154cd106cd.webp?size=1024")
    em.add_field(name="Type 1:",
                 value="Command: ``?avatar`` -Sends our own avatar with link", inline=False)
    em.add_field(name="Type 2:",
                 value="Command: ``?avatar @EXPLOITER#6889`` -Sends the avatar of @EXPLOITER#6889", inline=False)
    await ctx.send(embed=em)

bot.run(TOKEN)
