from discord.ext import commands, tasks
import discord
import requests
from mongodbs import *
import asyncio
from discord.ext.commands import cooldown, BucketType
import random
from discord.utils import get
import time
import datetime
import pytz
import logging


class Giveaway(commands.Cog, name='giveaway'):
    """Commands to control a giveaway."""

    def __init__(self, bot):
        self.bot = bot
        self.determine_winner.start()

    def cog_load(self):
        print("Giveaway was loaded")

    def cog_unload(self):
        self.determine_winner.cancel()
        print(f'Giveaway was unloaded')

    @staticmethod
    def convert(time):
        pos = ["s", "m", "h", "d"]
        time_dict = {"s": 1, "m": 60, "h": 3600, "d": 86400}
        unit = time[-1]
        if unit not in pos:
            return -1
        try:
            val = int(time[:-1])
        except:
            return -2
        return val*time_dict[unit]

    @commands.command(aliases=['go', 'gro'])
    @commands.guild_only()
    @commands.has_permissions(administrator=True)
    @commands.cooldown(1, 3, commands.BucketType.user)
    async def grole(self, ctx, role: discord.Role):
        serverId = ctx.message.guild.id
        allowed = True
        try:
            x = list(server_info.find({"id": serverId}))[0]['disabled']
            if "grole" in x:
                allowed = False
        except:
            pass
        if(allowed == True):
            if server_info.find_one({'id': serverId}):
                server_info.update_one({'id': serverId}, {
                    '$set': {'role': role.name}})
                await ctx.send(f"You fixed {role.name} as giveaway role")
            else:
                server_Doc = {
                    'id': int(serverId), 'role': role.name
                }
                server_info.insert_one(server_Doc)
                await ctx.send(f"You fixed {role.name} as giveaway role")

    @commands.command(aliases=['gcr', 'gc', 'gcrt'])
    @commands.guild_only()
    @commands.cooldown(1, 20, commands.BucketType.user)
    async def gcreate(self, ctx):
        serverId = ctx.message.guild.id
        allowed = True
        try:
            x = list(server_info.find({"id": serverId}))[0]['disabled']
            if "gcreate" in x:
                allowed = False
        except:
            pass
        if(allowed == True):
            try:
                role = str(server_info.find_one(
                    {'id': serverId})['role'])
            except:
                await ctx.send("Ask admin to set a giveaway role by using ``grole`` command!")
                return
            if server_info.find_one({'id': serverId}) == None:
                await ctx.send("Ask admin to set a giveaway role by using ``grole`` command!")
                return
            serverId = ctx.message.guild.id
            role = str(server_info.find_one(
                {'id': serverId})['role'])
            check_role = get(ctx.message.guild.roles, name=role)
            if check_role in ctx.author.roles:
                '''Used to start the giveaway in the any channel Eg:||?gcreate #giveaway 10s 1w dank coins||.Use (s-seconds|m-minutes|h-hour|d-day and w-winners)Giveaways require ``giveaway`` role. Ask the owner to create a role name ``giveaway`` if there is no role'''
                await ctx.send("Let's start the giveaway! Answer these questions within 20 seconds")
                questions = ["Which channel should the giveaway be hosted in?",
                             "What should be the duration of the giveaway? (s-seconds|m-minutes|h-hour|d-day)",
                             "Number of winners in the giveaway?",
                             "What is the prize of the giveaway?"]
                answers = []

                def check(m):
                    return m.author == ctx.author and m.channel == ctx.channel
                for i in questions:
                    await ctx.send(i)
                    try:
                        msg = await self.bot.wait_for('message', timeout=20.0, check=check)
                    except asyncio.TimeoutError:
                        await ctx.send("You didn't answered in time, please answer at next time!")
                        return
                    else:
                        answers.append(msg.content)
                try:
                    c_id = int(answers[0][2:-1])
                except:
                    await ctx.send(f"You didn't mention a channel correctly.Do it like this {ctx.channel.mention} next time")
                    return
                channel = self.bot.get_channel(c_id)
                times = self.convert(answers[1])
                if times == -1:
                    await ctx.send(f"You didn't answer the time with proper unit. Use (s-seconds|m-minutes|h-hour|d-day) next time!")
                    return
                elif times == -2:
                    await ctx.send(f"The time must be in integer. Please enter the integer")
                    return
                no_winners = answers[2]
                prize = answers[3]
                if(no_winners.isnumeric() == True):
                    no_winners = int(no_winners)
                else:
                    await channel.send("you gave non-integer values for winners")
                    return
                if(answers[1][-1] == "s"):
                    prefix = "seconds"
                elif(answers[1][-1] == "m"):
                    prefix = "minutes"
                elif(answers[1][-1] == "h"):
                    prefix = "hours"
                elif(answers[1][-1] == "d"):
                    prefix = "days"
                n = len(answers[1])
                announce_time = answers[1][0:n-1]
                await ctx.send(f"The Giveaway will be in channel {channel.mention} and will last for {answers[1]} !")
                IST = pytz.timezone('Asia/Kolkata')
                endtime = (datetime.datetime.now(IST) +
                           datetime.timedelta(seconds=times))
                y = endtime.strftime('%Y-%m-%d %H:%M:%S')
                y = str(y)
                giveaway = discord.Embed(
                    title="**🎉 GIVEAWAY 🎉**",
                    description=f"**{prize}**",
                    colour=discord.Color.red()
                )
                giveaway.add_field(name="**Hosted By:**",
                                   value=ctx.author.mention, inline=False)
                giveaway.add_field(name="No of winners",
                                   value=f"{no_winners}", inline=False)
                giveaway.add_field(
                    name="Duration:", value=f"{announce_time} {prefix}", inline=False)
                giveaway.add_field(name="Ends at", value=f"{y}", inline=False)
                msg = await channel.send(embed=giveaway)
                reactions = await msg.add_reaction("🎉")
                message_id = msg.id
                giveaway_doc = {
                    'msg_id': message_id,
                    'channel_id': c_id,
                    'endtime': y
                }
                giveaway_info.insert_one(giveaway_doc)
            else:
                await ctx.reply(f"You don't have the required {role} role to use this command!!! ")

    @commands.command(aliases=['gnd', 'ge'])
    @commands.guild_only()
    @commands.cooldown(1, 2, commands.BucketType.user)
    async def gend(self, ctx: commands.Context, channel: discord.TextChannel, id_: int):
        serverId = ctx.message.guild.id
        allowed = True
        try:
            x = list(server_info.find({"id": serverId}))[0]['disabled']
            if "gend" in x:
                allowed = False
        except:
            pass
        if(allowed == True):
            await ctx. message. delete()
            serverId = ctx.message.guild.id
            try:
                role = str(server_info.find_one(
                    {'id': serverId})['role'])
            except:
                await ctx.send("Ask admin to set a giveaway role by using ``grole`` command!")
                return
            if server_info.find_one({'id': serverId}) == None:
                await ctx.send("Ask admin to set a giveaway role by using ``grole`` command!")
                return
            role = str(server_info.find_one(
                {'id': serverId})['role'])
            check_role = get(ctx.message.guild.roles, name=role)
            if check_role in ctx.author.roles:
                try:
                    try:
                        msg = await channel.fetch_message(id_)
                    except:
                        await ctx.send("The id was entered incorrectly")
                        return
                    embed = msg.embeds[0]
                    embed_dict = embed.to_dict()
                    try:
                        if(embed_dict['fields'][3]['name'] == 'Ends at'):
                            prize = embed_dict['description']
                            host = embed_dict['fields'][0]['value']
                            no_winner = int(embed_dict['fields'][1]['value'])
                            duration = embed_dict['fields'][2]['value']
                            ends_at = embed_dict['fields'][3]['value']
                            users = await msg.reactions[0].users().flatten()
                            users.pop(users.index(self.bot.user))
                            counts = len(users)
                            winners = ""
                            if(no_winner <= counts):
                                winner = random.sample(users, no_winner)
                                for j in winner:
                                    winners += j.mention + " "
                            else:
                                winners = "Can't determine winner"
                            new_embed = discord.Embed(
                                title="Giveaway!", description=f"{prize}", color=discord.Color.red())
                            new_embed.add_field(name="Hosted by: ",
                                                value=host, inline=False)
                            new_embed.add_field(name="No of winners",
                                                value=no_winner, inline=False)
                            new_embed.add_field(name="Winner is : ",
                                                value=winners, inline=False)
                            new_embed.add_field(name="Duration : ",
                                                value=duration, inline=False)
                            new_embed.set_footer(
                                text="This giveaway has been ended")
                            await msg.edit(embed=new_embed)
                            if(winners != "Can't determine winner"):
                                await channel.send(f"Congratulations! {winners} you won {prize} !. Total entries = {counts} entrants ↗️")
                            else:
                                await channel.send("This giveaway has been cancelled due to lesser number of participants")
                            giveaway_info.delete_one({"msg_id": id_})
                    except:
                        await ctx.send("This giveaway was not ended")
                except:
                    await ctx.send("This can not be ended!!!")
            else:
                await ctx.send(f"You don't have the required {role} role to use this command!!! ")

    @commands.command(aliases=['gre', 'gr'])
    @commands.guild_only()
    @commands.cooldown(1, 2, commands.BucketType.user)
    async def greroll(self, ctx: commands.Context, channel: discord.TextChannel, id_: int):
        serverId = ctx.message.guild.id
        allowed = True
        try:
            x = list(server_info.find({"id": serverId}))[0]['disabled']
            if "greroll" in x:
                allowed = False
        except:
            pass
        if(allowed == True):
            await ctx. message. delete()
            serverId = ctx.message.guild.id
            try:
                role = str(server_info.find_one(
                    {'id': serverId})['role'])
            except:
                await ctx.send("Ask admin to set a giveaway role by using ``grole`` command!")
                return
            if server_info.find_one({'id': serverId}) == None:
                await ctx.send("Ask admin to set a giveaway role by using ``grole`` command!")
                return
            role = str(server_info.find_one(
                {'id': serverId})['role'])
            check_role = get(ctx.message.guild.roles, name=role)
            if check_role in ctx.author.roles:
                try:
                    try:
                        msg = await channel.fetch_message(id_)
                    except:
                        await ctx.send("The id was entered incorrectly")
                        return
                    embed = msg.embeds[0]
                    embed_dict = embed.to_dict()
                    if(embed_dict['footer']['text'] != "This giveaway has been ended"):
                        await ctx.send("This giveaway has not been ended")
                        return
                    else:
                        prize = embed_dict['description']
                        host = embed_dict['fields'][0]['value']
                        no_winner = int(embed_dict['fields'][1]['value'])
                        duration = embed_dict['fields'][3]['value']
                        users = await msg.reactions[0].users().flatten()
                        users.pop(users.index(self.bot.user))
                        counts = len(users)
                        winners = ""
                        if(no_winner <= counts):
                            winner = random.sample(users, no_winner)
                            for j in winner:
                                winners += j.mention + " "
                        else:
                            winners = "Can't determine winner"
                        new_embed = discord.Embed(
                            title="Giveaway!", description=f"{prize}", color=discord.Color.red())
                        new_embed.add_field(name="Hosted by: ",
                                            value=host, inline=False)
                        new_embed.add_field(name="No of winners",
                                            value=no_winner, inline=False)
                        new_embed.add_field(name="Winner is : ",
                                            value=winners, inline=False)
                        new_embed.add_field(name="Duration : ",
                                            value=duration, inline=False)
                        new_embed.set_footer(
                            text="This giveaway has been ended")
                        await msg.edit(embed=new_embed)
                        if(winners != "Can't determine winner"):
                            await channel.send(f"Congratulations! {winners} you won {prize} !. Total entries = {counts} entrants ↗️")
                        else:
                            await channel.send("This giveaway has been cancelled due to lesser number of participants")
                except:
                    await ctx.send("This can not be rerolled!!!")
            else:
                await ctx.send(f"You don't have the required {role} role to use this command!!! ")

    @tasks.loop(seconds=20)
    async def determine_winner(self):
        IST = pytz.timezone('Asia/Kolkata')
        starttime = (datetime.datetime.now(IST))
        x = starttime.strftime('%Y-%m-%d %H:%M:%S')
        all_records = giveaway_info.find()
        for i in all_records:
            if(x >= i['endtime']):
                winners = ""
                channel_id = i['channel_id']
                message_id = i['msg_id']
                channel = self.bot.get_channel(channel_id)
                msg = await channel.fetch_message(message_id)
                embed = msg.embeds[0]
                embed_dict = embed.to_dict()
                prize = embed_dict['description']
                host = embed_dict['fields'][0]['value']
                no_winner = int(embed_dict['fields'][1]['value'])
                duration = embed_dict['fields'][2]['value']
                users = await msg.reactions[0].users().flatten()
                users.pop(users.index(self.bot.user))
                counts = len(users)
                if(no_winner <= counts):
                    winner = random.sample(users, no_winner)
                    for j in winner:
                        winners += j.mention + " "
                else:
                    winners = "Can't determine winner"
                new_embed = discord.Embed(
                    title="Giveaway!", description=f"{prize}", color=discord.Color.red())
                new_embed.add_field(name="Hosted by: ",
                                    value=host, inline=False)
                new_embed.add_field(name="No of winners",
                                    value=no_winner, inline=False)
                new_embed.add_field(name="Winner is : ",
                                    value=winners, inline=False)
                new_embed.add_field(name="Duration : ",
                                    value=duration, inline=False)
                new_embed.set_footer(text="This giveaway has been ended")
                await msg.edit(embed=new_embed)
                if(winners != "Can't determine winner"):
                    await channel.send(f"Congratulations! {winners} you won {prize} !. Total entries = {counts} entrants ↗️")
                else:
                    await channel.send("This giveaway has been cancelled due to lesser number of participants")
                giveaway_info.delete_one({"msg_id": message_id})

    @determine_winner.before_loop
    async def before_start(self):
        await self.bot.wait_until_ready()

    @commands.command(aliases=['gs', 'gst'])
    @commands.guild_only()
    @commands.cooldown(1, 5, commands.BucketType.user)
    async def gstart(self, ctx: commands.Context, timer: str, winner: str, *args):
        serverId = ctx.message.guild.id
        allowed = True
        try:
            x = list(server_info.find({"id": serverId}))[0]['disabled']
            if "gstart" in x:
                allowed = False
        except:
            pass
        if(allowed == True):
            await ctx. message. delete()
            try:
                role = str(server_info.find_one(
                    {'id': serverId})['role'])
            except:
                await ctx.send("Ask admin to set a giveaway role by using ``grole`` command!")
                return
            if server_info.find_one({'id': serverId})['role'] == None:
                await ctx.send("Ask admin to set a giveaway role by using ``grole`` command!")
                return
            serverId = ctx.message.guild.id
            role = str(server_info.find_one(
                {'id': serverId})['role'])
            check_role = get(ctx.message.guild.roles, name=role)
            if check_role in ctx.author.roles:
                times = self.convert(timer)
                if times == -1:
                    await ctx.send(f"You didn't answer the time with proper unit. Use (s-seconds|m-minutes|h-hour|d-day) next time!")
                    return
                elif times == -2:
                    await ctx.send(f"The time must be in integer. Please enter the integer")
                    return
                if(winner[-1] == "w"):
                    n = len(winner)
                    y = winner[0:n-1]
                    try:
                        winners = int(y)
                    except ValueError:
                        await ctx.send(f"The winner must be in integer. Please enter the integer! Eg: 1w-for 1 winner")
                        return
                else:
                    y = winner
                    try:
                        winners = int(y)
                    except ValueError:
                        await ctx.send(f"The winner must be in integer. Please enter the integer! Eg: 1w-for 1 winner")
                        return
                prize = ' '.join(args)
                if(timer[-1] == "s"):
                    prefix = "seconds"
                elif(timer[-1] == "m"):
                    prefix = "minutes"
                elif(timer[-1] == "h"):
                    prefix = "hours"
                elif(timer[-1] == "d"):
                    prefix = "days"
                n = len(timer)
                announce_time = timer[0:n-1]
                await ctx.send("The giveaway is starting in this channel now!!!")
                await asyncio.sleep(2)
                await ctx.channel.purge(limit=1)

                IST = pytz.timezone('Asia/Kolkata')
                endtime = (datetime.datetime.now(IST) +
                           datetime.timedelta(seconds=times))
                y = endtime.strftime('%Y-%m-%d %H:%M:%S')
                y = str(y)
                giveaway = discord.Embed(
                    title="**🎉 GIVEAWAY 🎉**",
                    description=f"**{prize}**",
                    colour=discord.Color.red()
                )
                giveaway.add_field(name="**Hosted By:**",
                                   value=ctx.author.mention, inline=False)
                giveaway.add_field(name="No of winners",
                                   value=f"{winners}", inline=False)
                giveaway.add_field(
                    name="Duration:", value=f"{announce_time} {prefix}", inline=False)
                giveaway.add_field(name="Ends at", value=f"{y}", inline=False)
                msg = await ctx.send(embed=giveaway)

                reactions = await msg.add_reaction("🎉")
                message_id = msg.id
                channel_id = ctx.channel.id
                # giveaway_info.find_one_and_update(
                #                   {'topic': 'giveaway'}, {'$push': {'channel_id': channel_id,'msg_id':message_id,'endtime':y}})
                giveaway_doc = {
                    'msg_id': message_id,
                    'channel_id': channel_id,
                    'endtime': y
                }
                giveaway_info.insert_one(giveaway_doc)
            else:
                await ctx.send(f"You don't have the required {role} role to use this command!!! ")

    @commands.command(aliases=['gd', 'gdr'])
    @commands.guild_only()
    @commands.cooldown(1, 2, commands.BucketType.user)
    async def gdrop(self, ctx: commands.Context, channel: discord.TextChannel, id_: int):
        serverId = ctx.message.guild.id
        allowed = True
        try:
            x = list(server_info.find({"id": serverId}))[0]['disabled']
            if "gdrop" in x:
                allowed = False
        except:
            pass
        if(allowed == True):
            await ctx. message. delete()
            serverId = ctx.message.guild.id
            try:
                role = str(server_info.find_one(
                    {'id': serverId})['role'])
            except:
                await ctx.send("Ask admin to set a giveaway role by using ``grole`` command!")
                return
            if server_info.find_one({'id': serverId}) == None:
                await ctx.send("Ask admin to set a giveaway role by using ``grole`` command!")
                return
            role = str(server_info.find_one(
                {'id': serverId})['role'])
            check_role = get(ctx.message.guild.roles, name=role)
            if check_role in ctx.author.roles:
                try:
                    try:
                        msg = await channel.fetch_message(id_)
                    except:
                        await ctx.send("The id was entered incorrectly")
                        return
                    embed = msg.embeds[0]
                    embed_dict = embed.to_dict()
                    try:
                        if(embed_dict['fields'][3]['name'] == 'Ends at'):
                            prize = embed_dict['description']
                            host = embed_dict['fields'][0]['value']
                            ends_at = embed_dict['fields'][3]['value']
                            new_embed = discord.Embed(
                                title="Giveaway!", description=f"{prize}", color=discord.Color.red())
                            new_embed.add_field(name="Hosted by: ",
                                                value=host, inline=False)
                            new_embed.add_field(name="Cancelled by: ",
                                                value=ctx.author.mention, inline=False)
                            new_embed.set_footer(
                                text=f"Giveaway has been cancelled")
                            await msg.edit(embed=new_embed)
                            await channel.send(f"This giveaway has been cancelled by {ctx.author.mention}")
                            giveaway_info.delete_one({"msg_id": id_})
                        else:
                            await ctx.send("That giveaway can not be dropped")
                    except:
                        await ctx.send("This giveaway was already ended or incorrect")
                except:
                    await ctx.send("This can not be ended!!!")
            else:
                await ctx.send(f"You don't have the required {role} role to use this command!!! ")


def setup(bot):
    bot.add_cog(Giveaway(bot))
    print(f'Giveaway was loaded!')
