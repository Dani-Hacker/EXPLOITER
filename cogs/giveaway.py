from discord.ext import commands
import discord
import requests
from mongodbs import *
import asyncio
from discord.ext.commands import cooldown, BucketType
import random
from discord.utils import get
import time
from datetime import *


class Giveaway(commands.Cog, name='fun'):
    """Commands to control a giveaway."""

    def __init__(self, bot):
        self.bot = bot

    def cog_load(self):
        print("Giveaway was loaded")

    def cog_unload(self):
        print(f'Giveaway was unloaded')

    @staticmethod
    def convert(time):
        pos = ["s", "m", "h", "d"]
        time_dict = {"s": 1, "m": 60, "h": 3600, "d": 86400}
        unit = time[-1]
        if unit not in pos:
            return -1
        try:
            val = int(time[:-1])
        except:
            return -2
        return val*time_dict[unit]

    @commands.command()
    @commands.guild_only()
    @commands.has_permissions(administrator=True)
    @commands.cooldown(1, 3, commands.BucketType.user)
    async def grole(self, ctx, role: discord.Role):
        serverId = ctx.message.guild.id
        allowed = True
        try:
            x = list(server_info.find({"id": serverId}))[0]['disabled']
            if "grole" in x:
                allowed = False
        except:
            pass
        if(allowed == True):
            if server_info.find_one({'id': serverId}):
                server_info.update_one({'id': serverId}, {
                    '$set': {'role': role.name}})
                await ctx.send(f"You fixed {role.name} as giveaway role")
            else:
                server_Doc = {
                    'id': int(serverId), 'role': role.name
                }
                server_info.insert_one(server_Doc)
                await ctx.send(f"You fixed {role.name} as giveaway role")

    @commands.command()
    @commands.guild_only()
    @commands.cooldown(1, 20, commands.BucketType.user)
    async def gcreate(self, ctx):
        serverId = ctx.message.guild.id
        allowed = True
        try:
            x = list(server_info.find({"id": serverId}))[0]['disabled']
            if "gcreate" in x:
                allowed = False
        except:
            pass
        if(allowed == True):
            try:
                role = str(server_info.find_one(
                    {'id': serverId})['role'])
            except:
                await ctx.send("Ask admin to set a giveaway role by using ``grole`` command!")
                return
            if server_info.find_one({'id': serverId}) == None:
                await ctx.send("Ask admin to set a giveaway role by using ``grole`` command!")
                return
            serverId = ctx.message.guild.id
            role = str(server_info.find_one(
                {'id': serverId})['role'])
            check_role = get(ctx.message.guild.roles, name=role)
            if check_role in ctx.author.roles:
                '''Used to start the giveaway in the any channel Eg:||?gcreate #giveaway 10s 1w dank coins||.Use (s-seconds|m-minutes|h-hour|d-day and w-winners)Giveaways require ``giveaway`` role. Ask the owner to create a role name ``giveaway`` if there is no role'''
                await ctx.send("Let's start the giveaway! Answer these questions within 20 seconds")
                questions = ["Which channel should the giveaway be hosted in?",
                             "What should be the duration of the giveaway? (s-seconds|m-minutes|h-hour|d-day)",
                             "Number of winners in the giveaway?",
                             "What is the prize of the giveaway?"]
                answers = []

                def check(m):
                    return m.author == ctx.author and m.channel == ctx.channel
                for i in questions:
                    await ctx.send(i)
                    try:
                        msg = await self.bot.wait_for('message', timeout=20.0, check=check)
                    except asyncio.TimeoutError:
                        await ctx.send("You didn't answered in time, please answer at next time!")
                        return
                    else:
                        answers.append(msg.content)
                try:
                    c_id = int(answers[0][2:-1])
                except:
                    await ctx.send(f"You didn't mention a channel correctly.Do it like this {ctx.channel.mention} next time")
                    return
                channel = self.bot.get_channel(c_id)
                time = self.convert(answers[1])
                if time == -1:
                    await ctx.send(f"You didn't answer the time with proper unit. Use (s-seconds|m-minutes|h-hour|d-day) next time!")
                    return
                elif time == -2:
                    await ctx.send(f"The time must be in integer. Please enter the integer")
                    return
                no_winners = answers[2]
                prize = answers[3]
                if(no_winners.isnumeric() == True):
                    no_winners = int(no_winners)
                else:
                    await channel.send("you gave non-integer values for winners")
                    return
                if(answers[1][-1] == "s"):
                    prefix = "seconds"
                elif(answers[1][-1] == "m"):
                    prefix = "minutes"
                elif(answers[1][-1] == "h"):
                    prefix = "hours"
                elif(answers[1][-1] == "d"):
                    prefix = "days"
                n = len(answers[1])
                announce_time = answers[1][0:n-1]
                await ctx.send(f"The Giveaway will be in channel {channel.mention} and will last for {answers[1]} !")
                giveaway = discord.Embed(
                    title="**🎉 GIVEAWAY 🎉**",
                    description=f"**Prize:** {prize}",
                    colour=discord.Color.green()
                )
                giveaway.add_field(name="**Hosted By:**",
                                   value=ctx.author.mention, inline=False)
                giveaway.add_field(name="No of winners",
                                   value=f"{no_winners}", inline=False)

                msg = await channel.send(embed=giveaway)

                reactions = await msg.add_reaction("🎉")
                my_msg = await channel.fetch_message(msg.id)
                while time > 0:
                    if time <= 60:
                        try:
                            my_msg = await channel.fetch_message(msg.id)
                            check_lst = await str(my_msg.embeds[0].fields[2])
                            check = await check_lst.split("'")[1]
                            if(check == "Winner is :"):
                                return
                            await asyncio.sleep(1)
                            check_lst = await str(my_msg.embeds[1].fields[100])
                        except:
                            giveaway.remove_field(index=2)
                            giveaway.insert_field_at(
                                index=2, name='Ends:', value=f'{time} second(s) from now')
                            await my_msg.edit(embed=giveaway)
                            time -= 10
                            await asyncio.sleep(9)
                    elif 60 < time <= 3600:
                        try:
                            my_msg = await channel.fetch_message(msg.id)
                            check_lst = await str(my_msg.embeds[0].fields[2])
                            check = await check_lst.split("'")[1]
                            if(check == "Winner is :"):
                                return
                            await asyncio.sleep(1)
                            check_lst = await str(my_msg.embeds[1].fields[100])
                        except:
                            giveaway.remove_field(index=2)
                            giveaway.insert_field_at(
                                index=2, name='Ends:', value=f'{time/60} minute(s) from now')
                            await my_msg.edit(embed=giveaway)
                            time -= 6
                            await asyncio.sleep(5)
                    elif 3600 < time <= 86400:
                        try:
                            my_msg = await channel.fetch_message(msg.id)
                            check_lst = await str(my_msg.embeds[0].fields[2])
                            check = await check_lst.split("'")[1]
                            if(check == "Winner is :"):
                                return
                            await asyncio.sleep(1)
                            check_lst = str(my_msg.embeds[1].fields[100])
                        except:
                            giveaway.remove_field(index=2)
                            giveaway.insert_field_at(
                                index=2, name='Ends:', value=f'{time/3600} hour(s) from now')
                            await my_msg.edit(embed=giveaway)
                            time -= 360
                            await asyncio.sleep(359)
                    elif time > 86400:
                        try:
                            my_msg = await channel.fetch_message(msg.id)
                            check_lst = await str(my_msg.embeds[0].fields[2])
                            check = await check_lst.split("'")[1]
                            if(check == "Winner is :"):
                                return
                            await asyncio.sleep(1)
                            check_lst = await str(my_msg.embeds[1].fields[100])
                        except:
                            giveaway.remove_field(index=2)
                            giveaway.insert_field_at(
                                index=2, name='Ends:', value=f'{time/86400} day(s) from now')
                            await my_msg.edit(embed=giveaway)
                            time -= 8640
                            await asyncio.sleep(8639)
                if time <= 0:
                    try:
                        my_msg = await channel.fetch_message(msg.id)
                        check_lst = await str(my_msg.embeds[0].fields[2])
                        check = await check_lst.split("'")[1]
                        if(check == "Winner is :"):
                            return
                        check_lst = await str(my_msg.embeds[1].fields[100])
                    except:
                        giveaway.remove_field(index=2)
                        giveaway.insert_field_at(index=2, name='Ends:', value=f'Ended at {datetime.now().strftime("%B %d, %I:%M %p")}')  # noqa
                        await my_msg.edit(embed=giveaway)

                await asyncio.sleep(time)
                new_msg = await channel.fetch_message(msg.id)
                try:
                    users = await new_msg.reactions[0].users().flatten()
                    users.pop(users.index(self.bot.user))
                    counts = len(users)

                    if(no_winners > counts or no_winners <= 0):
                        await channel.send("Not enough members ")
                        new_embed = discord.Embed(
                            new_title="Giveaway has been ended!!!", description=f"{prize}", Color=ctx.author.color)
                        new_embed.add_field(
                            name="Hosted by: ", value=ctx.author.mention)
                        new_embed.add_field(name="No of winners",
                                            value=no_winners, inline=False)
                        new_embed.set_footer(
                            text=f"Giveaway closed due to less participants!")
                        await new_msg.edit(embed=new_embed)
                        return
                    winners_announce = ""
                    winner = random.sample(users, no_winners)
                    for i in winner:
                        winners_announce += i.mention + " "
                    new_embed = discord.Embed(
                        title="Giveaway!", description=f"{prize}", Color=ctx.author.color)
                    new_embed.add_field(name="Hosted by: ",
                                        value=ctx.author.mention)
                    new_embed.add_field(
                        name="No of winners", value=no_winners, inline=False)
                    new_embed.add_field(name="Winner is : ",
                                        value=winners_announce, inline=False)
                    new_embed.set_footer(text="This giveaway has been ended")
                    await new_msg.edit(embed=new_embed)
                    await channel.send(f"Congratulations! {winners_announce} you won {prize}!.\nTotal entries = {counts} entrants ↗️")
                except:
                    await channel.send(f"The Giveaway has been cancelled because of lesser number of participants or someone cancelled the Giveaway")
            else:
                await ctx.reply(f"You don't have the required {role} role to use this command!!! ")

    @commands.command()
    @commands.cooldown(1, 3, commands.BucketType.user)
    @commands.guild_only()
    async def gend(self, ctx: commands.Context, channel: discord.TextChannel, id_: int):
        serverId = ctx.message.guild.id
        allowed = True
        try:
            x = list(server_info.find({"id": serverId}))[0]['disabled']
            if "gend" in x:
                allowed = False
        except:
            pass
        if(allowed == True):
            await ctx. message. delete()
            serverId = ctx.message.guild.id

            try:
                role = str(server_info.find_one(
                    {'id': serverId})['role'])
            except:
                await ctx.send("Ask admin to set a giveaway role by using ``grole`` command!")
                return
            if server_info.find_one({'id': serverId}) == None:
                await ctx.send("Ask admin to set a giveaway role by using ``grole`` command!")
                return
            role = str(server_info.find_one(
                {'id': serverId})['role'])
            check_role = get(ctx.message.guild.roles, name=role)
            if check_role in ctx.author.roles:
                '''Used to reroll the giveaway in the current channel Eg:||?greroll #channel-id(of the required giveaway) #id of the required giveaway||Giveaways require ``giveaway`` role. Ask the owner to create a role name ``giveaway`` if there is no role. Don't reroll while the giveaway is ongoing'''
                try:
                    new_msg = await channel.fetch_message(id_)
                    # await ctx.send(new_msg)
                except:
                    await ctx.send("The id was entered incorrectly")
                    return
                winners = ""
                # try:
                try:
                    check_lst = str(new_msg.embeds[0].fields[2])
                    check = check_lst.split("'")[1]
                except:
                    await ctx.send("The id was entered incorrectly")
                    return
                if(check == "Winner is :"):
                    await ctx.send("This giveaway has already ended")
                    return
                else:
                    if(check == "Ends:"):
                        host_lst1 = str(new_msg.embeds[0].fields[1])
                        host_lst = str(new_msg.embeds[0].fields[0])
                        host_value = host_lst.split("'")[3]
                        winner_value = host_lst1.split("'")[3]
                        winner_value = int(winner_value)
                        prize = new_msg.embeds[0].description
                        users = await new_msg.reactions[0].users().flatten()
                        users.pop(users.index(self.bot.user))
                        counts = len(users)
                        winner = random.sample(users, winner_value)
                        for i in winner:
                            winners += i.mention + " "
                        new_embed = discord.Embed(
                            title="Giveaway!", description=f"{prize}", Color=ctx.author.color)
                        new_embed.add_field(name="Hosted by: ",
                                            value=host_value, inline=False)
                        new_embed.add_field(name="No of winners",
                                            value=winner_value, inline=False)
                        new_embed.add_field(name="Winner is : ",
                                            value=winners, inline=False)
                        new_embed.set_footer(
                            text="This giveaway has been ended")
                        # await new_msg.delete()
                        await new_msg.edit(embed=new_embed)
                        await channel.send(f"Congratulations! {winners} you won {prize} !. Total entries = {counts} entrants ↗️")
                    else:
                        await ctx.send("Can not reroll this one!!!")
                # except:
                #     await channel.send("Can not reroll this one!!!")
            else:
                await ctx.send(f"You don't have the required {role} role to use this command!!! ")

    @commands.command()
    @commands.guild_only()
    @commands.cooldown(1, 2, commands.BucketType.user)
    async def greroll(self, ctx: commands.Context, channel: discord.TextChannel, id_: int):
        serverId = ctx.message.guild.id
        allowed = True
        try:
            x = list(server_info.find({"id": serverId}))[0]['disabled']
            if "greroll" in x:
                allowed = False
        except:
            pass
        if(allowed == True):
            await ctx. message. delete()
            serverId = ctx.message.guild.id
            try:
                role = str(server_info.find_one(
                    {'id': serverId})['role'])
            except:
                await ctx.send("Ask admin to set a giveaway role by using ``grole`` command!")
                return
            if server_info.find_one({'id': serverId}) == None:
                await ctx.send("Ask admin to set a giveaway role by using ``grole`` command!")
                return
            role = str(server_info.find_one(
                {'id': serverId})['role'])
            check_role = get(ctx.message.guild.roles, name=role)
            if check_role in ctx.author.roles:
                '''Used to reroll the giveaway in the current channel Eg:||?greroll #channel-id(of the required giveaway) #id of the required giveaway||Giveaways require ``giveaway`` role. Ask the owner to create a role name ``giveaway`` if there is no role. Don't reroll while the giveaway is ongoing'''
                try:
                    try:
                        new_msg = await channel.fetch_message(id_)
                    except:
                        await ctx.send("The id was entered incorrectly")
                        return
                    my_msg = await channel.fetch_message(new_msg.id)
                    check_lst = str(my_msg.embeds[0].fields[2])
                    check = check_lst.split("'")[1]
                    if(check == "Ends:"):
                        await ctx.reply('This give away is acitve!!!')
                        return
                    elif(check == "Winner is :"):
                        embed_copy = new_msg.embeds[0].copy()
                        number_winners_list = str(new_msg.embeds[0].fields[1])
                        # host_list=str(new_msg.embeds[0].fields[0])
                        number_winners = int(number_winners_list.split("'")[3])
                        # host_value=(host_list.split("'")[2])
                        # await ctx.send(host_value)
                        prize = new_msg.embeds[0].description
                        # await ctx.send(prize)

                        users = await new_msg.reactions[0].users().flatten()
                        users.pop(users.index(self.bot.user))
                        counts = len(users)
                        if(counts < number_winners):
                            await channel.send("Don't have enough members!!!")
                            return
                        winner = random.sample(users, number_winners)
                        winners = ""
                        for i in winner:
                            winners += i.mention + "  "
                        embed_copy.remove_field(index=2)
                        embed_copy.insert_field_at(
                            index=2, name='Winner is :', value=winners)
                        await new_msg.edit(embed=embed_copy)
                        await channel.send(f"Congratulations! {winners} you won {prize} !. \nTotal entries = {counts} entrants ↗️")
                    else:
                        await ctx.reply("Try selecting correct id!!!")

                except:
                    await ctx.send("Can not reroll this giveaway!!!.Check whether the giveaway ended or not")
            else:
                await ctx.send(f"You don't have the required {role} role to use this command!!! ")

    @commands.command()
    @commands.guild_only()
    @commands.cooldown(1, 5, commands.BucketType.user)
    async def gstart(self, ctx: commands.Context, timer: str, winner: str, *args):
        serverId = ctx.message.guild.id
        allowed = True
        try:
            x = list(server_info.find({"id": serverId}))[0]['disabled']
            if "gstart" in x:
                allowed = False
        except:
            pass
        if(allowed == True):
            await ctx. message. delete()
            try:
                role = str(server_info.find_one(
                    {'id': serverId})['role'])
            except:
                await ctx.send("Ask admin to set a giveaway role by using ``grole`` command!")
                return
            if server_info.find_one({'id': serverId})['role'] == None:
                await ctx.send("Ask admin to set a giveaway role by using ``grole`` command!")
                return
            serverId = ctx.message.guild.id
            role = str(server_info.find_one(
                {'id': serverId})['role'])
            check_role = get(ctx.message.guild.roles, name=role)
            if check_role in ctx.author.roles:
                '''Used to start the giveaway in the current channel Eg:||?gstart 10s 1w dank coins||.Use (s-seconds|m-minutes|h-hour|d-day and w-winners)Giveaways require ``giveaway`` role. Ask the owner to create a role name ``giveaway`` if there is no role'''
                time = self.convert(timer)
                if time == -1:
                    await ctx.send(f"You didn't answer the time with proper unit. Use (s-seconds|m-minutes|h-hour|d-day) next time!")
                    return
                elif time == -2:
                    await ctx.send(f"The time must be in integer. Please enter the integer")
                    return
                if(winner[-1] == "w"):
                    n = len(winner)
                    y = winner[0:n-1]
                    try:
                        winners = int(y)
                    except ValueError:
                        await ctx.send(f"The winner must be in integer. Please enter the integer! Eg: 1w-for 1 winner")
                        return
                else:
                    y = winner
                    try:
                        winners = int(y)
                    except ValueError:
                        await ctx.send(f"The winner must be in integer. Please enter the integer! Eg: 1w-for 1 winner")
                        return
                prize = ' '.join(args)
                if(timer[-1] == "s"):
                    prefix = "seconds"
                elif(timer[-1] == "m"):
                    prefix = "minutes"
                elif(timer[-1] == "h"):
                    prefix = "hours"
                elif(timer[-1] == "d"):
                    prefix = "days"
                n = len(timer)
                announce_time = timer[0:n-1]
                await ctx.send("The giveaway is starting in this channel now!!!")
                await asyncio.sleep(2)
                await ctx.channel.purge(limit=1)
                giveaway = discord.Embed(
                    title="**🎉 GIVEAWAY 🎉**",
                    description=f"**Prize:** {prize}",
                    colour=discord.Color.green()
                )
                giveaway.add_field(name="**Hosted By:**",
                                   value=ctx.author.mention, inline=False)
                giveaway.add_field(name="No of winners",
                                   value=f"{winners}", inline=False)

                msg = await ctx.send(embed=giveaway)

                reactions = await msg.add_reaction("🎉")
                my_msg = await ctx.fetch_message(msg.id)
                while time > 0:
                    if time <= 60:
                        try:
                            my_msg = await ctx.fetch_message(msg.id)
                            check_lst = await str(my_msg.embeds[0].fields[2])
                            check = await check_lst.split("'")[1]
                            if(check == "Winner is :"):
                                return
                            await asyncio.sleep(1)
                            check_lst = await str(my_msg.embeds[1].fields[100])
                        except:
                            giveaway.remove_field(index=2)
                            giveaway.insert_field_at(
                                index=2, name='Ends:', value=f'{time} second(s) from now')
                            await my_msg.edit(embed=giveaway)
                            time -= 10
                            await asyncio.sleep(9)
                    elif 60 < time <= 3600:
                        try:
                            my_msg = await ctx.fetch_message(msg.id)
                            check_lst = await str(my_msg.embeds[0].fields[2])
                            check = await check_lst.split("'")[1]
                            if(check == "Winner is :"):
                                return
                            check_lst = await str(my_msg.embeds[1].fields[100])
                        except:
                            giveaway.remove_field(index=2)
                            giveaway.insert_field_at(
                                index=2, name='Ends:', value=f'{time/60} minute(s) from now')
                            await my_msg.edit(embed=giveaway)
                            time -= 6
                            await asyncio.sleep(5)
                    elif 3600 < time <= 86400:
                        try:
                            my_msg = await ctx.fetch_message(msg.id)
                            check_lst = await str(my_msg.embeds[0].fields[2])
                            check = await check_lst.split("'")[1]
                            if(check == "Winner is :"):
                                return
                            await asyncio.sleep(1)
                            check_lst = await str(my_msg.embeds[1].fields[100])
                        except:
                            giveaway.remove_field(index=2)
                            giveaway.insert_field_at(
                                index=2, name='Ends:', value=f'{time/3600} hour(s) from now')
                            await my_msg.edit(embed=giveaway)
                            time -= 360
                            await asyncio.sleep(359)
                    elif time > 86400:
                        try:
                            my_msg = await ctx.fetch_message(msg.id)
                            check_lst = await str(my_msg.embeds[0].fields[2])
                            check = await check_lst.split("'")[1]
                            if(check == "Winner is :"):
                                return
                            await asyncio.sleep(1)
                            check_lst = await str(my_msg.embeds[1].fields[100])
                        except:
                            giveaway.remove_field(index=2)
                            giveaway.insert_field_at(
                                index=2, name='Ends:', value=f'{time/86400} day(s) from now')
                            await my_msg.edit(embed=giveaway)
                            time -= 8640
                            await asyncio.sleep(8639)
                if time <= 0:
                    try:
                        my_msg = await ctx.fetch_message(msg.id)
                        check_lst = await str(my_msg.embeds[0].fields[2])
                        check = await check_lst.split("'")[1]
                        if(check == "Winner is :"):
                            return
                        await asyncio.sleep(1)
                        check_lst = await str(my_msg.embeds[1].fields[100])
                    except:
                        giveaway.remove_field(index=2)
                        giveaway.insert_field_at(index=2, name='Ends:', value=f'Ended at {datetime.now().strftime("%B %d, %I:%M %p")}')  # noqa
                        await my_msg.edit(embed=giveaway)

                await asyncio.sleep(time)
                new_msg = await ctx.fetch_message(msg.id)
                try:
                    users = await new_msg.reactions[0].users().flatten()
                    users.pop(users.index(self.bot.user))
                    counts = len(users)

                    if(winners > counts or winners <= 0):
                        await ctx.send("Not enough members ")
                        new_embed = discord.Embed(
                            new_title="Giveaway has been ended!!!", description=f"{prize}", Color=ctx.author.color)
                        new_embed.add_field(
                            name="Hosted by: ", value=ctx.author.mention)
                        new_embed.add_field(name="No of winners",
                                            value=winners, inline=False)
                        new_embed.set_footer(
                            text=f"Giveaway closed due to less participants!")
                        await new_msg.edit(embed=new_embed)
                        return
                    winners_announce = ""
                    winner = random.sample(users, winners)
                    for i in winner:
                        winners_announce += i.mention + " "
                    new_embed = discord.Embed(
                        title="Giveaway!", description=f"{prize}", Color=ctx.author.color)
                    new_embed.add_field(name="Hosted by: ",
                                        value=ctx.author.mention)
                    new_embed.add_field(
                        name="No of winners", value=winners, inline=False)
                    new_embed.add_field(name="Winner is : ",
                                        value=winners_announce, inline=False)
                    new_embed.set_footer(text="This giveaway has been ended")
                    await new_msg.edit(embed=new_embed)
                    await ctx.send(f"Congratulations! {winners_announce} you won {prize}!.\nTotal entries = {counts} entrants ↗️")
                except:
                    await ctx.send(f"The Giveaway has been cancelled because of lesser number of participants or someone cancelled the Giveaway")
            else:
                await ctx.send(f"You don't have the required {role} role to use this command!!! ")


def setup(bot):
    bot.add_cog(Giveaway(bot))
    print(f'Giveaway was loaded!')
