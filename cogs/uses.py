# import dbl
import discord
from discord.ext import commands
import os
from googletrans import Translator
import googletrans
from discord.utils import get


class Uses(commands.Cog):

    def __init__(self, bot):
        self.bot = bot

    @commands.command()
    async def id_channel(self, ctx, channel):
        try:
            id = int(channel[2:len(channel)-1])
            name = get(ctx.message.guild.channels, id=id)
            if name == None:
                embed = discord.Embed(
                    title=f"No such channel exists", colour=discord.Color.red())
                await ctx.send(embed=embed)
                return
            embed = discord.Embed(
                title=f"Channel Name is {name}\nId is {id}", colour=discord.Color.green())
            await ctx.send(embed=embed)
        except:
            embed = discord.Embed(
                title=f"No such channel exists", colour=discord.Color.red())
            await ctx.send(embed=embed)

    @commands.command()
    async def id_role(self, ctx, role):
        success = 0
        try:
            id = int(role[3:len(role)-1])
            name = get(ctx.message.guild.roles, id=id)
            if name == None:
                success = 0
            else:
                success = 1
                embed = discord.Embed(
                    title=f"Role is {name}\nId is {id}", colour=discord.Color.green())
                await ctx.send(embed=embed)
                return
        except:
            success = 0
        if success == 0:
            name = get(ctx.message.guild.roles, name=role)
            if name == None:
                embed = discord.Embed(
                    title=f"No such role exists", colour=discord.Color.red())
                await ctx.send(embed=embed)
            else:
                embed = discord.Embed(
                    title=f"Role is {role}\nId is {name.id}", colour=discord.Color.green())
                await ctx.send(embed=embed)

    @commands.command(aliases=['translate'])
    @commands.cooldown(1, 2, commands.BucketType.user)
    async def tran(self, ctx, lang, *, args):
        try:
            t = Translator()
            a = t.translate(args, dest=lang)
            if(args == a.text):
                msgID = int(args)
                msg = await ctx.fetch_message(msgID)
                a = t.translate(msg.content, dest=lang)
                await ctx.reply(a.text)
            else:
                await ctx.reply(a.text)
        except:
            await ctx.reply("Can't translate this!")


def setup(bot):
    bot.add_cog(Uses(bot))
