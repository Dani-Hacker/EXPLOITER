import discord, asyncio
import asyncpg
import time
from discord.ext import commands, tasks
from random import randint
from datetime import datetime, timedelta
import pytz
import asyncio
from discord.utils import get
from discord.abc import PrivateChannel
from mongodbs import *

class Logs(commands.Cog):


    def __init__(self, bot):
        self.bot = bot
        # self.check.start()


    @commands.command(aliases=['vc'])
    @commands.guild_only()
    @commands.has_permissions(administrator=True)
    @commands.cooldown(1, 10, commands.BucketType.user)
    async def voice_logs(self,ctx,answers):
      try:
          serverId = ctx.message.guild.id    
          if user_info.find_one({'id': serverId}):
            try:
              x=list(user_info.find({ "id":serverId }))[0]['disabled']
              if "voice_logs" in x:
                return
            except:
              pass
          c_id = int(answers[2:-1])
          channel = self.bot.get_channel(c_id)
          serverId = ctx.message.guild.id
          if logs_info.find_one({'id': serverId}):
            logs_info.update_one({'id': serverId}, {
                    '$set': {'voice_logs': c_id}})
            await ctx.reply(f"You fixed {channel.mention} as voice_logs channel")
          else:
            server_Doc = {
                    'id': int(serverId)
                    ,'voice_logs':c_id
                }
            logs_info.insert_one(server_Doc)   
            await ctx.reply(f"You fixed {channel.mention} as voice_logs channel")
      except:
          await ctx.reply("Enter a proper channel")

    @commands.command()
    @commands.guild_only()
    @commands.has_permissions(administrator=True)
    @commands.cooldown(1, 10, commands.BucketType.user)
    async def cancel_voice_logs(self,ctx):
      serverId = ctx.message.guild.id    
      if user_info.find_one({'id': serverId}):
            try:
              x=list(user_info.find({ "id":serverId }))[0]['disabled']
              if "cancel_voice_logs" in x:
                return
            except:
              pass
      try:
        if logs_info.find_one({'id': serverId})['voice_logs']:        
                logs_info.update_one({"id":serverId},{"$unset":{"voice_logs":""}})
                await ctx.reply(f"{ctx.author.mention} You successfully removed voice_logs command")
        else:
               await ctx.reply(f"{ctx.suthor.mention} You didn't enabled voice_logs")   
  
      except:
        await ctx.reply(f"{ctx.author.mention} You didn't enabled voice_logs")     


    @commands.command()
    @commands.guild_only()
    @commands.has_permissions(administrator=True)
    @commands.cooldown(1, 10, commands.BucketType.user)
    async def cancel_action_logs(self,ctx):
      serverId = ctx.message.guild.id    
      if user_info.find_one({'id': serverId}):
            try:
              x=list(user_info.find({ "id":serverId }))[0]['disabled']
              if "cancel_action_logs" in x:
                return
            except:
              pass
      try:
        if logs_info.find_one({'id': serverId})['action_logs']:        
                logs_info.update_one({"id":serverId},{"$unset":{"action_logs":""}})
                await ctx.reply(f"{ctx.author.mention} You successfully removed action_logs command")
        else:
               await ctx.reply(f"{ctx.suthor.mention} You didn't enabled action_logs")   
  
      except:
        await ctx.reply(f"{ctx.author.mention} You didn't enabled action_logs")          


    @commands.command(aliases=['ac'])
    @commands.guild_only()
    @commands.has_permissions(administrator=True)
    @commands.cooldown(1, 10, commands.BucketType.user)
    async def action_logs(self,ctx,answers):
      try:
          serverId = ctx.message.guild.id    
          if user_info.find_one({'id': serverId}):
            try:
              x=list(user_info.find({ "id":serverId }))[0]['disabled']
              if "action_logs" in x:
                return
            except:
              pass
          c_id = int(answers[2:-1])
          channel = self.bot.get_channel(c_id)
          serverId = ctx.message.guild.id
          if logs_info.find_one({'id': serverId}):
            logs_info.update_one({'id': serverId}, {
                    '$set': {'action_logs': c_id}})
            await ctx.reply(f"You fixed {channel.mention} as action_logs channel")
          else:
            server_Doc = {
                    'id': int(serverId)
                    ,'action_logs':c_id
                }
            logs_info.insert_one(server_Doc)   
            await ctx.reply(f"You fixed {channel.mention} as action_logs channel")
      except:
          await ctx.reply("Enter a proper channel")


    @commands.Cog.listener()
    async def on_member_join(self,member):
        try:
          serverId=member.guild.id
          channel_id=int(logs_info.find_one(
              {'id': serverId})['action_logs'])
          logchannel = self.bot.get_channel(channel_id)
        except:
          return
 
        embed=discord.Embed(title=f"Joined the server {member.guild.name}",description=f"{member.mention} joined the server ",colour=randint(0, 0xffffff))
        member_count = len(member.guild.members) # includes bots
        true_member_count = len([m for m in member.guild.members if not m.bot]) # doesn't include bots        
        embed.add_field(name="Count Now",value=f"Total members: {member_count}\nHumans:{true_member_count}\nBots:{str(int(member_count)-int(true_member_count))}")     
        date_format = "%a, %d %b %Y %I:%M %p"
        embed.add_field(name="Joined at", value=member.joined_at.strftime(date_format))
        members = sorted(member.guild.members, key=lambda m: m.joined_at)
        members = sorted(member.guild.members, key=lambda m: m.joined_at)
        embed.add_field(name="Join position", value=str(members.index(member)+1))
        embed.add_field(name="Account Created at", value=member.created_at.strftime(date_format))
        embed.set_thumbnail(url=member.guild.icon_url)
        embed.set_footer(text=self.bot.user.name,icon_url=self.bot.user.avatar_url)
        embed.set_author(name=member.name, icon_url=member.avatar_url)
        await logchannel.send(embed=embed)              
        return

      
        
    @commands.Cog.listener()
    async def on_member_update(self,before, after):
        try:
          serverId=after.guild.id
          channel_id=int(logs_info.find_one(
              {'id': serverId})['action_logs'])
          logchannel = self.bot.get_channel(channel_id)
        except:
          return
        IST = pytz.timezone('Asia/Kolkata')
        time_now = (datetime.now(IST))
        time_now = str(time_now.strftime('%Y-%m-%d %H:%M:%S'))
        if len(before.roles) < len(after.roles):
            new_role = next(role for role in after.roles if role not in before.roles)
            embed=discord.Embed(title=f"Roles given",description=f"{after.mention} has been given {new_role.mention} role",colour=randint(0, 0xffffff))
            embed.add_field(name="Role added at",value=time_now)
        elif(len(before.roles) > len(after.roles)):
            new_role = next(role for role in before.roles if role not in after.roles)
            embed=discord.Embed(title=f"Removed",description=f"{new_role.mention} role has been removed from {after.mention}",colour=randint(0, 0xffffff))
            embed.add_field(name="Role removed at",value=time_now)
        else:
          return
        
        embed.set_thumbnail(url=after.guild.icon_url)
        embed.set_footer(text=self.bot.user.name,icon_url=self.bot.user.avatar_url)
        embed.set_author(name=after.name, icon_url=after.avatar_url)
        await logchannel.send(embed=embed)  



    @commands.Cog.listener()
    async def on_member_remove(self,member):
        try:
          serverId=member.guild.id
          channel_id=int(logs_info.find_one(
              {'id': serverId})['action_logs'])
          logchannel = self.bot.get_channel(channel_id)
        except:
          return
        IST = pytz.timezone('Asia/Kolkata')
        time_now = (datetime.now(IST))
        time_now = str(time_now.strftime('%Y-%m-%d %H:%M:%S'))
        def chunkify(lst,n):
          return [lst[i::n] for i in range(n)]
          
        try:
            banned = await member.guild.fetch_ban(member)
        except discord.NotFound:
            banned = False
        if not banned:
            async for entry in member.guild.audit_logs(limit=1):
              # await logchannel.send(entry.reason)
              # await logchannel.send(entry.target.id) ###invite code otherwise in invite
              if(str(entry.action)=="AuditLogAction.kick" and member.id==entry.target.id):
                # logs=logs[0]
                
                if(entry.reason!=None):
                  embed=discord.Embed(title=f"Kicked from the server",description=f"{member.mention} has been kicked from the server {member.guild.name} by {entry.user.mention} for the reason of {entry.reason}",colour=randint(0, 0xffffff))
                else:
                  embed=discord.Embed(title=f"Kicked from the server",description=f"{member.mention} has been kicked from the server {member.guild.name} by {entry.user.mention} with no reason specified",colour=randint(0, 0xffffff)) 
                embed.add_field(name="Kicked at",value=time_now,inline=False)
                embed.set_thumbnail(url=member.guild.icon_url)
                embed.set_footer(text=self.bot.user.name,icon_url=self.bot.user.avatar_url)
                embed.set_author(name=member.name, icon_url=member.avatar_url)
                
            else:
                embed=discord.Embed(title=f"Left the server",description=f"{member.mention} has left the server {member.guild.name}",colour=randint(0, 0xffffff)) 
                embed.add_field(name="Left at",value=time_now,inline=False)
                embed.set_thumbnail(url=member.guild.icon_url)
                embed.set_footer(text=self.bot.user.name,icon_url=self.bot.user.avatar_url)
                embed.set_author(name=member.name, icon_url=member.avatar_url)
        n=len(member.roles)
        embed.add_field(name="Number of roles",value=n,inline=False)
        if len(member.roles) > 1:
            splits=int(n/40)+1
            big_list=[]
            for i in member.roles:
              big_list.append(i.mention)
            x=chunkify(big_list,splits)
            for i in range(splits):
              roles_list=""
              for j in x[i]:
                roles_list+=j+" "
              embed.add_field(name=f"Roles:",value=roles_list)  
        
        perm_string = ', '.join([str(p[0]).replace("_", " ").title() for p in member.guild_permissions if p[1]])
        embed.add_field(name="Guild permissions", value=perm_string, inline=False)
        # list_roles=""
        badge_class = str(member.public_flags.all()).replace('[<UserFlags.', '').replace('>]', '').replace('_',
                                                                                                         ' ').replace(
        ':', '').title()
        badge_class = ''.join([i for i in badge_class if not i.isdigit()])
        embed.add_field(name="Badges",value=badge_class,inline=False)
        fields=[("Bot?", member.bot, True), ("Top role", member.top_role.mention, True),
				  ("Status", str(member.status).title(), True),
          ("Boosted", bool(member.premium_since), True)]
        for name, value, inline in fields:
			      embed.add_field(name=name, value=value, inline=inline)      
        await logchannel.send(embed=embed)            
  
        

    @commands.Cog.listener()
    async def on_member_unban(self,guild, user):
      try:
          serverId=guild.id
          channel_id=int(logs_info.find_one(
              {'id': serverId})['action_logs'])
          logchannel = self.bot.get_channel(channel_id)
      except:
          return
      logs = await guild.audit_logs(limit=1, action=discord.AuditLogAction.unban).flatten()
      logs = logs[0]
      if logs.target == user:
          # await logchannel.send(f'{logs.user} has just banned {logs.target} (The time is {logs.created_at}), and their reason for doing so is {logs.reason}')
        IST = pytz.timezone('Asia/Kolkata')
        time_now = (datetime.now(IST))
        time_now = str(time_now.strftime('%Y-%m-%d %H:%M:%S'))
        embed=discord.Embed(title=f"Unbanned from the server",description=f"{user.mention} has been unbanned from the server {guild.name} by {logs.user} ",colour=randint(0, 0xffffff))
        embed.add_field(name="Unbanned at",value=time_now)
        embed.set_thumbnail(url=guild.icon_url)
        embed.set_footer(text=self.bot.user.name,icon_url=self.bot.user.avatar_url)
        embed.set_author(name=user.name, icon_url=user.avatar_url)
        await logchannel.send(embed=embed)


    @commands.Cog.listener()
    async def on_member_ban(self,guild, user):
      try:
          serverId=guild.id
          channel_id=int(logs_info.find_one(
              {'id': serverId})['action_logs'])
          logchannel = self.bot.get_channel(channel_id)
      except:
          return
      logs = await guild.audit_logs(limit=1, action=discord.AuditLogAction.ban).flatten()
      logs = logs[0]
      if logs.target == user:
          # await logchannel.send(f'{logs.user} has just banned {logs.target} (The time is {logs.created_at}), and their reason for doing so is {logs.reason}')
        IST = pytz.timezone('Asia/Kolkata')
        time_now = (datetime.now(IST))
        time_now = str(time_now.strftime('%Y-%m-%d %H:%M:%S'))
        embed=discord.Embed(title=f"Banned from the server",description=f"{user.mention} has been banned from the server {guild.name} by {logs.user} for the reason of {logs.reason}",colour=randint(0, 0xffffff))
        embed.add_field(name="Banned at",value=time_now)
        embed.set_thumbnail(url=guild.icon_url)
        embed.set_footer(text=self.bot.user.name,icon_url=self.bot.user.avatar_url)
        embed.set_author(name=user.name, icon_url=user.avatar_url)
        await logchannel.send(embed=embed)

    @commands.Cog.listener()
    async def on_voice_state_update(self,member, before, after):
      try:
          serverId=member.guild.id
          channel_id=int(logs_info.find_one(
              {'id': serverId})['voice_logs'])
          logchannel = self.bot.get_channel(channel_id)
      except:
          return
      IST = pytz.timezone('Asia/Kolkata')
      time_now = (datetime.now(IST))
      time_now = str(time_now.strftime('%Y-%m-%d %H:%M:%S'))
      if(before.channel==None and after.channel!=None):
        if(after.channel.category_id!=None):   
          title="Joined voice channel"
          description=f"{member.mention} joined voice channel {after.channel.mention} under the category {after.channel.category.name}"
          embed=discord.Embed(title=title,description=description,colour=randint(0, 0xffffff))
          embed.add_field(name="Joined at:",value=time_now,inline=False)          
        else:
          title="Joined voice channel"
          description=f"{member.mention} joined voice channel {after.channel.mention} which has no category"
          embed=discord.Embed(title=title,description=description,colour=randint(0, 0xffffff))
          embed.add_field(name="Joined at:",value=time_now,inline=False)        
      elif(before.channel!=None and after.channel==None):
        if(before.channel.category_id!=None):   
          title="Left voice channel"
          description=f"{member.mention} left voice channel {before.channel.mention} under the category {before.channel.category.name}"
          embed=discord.Embed(title=title,description=description,colour=randint(0, 0xffffff))
          embed.add_field(name="Left at:",value=time_now,inline=False)   
        else:
          title="Left voice channel"
          description=f"{member.mention} left voice channel {before.channel.mention} which has no category"
          embed=discord.Embed(title=title,description=description,colour=randint(0, 0xffffff))
          embed.add_field(name="Left at:",value=time_now,inline=False) 
      else:
        try:
          title="Transferred voice channel"
          if(before.channel.category_id!=None and after.channel.category_id!=None):
            description=description=f"{member.mention} transferred from voice channel {before.channel.mention} which has {before.channel.category.name} as category to {after.channel.mention} which has {after.channel.category.name} as category"
            embed=discord.Embed(title=title,description=description,colour=randint(0, 0xffffff))
            embed.add_field(name="Switched voice channel at:",value=time_now,inline=False)
          elif(before.channel.category_id!=None and after.channel.category_id==None):
            description=description=f"{member.mention} transferred from voice channel {before.channel.mention} which has {before.channel.category.name} as  category to {after.channel.mention} which has  no category"
            embed=discord.Embed(title=title,description=description,colour=randint(0, 0xffffff))
            embed.add_field(name="Switched voice channel at:",value=time_now,inline=False)
          elif(before.channel.category_id==None and after.channel.category_id!=None):
            description=description=f"{member.mention} transferred from voice channel {before.channel.mention} which has no category to {after.channel.mention} which has {after.channel.category.name} as category"
            embed=discord.Embed(title=title,description=description,colour=randint(0, 0xffffff))
            embed.add_field(name="Switched voice channel at:",value=time_now,inline=False)
          elif(before.channel.category_id==None and after.channel.category_id==None):
            description=description=f"{member.mention} transferred from voice channel {before.channel.mention} which has no category to {after.channel.mention} which has no category"
            embed=discord.Embed(title=title,description=description,colour=randint(0, 0xffffff))
            embed.add_field(name="Switched voice channel at:",value=time_now,inline=False)
          else:
            return 
        except:
          return   
      before_status=f"Self_Mute={before.self_mute}, Self_Deaf={before.self_deaf}, Self_Stream={before.self_stream}, Suppress={before.suppress}\n"
      after_status=f"Self_Mute={after.self_mute}, Self_Deaf={after.self_deaf}, Self_Stream={after.self_stream}, Suppress={after.suppress}\n"
      embed.add_field(name="Before: ",value=before_status,inline=False)
      embed.add_field(name="After: ",value=after_status,inline=False)
      embed.set_thumbnail(url=member.guild.icon_url)
      embed.set_footer(text=self.bot.user.name,icon_url=self.bot.user.avatar_url)
      embed.set_author(name=member.name, icon_url=member.avatar_url)
      await asyncio.sleep(0.5)
      await logchannel.send(embed=embed)


    @commands.Cog.listener()
    async def on_guild_emojis_update(self,guild, before, after):
      try:
          serverId=guild.id
          channel_id=int(logs_info.find_one(
              {'id': serverId})['action_logs'])
          logchannel = self.bot.get_channel(channel_id)
      except:
          return
      before_emoji=len(before)
      after_emoji=len(after)
      status=""
      new_emoji=""
      if(before_emoji>after_emoji):
        for i in before:
          if i not in after:
            status="remove"
            if i.animated==False:
              new_emoji+="<:"+i.name+":"+str(i.id)+"> "
              title=f"{new_emoji} emoji has been removed"
            else:
              emoji_name=i.name
              title=f"Animated {emoji_name} has been removed"   
      elif(before_emoji<after_emoji):
        for i in after:
          if i not in before:
              status="add"
              if(i.animated==False):
                new_emoji+="<:"+i.name+":"+str(i.id)+"> "
                title=f"{new_emoji} emoji has been added"
              else:
                emoji_name=i.name
                title=f"Animated {emoji_name} has been added"

      IST = pytz.timezone('Asia/Kolkata')
      time_now = (datetime.now(IST))
      time_now = str(time_now.strftime('%Y-%m-%d %H:%M:%S'))  
      embed=discord.Embed(title=title,colour=randint(0, 0xffffff))
      if(status=="remove"):
        embed.add_field(name="Removed at:",value=time_now,inline=False)
      elif(status=="add"):
          embed.add_field(name="Added at:",value=time_now,inline=False)
  
      embed.set_thumbnail(url=guild.icon_url)
      embed.set_footer(text=self.bot.user.name,icon_url=self.bot.user.avatar_url)
      await logchannel.send(embed=embed)


    @commands.Cog.listener()
    async def on_guild_role_update(self,before, after):
      try:
          serverId=after.guild.id
          channel_id=int(logs_info.find_one(
              {'id': serverId})['action_logs'])
          logchannel = self.bot.get_channel(channel_id)
      except:
          return
      display_changed=True    
      embed=discord.Embed(description=f"{after.mention} role has been edited",colour=randint(0, 0xffffff))
      if(before.name != after.name):
        display_changed=False   
        embed.add_field(name="Name before edit:",value=before,inline=False)
        embed.add_field(name="Name after edit",value=after,inline=False)
      IST = pytz.timezone('Asia/Kolkata')
      time_now = (datetime.now(IST))
      time_now = str(time_now.strftime('%Y-%m-%d %H:%M:%S'))
      embed.add_field(name="Role created at",value=before.created_at,inline=False)
      embed.add_field(name="Role edited at",value=time_now,inline=False)
      embed.set_thumbnail(url=after.guild.icon_url)
      embed.set_footer(text=f"{self.bot.user.name} ⚠️⚠️Changes in display column won't be displayed⚠️⚠️",icon_url=self.bot.user.avatar_url)
      embed.add_field(name="Role-ID",value=before.id,inline=False)
      x=[]
      y=[]
      for i in before.permissions:
          if i[1]==True:
              x.append(i[0])
      for i in (after.permissions):
        if i[1]==True:
              y.append(i[0]) 
      removed=[]
      added=[]        
      for i in x:
        if i not in y:
          removed.append(i)
      if len(removed)!=0:
        display_changed=False   
        embed.add_field(name="Removed Permissions:",value=removed,inline=False)         
      # await logchannel.send(f"removed perms: {removed}") 
      for i in y:
        if i not in x:
          added.append(i)
      if len(added)!=0:  
        display_changed=False    
        embed.add_field(name="Added Permissions:",value=added,inline=False)
      if(display_changed==True):
        embed.add_field(name="Changes:",value="Changes in displayed column:")
      await logchannel.send(embed=embed)


    @commands.Cog.listener()
    async def on_guild_role_create(self,role):
        try:
          serverId=role.guild.id
          channel_id=int(logs_info.find_one(
              {'id': serverId})['action_logs'])
          logchannel = self.bot.get_channel(channel_id)
        except:
          return
        IST = pytz.timezone('Asia/Kolkata')
        time_now = (datetime.now(IST))
        time_now = str(time_now.strftime('%Y-%m-%d %H:%M:%S'))
        embed=discord.Embed(title=f"A new role has been created",timestamp=role.created_at,colour=randint(0, 0xffffff))
        embed.add_field(name="Role created at",value=role.created_at,inline=False)
        embed.set_thumbnail(url=role.guild.icon_url)
        embed.set_footer(text=self.bot.user.name,icon_url=self.bot.user.avatar_url)
        await logchannel.send(embed=embed)        

    @commands.Cog.listener()
    async def on_guild_role_delete(self,role):
        try:
          serverId=role.guild.id
          channel_id=int(logs_info.find_one(
              {'id': serverId})['action_logs'])
          logchannel = self.bot.get_channel(channel_id)
        except:
          return
        IST = pytz.timezone('Asia/Kolkata')
        time_now = (datetime.now(IST))
        time_now = str(time_now.strftime('%Y-%m-%d %H:%M:%S'))
        embed=discord.Embed(title=f"Role {role} has been deleted from the server",colour=randint(0, 0xffffff))
        embed.add_field(name="Role created at",value=role.created_at,inline=False)
        embed.add_field(name="Role deleted at",value=time_now,inline=False)
        embed.set_thumbnail(url=role.guild.icon_url)
        embed.set_footer(text=self.bot.user.name,icon_url=self.bot.user.avatar_url)
        await logchannel.send(embed=embed)

    @commands.Cog.listener()
    async def on_guild_update(self,before, after):
        try:
          serverId=after.guild.id
          channel_id=int(logs_info.find_one(
              {'id': serverId})['action_logs'])
          logchannel = self.bot.get_channel(channel_id)
        except:
          return
        IST = pytz.timezone('Asia/Kolkata')
        time_now = (datetime.now(IST))
        time_now = str(time_now.strftime('%Y-%m-%d %H:%M:%S'))
        embed=discord.Embed(title=f"Server profile has been changed",colour=randint(0, 0xffffff))
        embed.set_thumbnail(url=before.icon_url)
        embed.set_image(url=after.icon_url)
        embed.set_author(name=after.name, icon_url=after.icon_url)
        embed.add_field(name="Name before",value=before.name,inline=False)
        embed.add_field(name="Name after",value=after.name,inline=False)
        embed.add_field(name="Chnaged at:",value=time_now,inline=False)
        embed.set_footer(text="Note: Thumbnail is their old avatar and image is the server new profile photo",icon_url=self.bot.user.avatar_url)
        await logchannel.send(embed=embed)


    @commands.Cog.listener()
    async def on_user_update(self,before, after):
        try:
          serverId=after.guild.id
          channel_id=int(logs_info.find_one(
              {'id': serverId})['action_logs'])
          logchannel = self.bot.get_channel(channel_id)
        except:
          return
        IST = pytz.timezone('Asia/Kolkata')
        time_now = (datetime.now(IST))
        time_now = str(time_now.strftime('%Y-%m-%d %H:%M:%S'))
        embed=discord.Embed(description=f"{after.mention} changed his profile",colour=randint(0, 0xffffff))
        embed.set_thumbnail(url=before.avatar_url)
        embed.set_image(url=after.avatar_url)
        embed.set_author(name=after.name, icon_url=after.avatar_url)
        embed.add_field(name="Name before",value=before.name,inline=False)
        embed.add_field(name="Name after",value=after.name,inline=False)
        embed.add_field(name="Chnaged at:",value=time_now,inline=False)
        embed.set_footer(text="Note: Thumbnail is their old avatar and image is their new avatar",icon_url=self.bot.user.avatar_url)
        await logchannel.send(embed=embed)
       

    @commands.Cog.listener()
    async def on_guild_channel_delete(self,channel):
      try:
          serverId=channel.guild.id
          channel_id=int(logs_info.find_one(
              {'id': serverId})['action_logs'])
          logchannel = self.bot.get_channel(channel_id)
      except:
          return
      try:
          embed=discord.Embed(title=f"{str(channel.type)} channel #{channel.name} which is under ``{channel.category}`` category  was deleted",colour=randint(0, 0xffffff))
      except:  
          embed=discord.Embed(title=f"{str(channel.type)} channel  #{channel.name} was deleted",colour=randint(0, 0xffffff))
      IST = pytz.timezone('Asia/Kolkata')
      time_now = (datetime.now(IST))
      time_now = str(time_now.strftime('%Y-%m-%d %H:%M:%S'))    
      embed.set_footer(text=self.bot.user.name, icon_url=self.bot.user.avatar_url)
      embed.set_thumbnail(url=channel.guild.icon_url)
      embed.add_field(name="Channel Id",value=channel.id,inline=False)
      embed.add_field(name="Created at:",value=channel.created_at,inline=False)
      embed.add_field(name="Deleted at:",value=time_now,inline=False)
      await logchannel.send(embed=embed)

    @commands.Cog.listener()
    async def on_guild_channel_create(self,channel):
        try:
          serverId=channel.guild.id
          channel_id=int(logs_info.find_one(
              {'id': serverId})['action_logs'])
          logchannel = self.bot.get_channel(channel_id)
        except:
          return
        try:
          embed=discord.Embed(description=f"New {str(channel.type)} channel Created with name {channel.mention} under ``{channel.category}`` category ",timestamp=channel.created_at,colour=randint(0, 0xffffff))
        except:  
          embed=discord.Embed(description=f"New {str(channel.type)} channel Created with name {channel.mention} ",timestamp=channel.created_at,colour=randint(0, 0xffffff))
        embed.set_footer(text=self.bot.user.name, icon_url=self.bot.user.avatar_url)
        embed.set_thumbnail(url=channel.guild.icon_url)
        embed.add_field(name="Channel Id",value=channel.id,inline=False)
        await logchannel.send(embed=embed)


    @commands.Cog.listener()
    async def on_message_delete(self, message):
        try:
          serverId=message.guild.id
          channel_id=int(logs_info.find_one(
              {'id': serverId})['action_logs'])
          logchannel = self.bot.get_channel(channel_id)
        except:
          return
        author = message.author # Defines the message author
        content = message.content # Defines the message content
        channel = message.channel # Defines the message channel
        if channel.id == channel_id:
           return
        IST = pytz.timezone('Asia/Kolkata')
        time_now = (datetime.now(IST))
        # time_now = str(time_now.strftime('%Y-%m-%d %H:%M:%S'))
        embed = discord.Embed(title="Message deleted",description=f"Message sent by  {author.mention} deleted in the channel {channel.mention}",timestamp=message.created_at,colour=randint(0, 0xffffff))
        embeds=False
        if message.embeds:
          embeds=True
        if(content==""):
          content=f"No content specified by {message.author.mention}"  
        n=len(message.attachments)
        if(n==0):
          n="No attachments"

        # if(n!=0):
        #   urls_used=""
        #   for i in range(n):
        #     urls_used+="[Url-"+str(i+1)+"]("+message.attachments[i].url+")\n"
        embed.add_field(name="Attachment files:",value=n,inline=False)

        embed.add_field(name=f'Author Id:', value=f'{author.id}',inline=False)
        embed.add_field(name=f'Message:', value=f'{content}',inline=False)
        embed.add_field(name=f'Message Id:', value=f'{message.id}',inline=False)
        embed.add_field(name="Deleted at",value=time_now.strftime('%Y-%m-%d %H:%M:%S'))
        embed.add_field(name="Embeds",value=embeds,inline=False)
        embed.set_footer(text=self.bot.user.name, icon_url=self.bot.user.avatar_url)
        embed.set_thumbnail(url=message.guild.icon_url)
        embed.set_author(name=author.name, icon_url=author.avatar_url)
        await logchannel.send(embed=embed)
        try: 
          if(int(n)!=0):
            other_embed=discord.Embed(title="Attachments files in that last message",description="⚠️⚠️Files can not be accessed. Only pictures can be seen⚠️⚠️",colour=0xff0000)
            await logchannel.send(embed=other_embed)
            for i in message.attachments:
              await logchannel.send(i.url)
        except:
          return      
        

    @commands.Cog.listener()
    async def on_bulk_message_delete(self, messages):
        try:
          serverId=messages[0].guild.id
          channel_id=int(logs_info.find_one(
              {'id': serverId})['action_logs'])
          logchannel = self.bot.get_channel(channel_id)
        except:
          return
        def chunkify(lst,n):
            return [lst[i::n] for i in range(n)]   
        last=len(messages)
        last_message=messages[last-1].author
        channel = messages[0].channel  # Defines the message channel
        if channel.id == channel_id: 
          return

        embed = discord.Embed(description=f"Bulk delete in {channel.mention}",title="Over deletion of old messages stop this counter and sends invalid count",timestamp=messages[last-1].created_at,colour=randint(0, 0xffffff))
        count_message=0
        total_messages=[]
        url=messages[0].guild.icon_url
        attaches=0
        urls_used=[]
        for msg in messages:
            author = msg.author # Defines the message author
            count_message+=1 
            strings=""
            if(msg.content==""):
              strings+=f"{str(count_message)}) Message : No content\n"
            else:
              strings+=f"{str(count_message)})Message : {msg.content}\n"
            embeds=False
            if msg.embeds:
              embeds=True
            strings+=f"Embeds : {embeds}\n"
            n=len(msg.attachments)
            attaches+=n
            attachments=False
            if(n!=0):
              attachments=True
              for i in range(n):
                urls_used.append([msg.attachments[i].url,author.mention])
            strings+=f"Attachments : {attachments}\n"
            #     urls_used+="[Url-"+str(i+1)+"]("+msg.attachments[i].url+")\n"
            #   strings+=f"Attachments :\n{urls_used}\n"  
            strings+=f"Author : {author.mention}\n"
            total_messages.append(strings)  
        if(attaches==0):
          attaches="No attachments"
        embed.add_field(name=f"Total messages deleted", value=len(messages), inline=False)
        splits=int(count_message/5)+1
        x=chunkify(total_messages,splits)
        for i in range(splits):
          embed_spe_list=""
          for j in x[i]:
            embed_spe_list+=j+" "
          embed.add_field(name="Bulk deleted Messages are",value=embed_spe_list)
          await asyncio.sleep(1)  
        ##########
        embed.add_field(name="Total Number of attachments:",value=attaches,inline=False)
        embed.add_field(name="Deleted by:",value=last_message.mention,inline=False)
        embed.set_footer(text=self.bot.user.name, icon_url=self.bot.user.avatar_url)
        embed.set_thumbnail(url=url)
        embed.set_author(name=last_message.name, icon_url=last_message.avatar_url)
        await logchannel.send(embed=embed) # Send the message.
        try:
          if(int(attaches)!=0):
            other_embed=discord.Embed(title="Attachments files in that last message",description="⚠️⚠️Files can not be accessed. Only pictures can be seen⚠️⚠️",colour=0xff0000)
            await logchannel.send(embed=other_embed)
            for i in urls_used:
              new_embed=discord.Embed(title="Attachments:",description=f"Sent by Author:{i[1]} was deleted in bulk delete in {channel.mention} ",color=randint(0, 0xffffff))
              await logchannel.send(embed=new_embed)
              await logchannel.send(i[0])
              # new_embed.set_image(url=i[0])
              await asyncio.sleep(1)
        except:
          return      

    @commands.Cog.listener()
    async def on_message_edit(self, before, after):
        try:
          serverId=after.guild.id
          channel_id=int(logs_info.find_one(
              {'id': serverId})['action_logs'])
          logchannel = self.bot.get_channel(channel_id)
        except:
          return
        channel = before.channel  # Defines the message channel
        if after.author.id == self.bot.user.id: return
        elif channel.id == channel_id: await after.delete()
        author = before.author  # Defines the message author
        if author.bot: return
        old_content = before.content  # Defines the old message content
        new_content = after.content # Defines the new message content
        if old_content == new_content: return
        ###################
        embed = discord.Embed(title="__**Message Edit:**__",description=f"{author.mention} edited their message in the channel {channel.mention}",timestamp=after.edited_at,colour=randint(0, 0xffffff))
        old_embeds=False
        if before.embeds:
          old_embeds=True
        if(old_content==""):
          old_content=f"No content specified by {author.mention}"  
        n=len(before.attachments)
        if(n!=0):
          urls_used=n
       
          #   old_urls_used+="[Url-"+str(i+1)+"]("+before.attachments[i].url+")\n"
        else:
          urls_used="No attachments"
        new_embeds=False
        if after.embeds:
          new_embeds=True
        if(new_content==""):
          new_content=f"No content specified by {author.mention}"  
    


        embed.add_field(name="Message info",value=f"Before Edit: {old_content}\nAfter Edit: {new_content}",inline=False)
        embed.add_field(name="Embed info",value=f"Before Edit: {old_embeds}\nAfter Edit: {new_embeds}",inline=False)
        embed.add_field(name="Total Attachments",value=f"{urls_used}",inline=False)

        # embed.add_field(name=f'{author} said:', value=f'{old_content}\nNow:\n{new_content}')
        ##########
        embed.add_field(name=f'Author Id:', value=f'{author.id}',inline=False)
        embed.add_field(name=f'Message Id:', value=f'{before.id}',inline=False)
        embed.add_field(name="Created at:",value=f'{before.created_at}',inline=False)
        embed.set_footer(text=self.bot.user.name, icon_url=self.bot.user.avatar_url)
        embed.set_thumbnail(url=before.guild.icon_url)
        embed.set_author(name=author.name, icon_url=author.avatar_url)
        ##########
        await logchannel.send(embed=embed)  # Send the message.
        try:
          if(int(urls_used)!=0):
            other_embed=discord.Embed(title="Attachments files in that last message",description="⚠️⚠️Files can not be accessed. Only pictures can be seen⚠️⚠️",colour=0xff0000)
            await logchannel.send(embed=other_embed)
            for i in range(urls_used):
              new_embed=discord.Embed(title="Attachments:",description=f"Sent by Author:{author.mention} was deleted in bulk delete in {channel.mention} ",color=randint(0, 0xffffff))
              await logchannel.send(embed=new_embed)
              await logchannel.send(before.attachments[i].url)
              await asyncio.sleep(1)
        except:
          return
   


def setup(bot):
    # asyncio.sleep(3)
    bot.add_cog(Logs(bot))
    print("Logs was loaded")