from discord.ext import commands
import discord
import asyncio
import random
from PIL import Image, ImageDraw, ImageFont, ImageOps, ImageSequence
from discord.ext.commands import cooldown, BucketType
from io import BytesIO
import json
import datetime
import asyncio
import os
from mongodbs import *

# welcome_channel_id = 905835369247952936 #remove ""
# verify_channel_id = "verification channel id here" #remove ""
# role_name = "role name here"


class Welcome(commands.Cog, name='welcome'):

    def __init__(self, bot):
        self.bot = bot

    def cog_load(self):
        print("welcome was loaded")

    def cog_unload(self):
        print(f'welcome was unloaded')

    @commands.command()
    @commands.guild_only()
    @commands.has_permissions(administrator=True)
    @commands.cooldown(1, 3, commands.BucketType.user)
    async def cancel_welcome(self, ctx):
        serverId = ctx.message.guild.id
        if server_info.find_one({'id': serverId}):
            try:
                x = list(server_info.find({"id": serverId}))[0]['disabled']
                if "cancel_welcome" in x:
                    return
            except:
                pass
        try:
            if greetings_info.find_one({'id': serverId})['welcome_channel']:
                channel_id = int(greetings_info.find_one(
                    {'id': serverId})['welcome_channel'])
                greetings_info.update({"id": serverId}, {"$unset": {
                                      "welcome_channel": "", "welcome_message": ""}})
                await ctx.reply("You sucessfully cancelled welcome greetings")
                return

              # except:
              #   greetings_info.delete_one({'id':serverId})
              #   await ctx.reply("You sucessfully cancelled welcome greetings")
              #   return
        except:
            await ctx.reply("Can't cancel. You didn't even setup the welcome greetings even")

    @commands.command()
    @commands.guild_only()
    @commands.cooldown(1, 3, commands.BucketType.user)
    @commands.has_permissions(administrator=True)
    async def cancel_leave(self, ctx):
        serverId = ctx.message.guild.id
        if server_info.find_one({'id': serverId}):
            try:
                x = list(server_info.find({"id": serverId}))[0]['disabled']
                if "cancel_leave" in x:
                    return
            except:
                pass
        try:
            if greetings_info.find_one({'id': serverId})['leave_channel']:
                channel_id = int(greetings_info.find_one(
                    {'id': serverId})['leave_channel'])
                greetings_info.update({"id": serverId}, {"$unset": {
                                      "leave_channel": "", "leave_message": ""}})
                await ctx.reply("You sucessfully cancelled leave greetings")
                return

              # except:
              #   greetings_info.delete_one({'id':serverId})
              #   await ctx.reply("You sucessfully cancelled welcome greetings")
              #   return
        except:
            await ctx.reply("Can't cancel. You didn't even setup the leave greetings even")

    @commands.command()
    @commands.guild_only()
    @commands.has_permissions(administrator=True)
    @commands.cooldown(1, 5, commands.BucketType.user)
    async def set_welcome(self, ctx):
        serverId = ctx.message.guild.id
        if server_info.find_one({'id': serverId}):
            try:
                x = list(server_info.find({"id": serverId}))[0]['disabled']
                if "set_welcome" in x:
                    return
            except:
                pass
        await ctx.send("For setting up the channel please answer the following questions properly!!")
        questions = ["In which channel you want the welcome message to be sent?",
                     "What message to be sent once the person has joined?"]
        answers = []

        def check(m):
            return m.author == ctx.author and m.channel == ctx.channel
        for i in questions:
            await ctx.send(i)
            try:
                msg = await self.bot.wait_for('message', timeout=60.0, check=check)
            except asyncio.TimeoutError:
                await ctx.send("You didn't answered in time, please answer at next time!")
                return
            else:
                answers.append(msg.content)
        try:
            c_id = int(answers[0][2:-1])
        except:
            await ctx.send(f"You didn't mention a channel correctly.Do it like this {ctx.channel.mention} next time")
            return
        try:
            channel = self.bot.get_channel(c_id)
        except:
            await ctx.send(f"You didn't mention a channel correctly.Do it like this {ctx.channel.mention} next time")
            return
        serverId = ctx.message.guild.id
        if greetings_info.find_one({'id': serverId}):
            greetings_info.update_one({'id': serverId}, {
                '$set': {'welcome_message': answers[1], "welcome_channel": c_id}})
            await ctx.reply("You fixed the welcome message succesfully")
        else:
            server_Doc = {
                'id': int(serverId), 'welcome_message': answers[1],
                'welcome_channel': c_id
            }
            greetings_info.insert_one(server_Doc)
            await ctx.reply("You fixed the welcome message succesfully")

    @commands.command()
    @commands.guild_only()
    @commands.has_permissions(administrator=True)
    @commands.cooldown(1, 5, commands.BucketType.user)
    async def set_leave(self, ctx):
        serverId = ctx.message.guild.id
        if server_info.find_one({'id': serverId}):
            try:
                x = list(server_info.find({"id": serverId}))[0]['disabled']
                if "set_leave" in x:
                    return
            except:
                pass
        await ctx.send("For setting up the channel please answer the following questions properly!!")
        questions = ["In which you want the leave message to be sent?",
                     "What message to be sent once the person has left the server?"]
        answers = []

        def check(m):
            return m.author == ctx.author and m.channel == ctx.channel
        for i in questions:
            await ctx.send(i)
            try:
                msg = await self.bot.wait_for('message', timeout=60.0, check=check)
            except asyncio.TimeoutError:
                await ctx.send("You didn't answered in time, please answer at next time!")
                return
            else:
                answers.append(msg.content)
        try:
            c_id = int(answers[0][2:-1])
        except:
            await ctx.send(f"You didn't mention a channel correctly.Do it like this {ctx.channel.mention} next time")
            return
        try:
            channel = self.bot.get_channel(c_id)
        except:
            await ctx.send(f"You didn't mention a channel correctly.Do it like this {ctx.channel.mention} next time")
            return
        serverId = ctx.message.guild.id
        if greetings_info.find_one({'id': serverId}):
            greetings_info.update_one({'id': serverId}, {
                '$set': {'leave_message': answers[1], "leave_channel": c_id}})
            await ctx.reply("You fixed the leave message succesfully")
        else:
            server_Doc = {
                'id': int(serverId), 'leave_message': answers[1],
                'leave_channel': c_id
            }
            greetings_info.insert_one(server_Doc)
            await ctx.reply("You fixed the leave message succesfully")

    @commands.Cog.listener()
    async def on_member_join(self, member):
        serverId = member.guild.id
        try:
            channel_id = int(greetings_info.find_one(
                {'id': serverId})['welcome_channel'])
            welcome_message = str(greetings_info.find_one(
                {'id': serverId})['welcome_message'])
        except:
            return
        ava = member.avatar_url_as(size=1024)
        data = BytesIO(await ava.read())
        img = Image.open(data)

        # crop image
        width, height = img.size
        x = (width - height)//2
        img_cropped = img.crop((x, 0, x+height, height))

        # create grayscale image with white circle (255) on black background (0)
        mask = Image.new('L', img_cropped.size, color=255)
        mask_draw = ImageDraw.Draw(mask)
        width, height = img_cropped.size
        mask_draw.ellipse((0, 0, width, height))
        # mask.show()

        # add mask as alpha channel
        img_cropped.putalpha(mask)
        img_cropped = img_cropped.resize((493, 435))
        # save as png which keeps alpha channel
        img_cropped.save('.//storage//profile.png')


#######################################################################

        font1 = ImageFont.truetype("theboldfont.ttf", 80)
        font2 = ImageFont.truetype("theboldfont.ttf", 85)
        welcome = Image.open('.//assets//welcome_template.png')
        welcome = welcome.resize((2224, 1092))
        welcome.paste(img_cropped, (869, 169))
        draw = ImageDraw.Draw(welcome)
        draw.text((821, 663), f"{member.name}", (0, 128, 0), font=font1)
        draw.text((615, 785), f"Welcome to the Server !!",
                  (65, 105, 225), font=font2)
        welcome.save(".//storage//welcome.png")

########################################################################
        await self.bot.get_channel(channel_id).send(f"{member.mention}{welcome_message}")
        await self.bot.get_channel(channel_id).send(file=discord.File(".//storage//welcome.png"))

    @commands.command()
    @commands.guild_only()
    @commands.cooldown(1, 4, commands.BucketType.user)
    async def rip(self, ctx, member: discord.Member = None):
        serverId = ctx.message.guild.id
        if server_info.find_one({'id': serverId}):
            try:
                x = list(server_info.find({"id": serverId}))[0]['disabled']
                if "rip" in x:
                    return
            except:
                pass
        if not member:
            member = ctx.author
        rip = Image.open('.//assets//rip.jpg')
        asset = member.avatar_url_as(size=128)
        data = BytesIO(await asset.read())
        pfp = Image.open(data)
        pfp = pfp.resize((513, 395))

        rip.paste(pfp, (223, 613))
        rip.save('.//storage//prip.jpg')
        await ctx.send(file=discord.File('.//storage//prip.jpg'))

    @commands.command()
    @commands.guild_only()
    @commands.cooldown(1, 4, commands.BucketType.user)
    async def wanted(self, ctx, member: discord.Member = None):
        serverId = ctx.message.guild.id
        if server_info.find_one({'id': serverId}):
            try:
                x = list(server_info.find({"id": serverId}))[0]['disabled']
                if "wanted" in x:
                    return
            except:
                pass
        if not member:
            member = ctx.author
        rip = Image.open('.//assets//wanted.jpg')
        asset = member.avatar_url_as(size=128)
        data = BytesIO(await asset.read())
        pfp = Image.open(data)
        pfp = pfp.resize((581, 583))

        rip.paste(pfp, (219, 457))
        rip.save('.//storage//want.jpg')
        await ctx.send(file=discord.File('.//storage//want.jpg'))

    @commands.Cog.listener()
    async def on_member_remove(self, member):
        serverId = member.guild.id
        try:
            channel_id = int(greetings_info.find_one(
                {'id': serverId})['leave_channel'])
            leave_message = str(greetings_info.find_one(
                {'id': serverId})['leave_message'])
        except:
            return

        ava = member.avatar_url_as(size=1024)
        data = BytesIO(await ava.read())
        img = Image.open(data)

        # crop image
        width, height = img.size
        x = (width - height)//2
        img_cropped = img.crop((x, 0, x+height, height))

        # create grayscale image with white circle (255) on black background (0)
        mask = Image.new('L', img_cropped.size, color=255)
        mask_draw = ImageDraw.Draw(mask)
        width, height = img_cropped.size
        mask_draw.ellipse((0, 0, width, height))
        # mask.show()

        # add mask as alpha channel
        img_cropped.putalpha(mask)
        img_cropped = img_cropped.resize((493, 435))
        # save as png which keeps alpha channel
        img_cropped.save('.//storage//profile.png')


#######################################################################

        font1 = ImageFont.truetype("theboldfont.ttf", 80)
        font2 = ImageFont.truetype("theboldfont.ttf", 85)
        welcome = Image.open('.//assets//welcome_template.png')
        welcome = welcome.resize((2224, 1092))
        welcome.paste(img_cropped, (869, 169))
        draw = ImageDraw.Draw(welcome)
        draw.text((821, 663), f"{member.name}", (0, 128, 0), font=font1)
        draw.text((615, 785), f"      Bye see you later !!",
                  (255, 0, 0), font=font2)
        welcome.save(".//storage//leave.png")

########################################################################
        await self.bot.get_channel(channel_id).send(f"{member.mention} {leave_message}")
        await self.bot.get_channel(channel_id).send(file=discord.File(".//storage//leave.png"))

    @commands.command()
    @commands.guild_only()
    @commands.cooldown(1, 4, commands.BucketType.user)
    async def slap(self, ctx, member: discord.Member):
        serverId = ctx.message.guild.id
        if server_info.find_one({'id': serverId}):
            try:
                x = list(server_info.find({"id": serverId}))[0]['disabled']
                if "slap" in x:
                    return
            except:
                pass
        user = ctx.author.avatar_url_as(size=128)
        data = BytesIO(await user.read())
        pfp = Image.open(data)
        pfp = pfp.resize((405, 501))
        slap = Image.open('.//assets//slap.jpg')
        slap.paste(pfp, (791, 119))
        asset = member.avatar_url_as(size=128)
        data = BytesIO(await asset.read())
        enemy_pfp = Image.open(data)
        enemy_pfp = enemy_pfp.resize((479, 561))
        slap.paste(enemy_pfp, (1279, 523))

        # rip.paste(pfp,(219,457))
        slap.save('.//storage//slap.jpg')
        await ctx.send(file=discord.File('.//storage//slap.jpg'))

    @commands.command()
    @commands.guild_only()
    @commands.cooldown(1, 4, commands.BucketType.user)
    async def punch(self, ctx, member: discord.Member):
        serverId = ctx.message.guild.id
        if server_info.find_one({'id': serverId}):
            try:
                x = list(server_info.find({"id": serverId}))[0]['disabled']
                if "punch" in x:
                    return
            except:
                pass
        user = ctx.author.avatar_url_as(size=128)
        data = BytesIO(await user.read())
        pfp = Image.open(data)
        pfp = pfp.resize((203, 213))
        punch = Image.open('.//assets//punch.jpg')
        punch.paste(pfp, (833, 288))
        asset = member.avatar_url_as(size=128)
        data = BytesIO(await asset.read())
        enemy_pfp = Image.open(data)
        enemy_pfp = enemy_pfp.resize((312, 312))
        punch.paste(enemy_pfp, (244, 163))

        # rip.paste(pfp,(219,457))
        punch.save('.//storage//punch.jpg')
        await ctx.send(file=discord.File('.//storage//punch.jpg'))


def setup(bot):
    bot.add_cog(Welcome(bot))
    print(f'welcome was loaded!')
