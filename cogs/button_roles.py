from discord.ext import commands, tasks
from discord.ext.commands import command, Cog
from mongodbs import *
import discord
import random
from random import randint
import asyncio
from discord.utils import get
from discord.ext.commands import cooldown, BucketType
from discord_components import (
    Button,
    ButtonStyle,
    Select,
    SelectOption,
)


class ExampleCog(Cog):
    def __init__(self, bot):
        self.bot = bot

    @commands.command()
    @commands.guild_only()
    @commands.has_permissions(kick_members=True)
    @commands.cooldown(1, 10, commands.BucketType.user)
    async def button_role(self, ctx):
        await ctx.send("Answer the following questions to finish setting up the button-roles.\n``Don't take more than 2 minute``")
        serverId = ctx.message.guild.id
        count = 0
        questions1 = ["Which channel should the Button-role to be set-uped?", "What is the title for the embed of self-roles?\n``Enter 0 to create embed without title``",
                      "What is the description for embed of self-roles?\n``Enter 0 to create embed without description``", "Number of rows of button?\n``Can't be more than 5 and less than 1`` "]
        answers1 = []

        def check(m):
            return m.author == ctx.author and m.channel == ctx.channel
        for i in questions1:
            await ctx.send(i)
            try:
                msg = await self.bot.wait_for('message', timeout=120, check=check)
            except asyncio.TimeoutError:
                await ctx.send("You didn't entered in time.Please answer at next time!")
                return
            else:
                answers1.append(msg.content)
                if count == 0:
                    try:
                        c_id = int(answers1[0][2:-1])
                        chan = get(ctx.guild.text_channels, id=c_id)
                        channel = self.bot.get_channel(c_id)
                        if channel == None:
                            await ctx.send("No such channel exists.Enter a proper channel!")
                            return
                    except:
                        await ctx.send("No such channel exists.Enter a proper channel!")
                        return
                elif count == 1:
                    title = answers1[1]
                elif count == 2:
                    description = answers1[2]
                elif count == 3:
                    try:
                        no_row = int(answers1[3])
                        if no_row > 5:
                            await ctx.send("Rows can not be greater than 5!")
                            return
                        elif no_row < 1:
                            await ctx.send("Rows can not be lesser than 1!")
                            return
                    except:
                        await ctx.send("No of rows should be integer!")
                        return
                count = count+1
        questions2 = []
        col_info = []
        for i in range(no_row):
            questions2.append(
                f"Enter the number of buttons should be there in row - {str(i+1)}\n``Columns can't be more than 5 and less than 1``")
        for i in range(len(questions2)):
            await ctx.send(questions2[i])
            try:
                msg = await self.bot.wait_for('message', timeout=120, check=check)
            except asyncio.TimeoutError:
                await ctx.send("You didn't entered in time.Please answer at next time!")
                return
            else:
                try:
                    x = int(msg.content)
                    if x > 5:
                        await ctx.send("No-of buttons in a row can't be more than 5!")
                        return
                    elif x < 1:
                        await ctx.send("No-of buttons in a row can't be less than 1")
                        return
                    else:
                        col_info.append(x)
                except:
                    await ctx.send("No-of-buttons should be integer and lies between 1 - 5")
                    return
        questions3 = []
        for i in range(no_row):
            for j in range(col_info[i]):
                questions3.append(
                    f"Enter the label of {str(i+1)} row - {str(j+1)} th button")
                questions3.append(
                    f"Enter the id of the role to be given when {str(i+1)} row - {str(j+1)} th button is clicked!")
                questions3.append(
                    f"Enter the colour of {str(i+1)} row - {str(j+1)} th button\n``Press 1 for blue,2 for grey,3 for green,4 for red``")
                questions3.append(
                    f"Enter the **id of emoji** of {str(i+1)} row - {str(j+1)} th button\n``Enter 0 if you don't need any emojis.Only works if bot is in that guild``**If you entered Wrong emoji-id** it will be displayed atlast.So enter correct-id**")
        count = 0
        answers3 = []
        for i in questions3:
            await ctx.send(i)
            try:
                msg = await self.bot.wait_for('message', timeout=150, check=check)
            except asyncio.TimeoutError:
                await ctx.send("You didn't entered in time.Please answer at next time!")
                return
            else:

                if count == 0:
                    count = count+1
                    answers3.append(msg.content)
                elif count == 1:
                    count = count+1
                    try:
                        j = int(msg.content)
                        role = get(ctx.guild.roles, id=j)
                        answers3.append(role.mention)
                    except:
                        await ctx.send("You entered wrong-id!")
                        return
                elif count == 2:
                    try:
                        j = int(msg.content)
                        if j in [1, 2, 3, 4]:
                            count = count+1
                            answers3.append(j)
                        else:
                            await ctx.send("Only 1-4 options are available!")

                    except:
                        await ctx.send("Only 1-4 options are available and it should be in integer!")
                        return
                elif count == 3:
                    try:
                        k = int(msg.content)
                        answers3.append(k)
                        count = 0
                    except:
                        await ctx.send("Id of emoji can be only integer!")
                        return
        count = 0
        collection = []
        components = []
        for i in range(no_row):
            row = []
            for j in range(col_info[i]):
                datas = []
                for k in range(count, count+4, 1):
                    datas.append(answers3[k])
                count += 4  # label,role,color,id
                collection.append(datas[0])
                collection.append(datas[1])
                if datas[3] != 0:
                    row.append(
                        Button(label=datas[0], style=datas[2], emoji=self.bot.get_emoji(datas[3])))
                else:
                    row.append(Button(label=datas[0], style=datas[2]))
            components.append(row)
        if(title != "0" and description != "0"):
            embed = discord.Embed(title=title, description=description,
                                  timestamp=ctx.message.created_at, colour=randint(0, 0xffffff))
            embed.set_author(name=ctx.guild.name, icon_url=ctx.guild.icon_url)
            embed.set_footer(text=self.bot.user.name,
                             icon_url=self.bot.user.avatar_url)
            embed.set_thumbnail(
                url=ctx.guild.icon_url)
        elif(title == "0" and description != "0"):

            embed = discord.Embed(
                title=description, timestamp=ctx.message.created_at, colour=randint(0, 0xffffff))
            embed.set_author(name=ctx.guild.name, icon_url=ctx.guild.icon_url)
            embed.set_footer(text=self.bot.user.name,
                             icon_url=self.bot.user.avatar_url)
            embed.set_thumbnail(
                url=ctx.guild.icon_url)
        elif(description == "0" and title != "0"):
            embed = discord.Embed(
                title=title, timestamp=ctx.message.created_at, colour=randint(0, 0xffffff))
            embed.set_author(name=ctx.guild.name, icon_url=ctx.guild.icon_url)
            embed.set_footer(text=self.bot.user.name,
                             icon_url=self.bot.user.avatar_url)
            embed.set_thumbnail(
                url=ctx.guild.icon_url)
        else:
            embed = discord.Embed(
                timestamp=ctx.message.created_at, colour=randint(0, 0xffffff))
            embed.set_author(name=ctx.guild.name, icon_url=ctx.guild.icon_url)
            embed.set_footer(text=self.bot.user.name,
                             icon_url=self.bot.user.avatar_url)
            embed.set_thumbnail(
                url=ctx.guild.icon_url)
        try:
            await channel.send(embed=embed, components=components)
        except:
            await channel.send(f"{ctx.author.mention} Error occured. Incorrect id of the emoji")
            return
        # collection

        if button_info.find_one({'id': serverId}):
            for i in range(int(len(collection)/2)):
                button_info.update_one({'id': serverId}, {
                    '$set': {collection[2*i]: collection[2*i+1]}})
                await asyncio.sleep(0.5)
            await ctx.send(f"{ctx.author.mention}You fixed button roles successfully !")
        else:
            server_Doc = {
                'id': int(serverId)
            }
            button_info.insert_one(server_Doc)
            for i in range(int(len(collection)/2)):
                button_info.update_one({'id': serverId}, {
                    '$set': {collection[2*i]: collection[2*i+1]}})
                await asyncio.sleep(0.5)
            await ctx.send(f"{ctx.author.mention}You fixed button roles successfully !")

    @commands.Cog.listener()
    async def on_button_click(self, interaction):
        serverId = interaction.guild.id
        try:
            role = button_info.find_one(
                {'id': serverId})[interaction.component.label]
            user_roles = []
            for i in interaction.author.roles:
                user_roles.append(i.name)
            try:
                role = button_info.find_one(
                    {'id': serverId})[interaction.component.label]
                n = len(role)
                role = int(role[3:n-1])
                target_role = get(interaction.guild.roles, id=role)
                h = str(target_role)
            except:
                embed1 = discord.Embed(
                    title="Interaction failed!", colour=randint(0, 0xffffff))
                await interaction.respond(embed=embed1)
                return
            if(h in user_roles):
                try:
                    embed = discord.Embed(
                        title=f"Removed {target_role.name} role from you!", colour=randint(0, 0xffffff))
                    await interaction.author.remove_roles(target_role)
                    await interaction.respond(embed=embed)
                except:
                    embed1 = discord.Embed(
                        title="Can't remove role!", colour=randint(0, 0xffffff))
                    await interaction.respond(embed=embed1)
            else:
                try:
                    embed = discord.Embed(
                        title=f"Added {target_role.name} role to you!", colour=randint(0, 0xffffff))
                    await interaction.author.add_roles(target_role)
                    await interaction.respond(embed=embed)
                except:
                    embed1 = discord.Embed(
                        title="Can't add role!", colour=randint(0, 0xffffff))
                    await interaction.respond(embed=embed1)
        except:
            pass


def setup(bot):
    bot.add_cog(ExampleCog(bot))
    print("Button_role was added")
