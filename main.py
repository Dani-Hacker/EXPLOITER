from discord.ext.commands import Bot
from discord.ext import commands
import os
import discord
from random import randint
import keep_alive
import DiscordUtils
import random
import asyncio
import json
from discord_components import *
# intents = discord.Intents.all()
intents = discord.Intents(messages=True, guilds=True,
                          members=True, typing=True, presences=True)
####################


def get_prefix(bot, message):
    with open('prefixes.json', "r") as f:
        prefixes = json.load(f)
    try:
        return prefixes[str(message.guild.id)]
    except:
        try:
            prefixes[str(message.guild.id)] = "?"
            with open('prefixes.json', "w") as f:
                json.dump(prefixes, f, indent=4)
            return "?"
        except:
            return "?"


##########
# bot = Bot(command_prefix="?", case_insensitive=True,intents=intents)
bot = Bot(command_prefix=get_prefix, case_insensitive=True, intents=intents)
bot.remove_command("help")
global music
music = DiscordUtils.Music()
DiscordComponents(bot)


@bot.event
async def on_ready():
    print(f"Logged in as {bot.user}")
    while True:
        x = [1, 2, 3, 4, 5, 6, 7, 8]
        option = random.choice(x)
        if(option == 1):
            await bot.change_presence(status=discord.Status.idle, activity=discord.Game(f'on {len(bot.guilds)} servers | ?help'))
        elif option == 2:
            await bot.change_presence(status=discord.Status.idle, activity=discord.Streaming(name="EXPLOITER-STREAMING", url="https://www.youtube.com/watch?v=dQw4w9WgXcQ"))
        elif option == 3:
            await bot.change_presence(status=discord.Status.idle, activity=discord.Activity(type=discord.ActivityType.listening, name="to music"))
        elif option == 4:
            await bot.change_presence(status=discord.Status.idle, activity=discord.Activity(type=discord.ActivityType.watching, name="people who needs my help"))
        elif option == 5:
            await bot.change_presence(status=discord.Status.idle, activity=discord.Game(name="a game"))
        elif option == 6:
            await bot.change_presence(status=discord.Status.idle, activity=discord.Game(name="discord.py"))
        else:
            await bot.change_presence(status=discord.Status.idle, activity=discord.Game(name=f"on {len(bot.guilds)} servers | ?help"))
        await asyncio.sleep(10)

##########################
# @bot.event
# async def on_guild_join(guild):
#   with open('prefixes.json',"r") as f:
#     prefixes=json.load(f)

#   prefixes[str(guild.id)]="?"
#   with open('prefixes.json',"w") as f:
#     json.dump(prefixes,f,indent=4)


# @bot.event
# async def on_guild_remove(guild):
#   with open('prefixes.json',"r") as f:
#     prefixes=json.load(f)
#   prefixes.pop(str(guild.id))
#   with open('prefixes.json',"w") as f:
#     json.dump(prefixes,f,indent=4)
##############
@bot.event
async def on_command_error(ctx, error):
    if isinstance(error, commands.MissingRequiredArgument):
        title_error_one = 'You have not entered anything after the command'
        desc_error_one = 'Use **?help** to see a list of all the commands available'
        embed_var_one = discord.Embed(title=title_error_one,
                                      description=desc_error_one,
                                      colour=randint(0, 0xffffff))
        await ctx.reply(embed=embed_var_one)
    if isinstance(error, commands.MaxConcurrencyReached):
        title_error_four = 'Someone is already playing'
        desc_error_four = 'Please wait until the person currently playing is done with their turn'
        embed_var_four = discord.Embed(title=title_error_four,
                                       description=desc_error_four,
                                       colour=randint(0, 0xffffff))
        await ctx.reply(embed=embed_var_four)
    if isinstance(error, commands.CommandOnCooldown):
        embed = discord.Embed(
            title="**Still on Cooldown!**",
            description=f"Try again in {error.retry_after:.2f}s.",
            colour=randint(0, 0xffffff)
        )
        await ctx.reply(embed=embed)

    if isinstance(error, commands.CommandNotFound):
        return

    if isinstance(error, commands.MissingPermissions):
        embed = discord.Embed(
            title="**Missing Permission!**",
            description=f"{ctx.author.mention}You dont have permissions to use this",
            colour=randint(0, 0xffffff)
        )
        await ctx.reply(embed=embed)
        return

    if isinstance(error, commands.BadArgument):
        embed = discord.Embed(
            title="**Bad Argument!**",
            description=f"{ctx.author.mention} This is Invalid argument",
            colour=randint(0, 0xffffff)
        )
        await ctx.reply(embed=embed)
        return
    if isinstance(error, commands.BotMissingPermissions):
        embed = discord.Embed(
            title="**Bot Missing Permissions!**",
            description=f"{ctx.author.mention} I don't have the required Permission to do this",
            colour=randint(0, 0xffffff)
        )
        await ctx.reply(embed=embed)
        return


if __name__ == "__main__":
    try:
        for filename in os.listdir('./cogs'):
            if(filename.endswith('.py')):
                bot.load_extension(f'cogs.{filename[:-3]}')
    except Exception as exc:
        print(exc)


keep_alive.keep_alive()
token = os.environ.get("TOKEN")
bot.run(token)
