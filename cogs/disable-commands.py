from discord.ext import commands
from discord.ext.commands import cooldown, BucketType
import discord
from mongodbs import *
import asyncio

global commands_available, moderation_available, giveaway_available, music_available, fun_available, games_available, modes_available, utils_available, ticket_available, others_available, greetings_available


commands_available = ["song", "track", "caki", "aki", "ttt", "rps", "current_count", "eball", "wikipedia", "youtube", "voice_logs", "cancel_voice_logs", "action_logs", "cancel_action_logs", "check", "lock", "unlock", "fact", "emoji", "emoji_search", "emoji_list", "channel_status", "calculator", "button_role", "punch", "slap", "kick", "ban", "mute", "unmute", "unban", "clear", "greroll", "gend", "gstart", "gcreate", "grole", "gdrop", "meme", "quote", "fact_cat", "dog", "ip", "bored",
                      "avatar", "hack", "truth", "dare", "rip", "wanted", "remember", "tran", "ping", "poll", "send", "ticketmention", "createticket", "closeticket", "dropticket", "serverinfo", "info", "globalchatstart", "globalchatstop", "set_welcome", "set_leave", "cancel_welcome", "cancel_leave", "start", "beg", "resources", "fight", "scout", "profile", "potion", "train", "train_cost", "invite", "vote", "count_channel", "count_reset", "cancel_count", "change_count", ]
modes_available = ["moderation", "giveaway", "games",
                   "music", "fun", "utils", "ticket", "others", "greetings"]
moderation_available = ["voice_logs", "cancel_voice_logs", "action_logs", "cancel_action_logs",
                        "check", "lock", "unlock", "kick", "ban", "mute", "unmute", "unban", "clear", "button_role"]
giveaway_available = ["greroll", "gend", "gstart", "gcreate", "grole", "gdrop"]
music_available = []
fun_available = ["aki", "caki", "ttt", "rps", "punch", "slap", "meme", "quote", "fact_cat", "dog", "ip", "bored", "avatar", "hack",
                 "truth", "dare", "rip", "wanted", "count_channel", "count_reset", "cancel_count", "change_count", "current_count", "eball"]
utils_available = ["wikipedia", "youtube", "calculator",
                   "remember", "tran", "ping", "poll", "send"]
ticket_available = ["ticketmention",
                    "createticket", "closeticket", "dropticket"]
others_available = ["serverinfo", "info", "globalchatstart", "globalchatstop",
                    "fact", "emoji", "emoji_search", "emoji_list", "channel_status"]
greetings_available = ["set_welcome",
                       "set_leave", "cancel_welcome", "cancel_leave"]
games_available = ["start", "beg", "resources", "fight",
                   "scout", "profile", "potion", "train", "train_cost"]


class Disable(commands.Cog, name='disabler'):
    """Used to disable and enable commands"""

    def __init__(self, bot):
        self.bot = bot

    def cog_load(self):
        print("loaded")

    def cog_unload(self):
        print(f'disabler was unloaded')

    @commands.command()
    @commands.has_permissions(administrator=True)
    async def disable(self, ctx, commander):
        if (commander in modes_available) or (commander in commands_available):
            if commander == "moderation":
                for i in moderation_available:
                    command = self.bot.get_command(i)
                    command.enabled = False
                await ctx.reply(f"{ctx.author.mention} You have disabled Moderation category commands successfully")
            elif commander == "giveaway":
                for i in giveaway_available:
                    command = self.bot.get_command(i)
                    command.enabled = False
                await ctx.reply(f"{ctx.author.mention} You have disabled Giveaway category commands successfully")
            elif commander == "games":
                for i in games_available:
                    command = self.bot.get_command(i)
                    command.enabled = False
                await ctx.reply(f"{ctx.author.mention} You have disabled Games category commands successfully")
            elif commander == "music":
                await ctx.reply(f"{ctx.author.mention} Sorry! the music command can not be disabled for now")
            elif commander == "fun":
                for i in fun_available:
                    command = self.bot.get_command(i)
                    if command is None:
                        pass
                    else:
                        command.enabled = False
                await ctx.reply(f"{ctx.author.mention} You have disabled Games category commands successfully")
            elif commander == "utils":
                for i in utils_available:
                    command = self.bot.get_command(i)
                    command.enabled = False
                await ctx.reply(f"{ctx.author.mention} You have disabled Utils category commands successfully")
            elif commander == "ticket":
                for i in ticket_available:
                    command = self.bot.get_command(i)
                    command.enabled = False
                await ctx.reply(f"{ctx.author.mention} You have disabled Tickets category commands successfully")
            elif commander == "others":
                for i in others_available:
                    command = self.bot.get_command(i)
                    command.enabled = False
                await ctx.reply(f"{ctx.author.mention} You have disabled Other category commands successfully")
            elif commander == "greetings":
                for i in greetings_available:
                    command = self.bot.get_command(i)
                    command.enabled = False
                await ctx.reply(f"{ctx.author.mention} You have disabled greetings category commands successfully")
            else:
                command = self.bot.get_command(commander)
                if command is not None:
                    if command.enabled == False:
                        await ctx.reply(f"{ctx.author.mention} {commander} command was already disabled in this server!")
                    else:
                        command.enabled = False
                        await ctx.reply(f"{ctx.author.mention} You have disabled {commander} command successfully")
                else:
                    await ctx.reply(f"{ctx.author.mention} You have disabled {commander} command successfully")
        else:
            await ctx.reply(f"{ctx.author.mention} No such commands exist or you can't disable that command")

    @commands.command()
    @commands.has_permissions(administrator=True)
    async def enable(self, ctx, commander):
        if (commander in modes_available) or (commander in commands_available):
            if commander == "moderation":
                for i in moderation_available:
                    command = self.bot.get_command(i)
                    command.enabled = True
                await ctx.reply(f"{ctx.author.mention} You have enabled Moderation category commands successfully")
            elif commander == "giveaway":
                for i in giveaway_available:
                    command = self.bot.get_command(i)
                    command.enabled = True
                await ctx.reply(f"{ctx.author.mention} You have enabled Giveaway category commands successfully")
            elif commander == "games":
                for i in games_available:
                    command = self.bot.get_command(i)
                    command.enabled = True
                await ctx.reply(f"{ctx.author.mention} You have enabled Games category commands successfully")
            elif commander == "music":
                await ctx.reply(f"{ctx.author.mention} Sorry! the music command can not be enable or disable the commands for now")
            elif commander == "fun":
                for i in fun_available:
                    command = self.bot.get_command(i)
                    if command is None:
                        pass
                    else:
                        command.enabled = True
                await ctx.reply(f"{ctx.author.mention} You have enabled Games category commands successfully")
            elif commander == "utils":
                for i in utils_available:
                    command = self.bot.get_command(i)
                    command.enabled = True
                await ctx.reply(f"{ctx.author.mention} You have enabled Utils category commands successfully")
            elif commander == "ticket":
                for i in ticket_available:
                    command = self.bot.get_command(i)
                    command.enabled = True
                await ctx.reply(f"{ctx.author.mention} You have enabled Tickets category commands successfully")
            elif commander == "others":
                for i in others_available:
                    command = self.bot.get_command(i)
                    command.enabled = True
                await ctx.reply(f"{ctx.author.mention} You have enabled Other category commands successfully")
            elif commander == "greetings":
                for i in greetings_available:
                    command = self.bot.get_command(i)
                    command.enabled = True
                await ctx.reply(f"{ctx.author.mention} You have enabled greetings category commands successfully")
            else:
                command = self.bot.get_command(commander)
                if command is not None:
                    if command.enabled == True:
                        await ctx.reply(f"{ctx.author.mention} {commander} command was not disabled in this server")
                    else:
                        command.enabled = True
                        await ctx.reply(f"{ctx.author.mention} You have enabled {commander} command successfully")
                else:
                    await ctx.reply(f"{ctx.author.mention} You have enabled {commander} command successfully")
        else:
            await ctx.reply(f"{ctx.author.mention} No such commands exist or you can't disable that command")


def setup(bot):
    # asyncio.sleep(1)
    bot.add_cog(Disable(bot))
    print(f'disabler was loaded!')
