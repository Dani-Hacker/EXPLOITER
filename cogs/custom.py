from discord.ext import commands
import discord
from discord_components import (
    Button,
    ButtonStyle,
    Select,
    SelectOption,
    Interaction
)
import qrcode
import random
from discord.utils import get
from truth_dare import truths, dares
from mongodbs import *
from random import randint
import asyncio
import requests
import json


class Custom(commands.Cog, name='custom'):

    def __init__(self, bot):
        self.bot = bot

    def cog_load(self):

        print("custom-commands was loaded")

    def cog_unload(self):
        print(f'custom-commands was unloaded')

    @commands.command()
    @commands.guild_only()
    @commands.has_permissions(kick_members=True)
    async def custom(self, ctx):
        serverId = ctx.message.guild.id
        author = ctx.author

        def check(m):
            return m.author == ctx.author and m.channel == ctx.channel
        await ctx.send("What is the name of the command you want to set-up?.``Note: It must not be an inbuilt or already created command``")
        try:
            command_input = await self.bot.wait_for('message', timeout=40.0, check=check)
        except asyncio.TimeoutError:
            await ctx.send("You didn't answered in time.Next time try to answer correctly")
            return
        command = command_input.content
        doubt = " "
        if doubt in command:
            await ctx.reply(f"Only commands without spaces can be set-up")
            return
        else:
            try:
                command_db = server_total.find_one({"id": serverId})
                commands = command_db["commands"]
                if command in commands:
                    await ctx.reply("Already a command with such name exists")
                    return
                elif command_db["count"] > 25:
                    await ctx.reply("Your server reached maximum custom commands i.e) 25")
                    return
            except:
                pass
            data = []
            components_type = [
                [
                    Button(label='Message Type', style=ButtonStyle.blue,
                           custom_id='message', emoji="üí¨"),
                    Button(label='Embed Type', style=ButtonStyle.blue,
                           custom_id='embed', emoji="üìù")

                ],
                [Button(label='End interaction', style=ButtonStyle.red,
                        custom_id='end', emoji="üóëÔ∏è")]
            ]
            embed = discord.Embed(
                title=f"New-Custom-Command {command} setup", description="Available command option", colour=randint(0, 0xffffff))
            embed.add_field(name="Reply with message",
                            value="Enter Message Type for reply with message command", inline=False)
            embed.add_field(name="Reply with embed",
                            value="Enter Embed Type to reply message with embed", inline=False)
            message = await ctx.send(embed=embed, components=components_type)
            while True:
                try:
                    interaction = await self.bot.wait_for(
                        'button_click',
                        check=lambda inter: inter.message.id == message.id,
                        timeout=20
                    )
                except asyncio.TimeoutError:
                    embed.description = "You didn't answered the question in time"
                    for row in components_type:
                        row.disable_components()
                    return await message.edit(embed=embed, components=components_type)
                if interaction.author.id == author.id:
                    if interaction.custom_id == "end":
                        embed.description = f"You selected {interaction.component.label} option and exited setting up the command"
                        embed.colour = discord.Color.red()
                        for row in components_type:
                            row.disable_components()
                        return await interaction.edit_origin(embed=embed, components=components_type)
                    else:
                        data.append(interaction.custom_id)
                        embed.description = f"You selected {interaction.component.label} option"
                        embed.colour = discord.Color.green()
                        for row in components_type:
                            row.disable_components()
                        await interaction.edit_origin(embed=embed, components=components_type)
                        break
                else:
                    await interaction.send(f"It is only for {author.mention}")
            if data[0] == "message":
                await ctx.send("What is the message to be sent when someone uses this command?\n``Please type the message within 3 minutes``")
                try:
                    command_input = await self.bot.wait_for('message', timeout=180.0, check=check)
                except asyncio.TimeoutError:
                    await ctx.send("You didn't answered in time.Sorry Please start the set-up from first")
                    return
                # message_command_info
                message = command_input.content
                message_Doc = {
                    "id": int(serverId),
                    "command": command,
                    "message": str(message)
                }
                message_command_info.insert_one(message_Doc)
                await asyncio.sleep(0.5)
            else:
                serverId = ctx.message.guild.id
                components = [
                    [
                        Select(
                            placeholder="Select things that want to be in your embed",
                            options=[
                                SelectOption(label='Title', value='title', emoji=self.bot.get_emoji(
                                    853591761640620032), description="Title for embed", default=False),
                                SelectOption(label='Description', value='description',
                                             description="Description for embed", emoji=self.bot.get_emoji(853176313895452672)),
                                SelectOption(label='Thumbnail', value='thumbnail', emoji=self.bot.get_emoji(
                                    873887310888976414), description="Thumbnail for embed", default=False),
                                SelectOption(label='Field', value='field', emoji=self.bot.get_emoji(
                                    854215468817711125), description="Field for embed", default=False),
                                SelectOption(label='Author', value='author', emoji=self.bot.get_emoji(
                                    853591761461313536), description="Author for embed", default=False),
                                SelectOption(label='Author-url', value='author_url', emoji=self.bot.get_emoji(
                                    854218302431559691), description="Author-url for embed", default=False),
                                SelectOption(label='Image', value='image', emoji=self.bot.get_emoji(
                                    853167560806498394), description="Image for embed", default=False),
                                SelectOption(label='Footer', value='footer', description="Footer for embed", emoji=self.bot.get_emoji(
                                    852923708175286302), default=False),
                                SelectOption(label='Footer-url', value='footer_url', description="Footer url for embed",
                                             emoji=self.bot.get_emoji(853591768279810098), default=False),
                                SelectOption(label='Time-stamp', value='time_stamp', description="Time-stamp for embed",
                                             emoji=self.bot.get_emoji(889831042398175232), default=False)
                            ], min_values=1,
                            max_values=10
                        )
                    ],
                    [
                        Button(emoji=self.bot.get_emoji(
                            853167562397057043), label='Confirm', style=ButtonStyle.green, custom_id='confirm'),
                        Button(label='Cancel', style=ButtonStyle.red,
                               custom_id='end', emoji="üóëÔ∏è")
                    ]
                ]
                embed = discord.Embed(
                    title=f"Selection for embed", description="Click on the button to choose what are the things you want in embed", colour=randint(0, 0xffffff))
                message = await ctx.send(embed=embed, components=components)
                interaction_values = []
                while True:
                    try:
                        interaction = await self.bot.wait_for(
                            'interaction',
                            check=lambda inter: inter.message.id == message.id,
                            timeout=30
                        )
                    except asyncio.TimeoutError:
                        for row in components:
                            row.disable_components()
                        return await message.edit(components=components)

                    if interaction.author.id == ctx.author.id:
                        pass
                    else:
                        await interaction.send("Hey! This is not for you!")

                    # else:
                    if isinstance(interaction.component, Button):
                        if interaction.author.id == ctx.author.id:
                            if interaction.custom_id == "confirm":
                                if interaction_values == []:
                                    await interaction.send("You selected nothing to confirm")
                                else:
                                    count = 0
                                    for i in range(len(interaction_values)):
                                        if interaction_values[i] in ['title', 'description', 'field']:
                                            count = count+1
                                    if "footer" in interaction_values or "footer_url" in interaction_values:
                                        if not ("footer" in interaction_values and "footer_url" in interaction_values):
                                            count = 0
                                            await interaction.send("Either footer and footer-url should be selected or should not be selected")
                                    if "author" in interaction_values or "author_url" in interaction_values:
                                        if not ("author" in interaction_values and "author_url" in interaction_values):
                                            count = 0
                                            await interaction.send("Either author and author-url should be selected or should not be selected")
                                    if count == 0:
                                        await interaction.send("Atleast one in title,description,field is to be present in an embed")
                                    else:
                                        for row in components:
                                            row.disable_components()
                                        await message.edit(components=components)
                                        await interaction.send("You confirmed the things successfully!")
                                        break
                            else:
                                if interaction_values == []:
                                    await interaction.send("You have selected nothing to cancel")
                                else:
                                    interaction.values = []
                                    interaction_values = []
                                    await message.edit(components=components)
                                    await interaction.send("Cleared your selection!")
                        else:
                            await interaction.send("Hey! This is not for you!")

                    if isinstance(interaction.component, Select):
                        if interaction.author.id == ctx.author.id:
                            interaction_values = interaction.values
                            await interaction.send(f"You selected {interaction.values}\n``Press confirm to confirm it or cancel to cancel the selection``")
                        else:
                            await interaction.send("Hey! This is not for you!")

                title = description = no_field = thumbnail = author = author_url = image = footer = footer_url = time_stamp = "0"
                count = 0
                answers = []

                def checks(m):
                    return m.author == ctx.author and m.channel == ctx.channel
                for i in range(len(interaction_values)):
                    if interaction_values[i] == "title":
                        count = 0
                        questions = "<a:arrow:854215468817711125> Enter the title of the embed:"
                    elif interaction_values[i] == "description":
                        count = 1
                        questions = "<a:arrow:854215468817711125> Enter the description of embed:"
                    elif interaction_values[i] == "field":
                        count = 2
                        questions = "<a:arrow:854215468817711125> Enter number of fields in an embed:"
                    elif interaction_values[i] == "thumbnail":
                        count = 3
                        questions = "<a:arrow:854215468817711125> Enter the url of thumbnail for your embed:\n``Press 1 to send the server profile as thumbnail``\n``Press 2 to send the command user profile as thumbnail``\n``Press 3 to send the bot's profile as thumbnail``\n``If you want custom thumbnail sent it as url or upload the image or gif``"
                    elif interaction_values[i] == "author":
                        count = 4
                        questions = "<a:arrow:854215468817711125> Enter the author name of embed:\n``Press 1 to send the server name as author name``\n``Press 2 to send the command user name as author name``\n``Press 3 to send the bot's profile name as author-name``\n``If you want custom name type it here``"
                    elif interaction_values[i] == "author_url":
                        count = 5
                        questions = "<a:arrow:854215468817711125> Enter the author-url for the embed:\n``Press 1 to send the server profile as author-url``\n``Press 2 to send the command user profile as author-url``\n``Press 3 to send the bot's profile as author-url``\n``If you want custom author-url sent it as url or upload the image or gif``"
                    elif interaction_values[i] == "image":
                        count = 6
                        questions = "<a:arrow:854215468817711125> Enter the image for the embed:\n``Press 1 to send the server profile as image``\n``Press 2 to send the command user profile as image``\n``Press 3 to send the bot's profile as image``\n``If you want custom image sent it as url or upload the image or gif``"
                    elif interaction_values[i] == "footer":
                        count = 7
                        questions = "<a:arrow:854215468817711125> Enter the footer text of the embed:\n``Press 1 to send the server name as footer-text``\n``Press 2 to send the command user name as footer-text``\n``Press 3 to send the bot's profile name as server-text``\n``If you want custom name type it here``"
                    elif interaction_values[i] == "footer_url":
                        count = 8
                        questions = "<a:arrow:854215468817711125> Enter the footer-url of the embed:\n``Press 1 to send the server profile as footer-url``\n``Press 2 to send the command user profile as footer-url``\n``Press 3 to send the bot's profile as footer-url``\n``If you want custom image sent it as url or upload the image or gif``"
                    else:
                        count = 9
                        time_stamp = 1
                        break
                    await ctx.send(questions)
                    try:
                        msg = await self.bot.wait_for('message', timeout=120.0, check=checks)
                    except asyncio.TimeoutError:
                        await ctx.send("You didn't answered in time, please answer at next time!")
                        return
                    else:
                        if count == 0:
                            title = msg.content
                        elif count == 1:
                            description = msg.content
                        elif count == 2:
                            try:
                                no_field = int(msg.content)
                                if no_field > 5 or no_field < 1:
                                    await ctx.send("No.of fields can't be greater than 5 or less than 1")
                                    return
                            except:
                                await ctx.send("Only integers are allowed")
                        elif count == 3:
                            try:
                                embed = discord.Embed(title="sample")
                                embed.set_thumbnail(url=msg.attachments[0].url)
                                await ctx.send(embed=embed)
                                thumbnail = msg.attachments[0].url
                                await ctx.send("Your thumbnail looks like this")
                            except:
                                try:
                                    embed = discord.Embed(title="sample")
                                    embed.set_thumbnail(url=msg.content)
                                    thumbnail = msg.content
                                    await ctx.send(embed=embed)
                                    await ctx.send("Your thumbnail looks like this")
                                except:
                                    try:
                                        if msg.content == "1" or msg.content == "2" or msg.content == "3":
                                            thumbnail = int(msg.content)
                                        else:
                                            await ctx.send("Invalid url")
                                            return
                                    except:
                                        await ctx.send("Invalid url")
                                        return
                        elif count == 4:
                            if msg.content == "1" or msg.content == "2" or msg.content == "3":
                                author = int(msg.content)
                            else:
                                author = msg.content
                        elif count == 5:
                            try:
                                embed = discord.Embed(title="sample")
                                embed.set_author(
                                    name="check", icon_url=msg.attachments[0].url)
                                await ctx.send(embed=embed)
                                author_url = msg.attachments[0].url
                                await ctx.send("Your author_url looks like this")
                            except:
                                try:
                                    embed = discord.Embed(title="sample")
                                    embed.set_author(
                                        name="check", icon_url=msg.content)
                                    author_url = msg.content
                                    await ctx.send(embed=embed)
                                    await ctx.send("Your author_url looks like this")
                                except:
                                    try:
                                        if msg.content == "1" or msg.content == "2" or msg.content == "3":
                                            author_url = int(msg.content)
                                        else:
                                            await ctx.send("Invalid url")
                                            return
                                    except:
                                        await ctx.send("Invalid url")
                                        return
                        elif count == 6:
                            try:
                                embed = discord.Embed(title="sample")
                                embed.set_image(url=msg.attachments[0].url)
                                await ctx.send(embed=embed)
                                image = msg.attachments[0].url
                                await ctx.send("Your image_url looks like this")
                            except:
                                try:
                                    embed = discord.Embed(title="sample")
                                    embed.set_image(url=msg.content)
                                    image = msg.content
                                    await ctx.send(embed=embed)
                                    await ctx.send("Your image_url looks like this")
                                except:
                                    try:
                                        if msg.content == "1" or msg.content == "2" or msg.content == "3":
                                            image = int(msg.content)
                                        else:
                                            await ctx.send("Invalid url")
                                            return
                                    except:
                                        await ctx.send("Invalid url")
                                        return
                        elif count == 7:
                            if msg.content == "1" or msg.content == "2" or msg.content == "3":
                                footer = int(msg.content)
                            else:
                                footer = msg.content
                        elif count == 8:
                            try:
                                embed = discord.Embed(title="sample")
                                embed.set_footer(
                                    text="check", icon_url=msg.attachments[0].url)
                                await ctx.send(embed=embed)
                                footer_url = msg.attachments[0].url
                                await ctx.send("Your footer_url looks like this")
                            except:
                                try:
                                    embed = discord.Embed(title="sample")
                                    embed.set_footer(
                                        text="check", icon_url=msg.content)
                                    footer_url = msg.content
                                    await ctx.send(embed=embed)
                                    await ctx.send("Your footer_url looks like this")
                                except:
                                    try:
                                        if msg.content == "1" or msg.content == "2" or msg.content == "3":
                                            footer_url = int(msg.content)
                                        else:
                                            await ctx.send("Invalid url")
                                            return
                                    except:
                                        await ctx.send("Invalid url")
                                        return
                        else:
                            await ctx.send("error occured!")
                            return

                if no_field == "0":
                    embed_Doc = {
                        "id": int(serverId),
                        "command": command,
                        "title": title,
                        "description": description,
                        "no_field": no_field,
                        "thumbnail": thumbnail,
                        "author": author,
                        "author_url": author_url,
                        "image": image,
                        "footer": footer,
                        "footer_url": footer_url,
                        "time_stamp": time_stamp
                    }
                    embed_command_info.insert_one(embed_Doc)
                else:  # point
                    questions4 = []
                    count = 0
                    for i in range(int(no_field)):
                        questions4.append(
                            f"<a:arrow:854215468817711125> Enter the name of field - {str(i+1)}")
                        questions4.append(
                            f"<a:arrow:854215468817711125> Enter the value of field - {str(i+1)}")
                        questions4.append(
                            f"<a:arrow:854215468817711125> Enter the inline of field - {str(i+1)}\n``Enter - 0 to make the field in new-line and Enter - 1 to make the field in same line``")
                    answers4 = []
                    for i in questions4:
                        await ctx.send(i)
                        try:
                            msg = await self.bot.wait_for('message', timeout=120.0, check=checks)
                        except asyncio.TimeoutError:
                            await ctx.send("You didn't answered in time, please answer at next time!")
                            return
                        else:
                            if count % 3 == 2:
                                x = (msg.content)
                                if x == "1":
                                    answers4.append(x)
                                else:
                                    x = "0"
                                    answers4.append(x)
                                count = count+1
                            else:
                                answers4.append(msg.content)
                                count = count+1
                    embed_Doc = {
                        "id": int(serverId),
                        "command": command,
                        "title": title,
                        "description": description,
                        "no_field": no_field,
                        "thumbnail": thumbnail,
                        "author": author,
                        "author_url": author_url,
                        "image": image,
                        "footer": footer,
                        "footer_url": footer_url,
                        "time_stamp": time_stamp
                    }
                    for i in range(no_field):
                        embed_Doc[f"name{i}"] = f"{answers4[3*i]}"
                        embed_Doc[f"value{i}"] = f"{answers4[3*i+1]}"
                        embed_Doc[f"inline{i}"] = f"{answers4[3*i+2]}"
                    embed_command_info.insert_one(embed_Doc)
                    await asyncio.sleep(0.5)

            if not server_total.find_one({'id': serverId}):
                command_list = []
                datases = []
                command_list.append(command)
                datases.append(command)
                datases.append(data[0])
                comDoc = {
                    'id': int(serverId),
                    'count': int(1),
                    'commands': command_list,
                    f"{command}": datases
                }
                server_total.insert_one(comDoc)
            else:
                commands.append(command)
                datases = []
                datases.append(command)
                datases.append(data[0])
                count = int(command_db['count'])+1
                server_total.update_one({'id': serverId}, {
                    '$set': {"commands": commands, "count": count, f"{command}": datases}})
            await ctx.reply(f"{ctx.author.mention}Your {command} command has been fixed succesfully!\nInorder to use that command you added use ``?tag {command}``")

    # @commands.command()
    # async def hi(self,ctx):
    #   await ctx.send("<a:GTA_Loading:910899757189324840> hello")

    @commands.command()
    @commands.guild_only()
    async def tag(self, ctx, command: str):
        serverId = ctx.message.guild.id
        server_db = server_total.find_one({"id": serverId})
        commands = server_db["commands"]
        if command in commands:
            type = server_db[command][1]
        else:
            return
        if type == "message":
            x = message_command_info.find_one(
                {"id": serverId, "command": command})
            await ctx.send(x["message"])
        elif type == "embed":
            embed_db = embed_command_info.find_one(
                {"id": serverId, "command": command})
            title = embed_db['title']
            description = embed_db["description"]
            thumbnail = embed_db["thumbnail"]
            author = embed_db["author"]
            author_url = embed_db["author_url"]
            image = embed_db["image"]
            footer = embed_db["footer"]
            footer_url = embed_db["footer_url"]
            time_stamp = embed_db["time_stamp"]
            no_field = int(embed_db["no_field"])
            new_embed = discord.Embed(colour=randint(0, 0xffffff))
            if title != "0":
                new_embed.title = f"{title}"
            if description != "0":
                new_embed.description = f"{description}"
            if thumbnail != "0":
                if thumbnail == 1:
                    new_embed.set_thumbnail(url=ctx.guild.icon_url)
                elif thumbnail == 2:
                    new_embed.set_thumbnail(url=ctx.author.avatar_url)
                elif thumbnail == 3:
                    new_embed.set_thumbnail(url=self.bot.user.avatar_url)
                else:
                    new_embed.set_thumbnail(url=str(thumbnail))
            if author != "0":
                if author == 1:
                    author = ctx.author.guild.name
                elif author == 2:
                    author = ctx.author.name
                elif author == 3:
                    author = self.bot.user.name
                else:
                    author = author
                if author_url == 1:
                    author_url = ctx.author.guild.icon_url
                elif author_url == 2:
                    author_url = ctx.author.avatar_url
                elif author_url == 3:
                    author_url = self.bot.user.avatar_url
                else:
                    author_url = author_url
                new_embed.set_author(name=author, icon_url=author_url)
            if image != "0":
                if image == 1:
                    image = ctx.author.guild.icon_url
                elif image == 2:
                    image = ctx.author.avatar_url
                elif image == 3:
                    image = self.bot.user.avatar_url
                else:
                    image = image
                new_embed.set_image(url=image)
            if footer != "0":
                if footer == 1:
                    footer = ctx.author.guild.name
                elif footer == 2:
                    footer = ctx.author.name
                elif footer == 3:
                    footer = self.bot.user.name
                else:
                    footer = footer
                if footer_url == 1:
                    footer_url = ctx.guild.icon_url
                elif footer_url == 2:
                    footer_url = ctx.author.avatar_url
                elif footer_url == 3:
                    footer_url = self.bot.user.avatar_url
                else:
                    footer_url = footer_url
                new_embed.set_footer(text=footer, icon_url=footer_url)
            if time_stamp != "0":
                new_embed.timestamp = ctx.message.created_at
            if no_field > 0:
                for i in range(no_field):
                    new_embed.add_field(
                        name=embed_db[f"name{str(i)}"], value=embed_db[f"value{str(i)}"], inline=embed_db[f"inline{str(i)}"])
            await ctx.send(embed=new_embed)
        else:
            await ctx.send("database error")

    @commands.command()
    async def custom_command(self, ctx):
        serverId = ctx.message.guild.id
        no_command = 0
        try:
            custom_db = server_total.find_one({"id": serverId})
            no_command = int(custom_db["count"])
        except:
            pass
        if no_command == 0:
            embed = discord.Embed(title="No Custom-Commands in this server", description=f"You can create custom commands using ``?custom`` command",
                                  timestamp=ctx.message.created_at, colour=randint(0, 0xffffff))
            embed.set_thumbnail(url=ctx.author.guild.icon_url)
            embed.set_footer(text=self.bot.user.name,
                             icon_url=self.bot.user.avatar_url)
            embed.set_author(name=ctx.author.name,
                             icon_url=ctx.author.avatar_url)
            await ctx.send(embed=embed)
            return
        custom_commands = custom_db['commands']
        x = "```shell\n"
        for i in range(no_command):
            command_detail = custom_db[f"{custom_commands[i]}"]
            x += f"Name : {command_detail[0]}\t\tType : {command_detail[1]}\n"
        x += "```"
        embed = discord.Embed(title="Custom-Commands in this server",
                              description=f"Total number of custom-commands : {str(no_command)}", timestamp=ctx.message.created_at, colour=randint(0, 0xffffff))
        embed.add_field(name="Custom Commands and its type",
                        value=x, inline=False)
        embed.set_thumbnail(url=ctx.author.guild.icon_url)
        embed.set_footer(text=self.bot.user.name,
                         icon_url=self.bot.user.avatar_url)
        embed.set_author(name=ctx.author.name, icon_url=ctx.author.avatar_url)
        await ctx.send(embed=embed)

    @commands.command()
    @commands.guild_only()
    async def custom_delete(self, ctx, command):
        try:
            serverId = ctx.message.guild.id
            command_db = server_total.find_one({"id": serverId})
            commands = command_db["commands"]
            type = command_db[command][1]
            if command in commands:
                if int(command_db["count"]) == 1:
                    if type == "message":
                        message_command_info.delete_one(
                            {"id": serverId, "command": command})
                    else:
                        embed_command_info.delete_one(
                            {"id": serverId, "command": command})
                    await asyncio.sleep(0.5)
                    server_total.delete_one({"id": serverId})
                else:
                    commands.remove(command)
                    count = int(command_db["count"])
                    count = count-1
                    server_total.update({"id": serverId}, {
                                        "$unset": {f"{command}": ""}})
                    await asyncio.sleep(0.5)
                    server_total.update_one({'id': serverId}, {
                        '$set': {"count": int(count), "commands": commands}})
                    await asyncio.sleep(0.5)
                    if type == "message":
                        message_command_info.delete_one(
                            {"id": serverId, "command": command})
                    else:
                        embed_command_info.delete_one(
                            {"id": serverId, "command": command})
                await ctx.reply(f"{ctx.author.mention} You successfully deleted {command} custom-command successfully")
                return

            else:
                await ctx.send(f"No such command with name {command} exist. To see the list of custom commands type ``?custom_command``")
                return
        except:
            await ctx.send(f"No such command with name {command} exist. To see the list of custom commands type ``?custom_command``")
            return

    @commands.command()
    async def qr(self, ctx, *, query):
        img = qrcode.make(query)
        img.save("./assets/qr_code.jpg")
        await ctx.send(file=discord.File("./assets/qr_code.jpg"))


def setup(bot):
    # asyncio.sleep(1)
    bot.add_cog(Custom(bot))
    print(f'Custom commands was loaded!')
